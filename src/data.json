{
  "classes": [
    {
      "title": "Global",
      "description": "Global functions.  These can be called without any class",
      "funcs": {
        "AddFOWViewer": {
          "signature": "void AddFOWViewer(int int_1, Vector Vector_2, float float_3, float float_4, bool bool_5)",
          "description": "Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)"
        },
        "AngleDiff": {
          "signature": "float AngleDiff(float ang1, float ang2)",
          "description": "Returns the number of degrees difference between two yaw angles"
        },
        "AppendToLogFile": {
          "signature": "void AppendToLogFile(string string_1, string string_2)",
          "description": "Appends a string to a log file on the server"
        },
        "ApplyDamage": {
          "signature": "float ApplyDamage(handle DamageTable)",
          "description": "Applies damage to a unit."
        },
        "AxisAngleToQuaternion": {
          "signature": "Quaternion AxisAngleToQuaternion(Vector Vector_1, float float_2)",
          "description": "(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis"
        },
        "CalcClosestPointOnEntityOBB": {
          "signature": "Vector CalcClosestPointOnEntityOBB(handle handle_1, Vector Vector_2)",
          "description": "Compute the closest point on the OBB of an entity."
        },
        "CalcDistanceBetweenEntityOBB": {
          "signature": "float CalcDistanceBetweenEntityOBB(handle handle_1, handle handle_2)",
          "description": "Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping."
        },
        "CalcDistanceToLineSegment2D": {
          "signature": "float CalcDistanceToLineSegment2D(Vector vector_1, Vector vector_2, Vector vector_3)",
          "description": "Compute the distance from a point to a line segment."
        },
        "CancelEntityIOEvents": {
          "signature": "void CancelEntityIOEvents(ehandle ehandle_1)",
          "description": "Create all I/O events for a particular entity"
        },
        "ClearTeamCustomHealthbarColor": {
          "signature": "void ClearTeamCustomHealthbarColor(int int_1)",
          "description": "( teamNumber )"
        },
        "CreateEffect": {
          "signature": "bool CreateEffect(handle handle_1)",
          "description": "Pass table - Inputs: entity, effect"
        },
        "CreateHeroForPlayer": {
          "signature": "handle CreateHeroForPlayer(string unitName, handle player)",
          "description": "Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero"
        },
        "CreateHTTPRequestScriptVM": {
          "signature": "handle CreateHTTPRequestScriptVM(string string_1, string string_2)",
          "description": "Create an HTTP request. Recently renamed from CreateHTTPRequest."
        },
        "CreateItem": {
          "signature": "handle CreateItem(string item_name, handle owner, handle owner)",
          "description": "Creates an item with classname item_name that owner can use."
        },
        "CreateItemOnPositionForLaunch": {
          "signature": "handle CreateItemOnPositionForLaunch(Vector Vector_1, handle handle_2)",
          "description": "Create a physical item at a given location, can start in air (but doesn't clear a space)"
        },
        "CreateItemOnPositionSync": {
          "signature": "handle CreateItemOnPositionSync(Vector Vector_1, handle handle_2)",
          "description": "Create a physical item at a given location"
        },
        "CreateModifierThinker": {
          "signature": "handle CreateModifierThinker(handle handle_1, handle handle_2, string string_3, handle handle_4, Vector Vector_5, int int_6, bool bool_7)",
          "description": "Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker )"
        },
        "CreateTempTree": {
          "signature": "void CreateTempTree(Vector Vector_1, float float_2)",
          "description": "Create a temporary tree. (vLocation, flDuration)."
        },
        "CreateTrigger": {
          "signature": "handle CreateTrigger(Vector Vector_1, Vector Vector_2, Vector Vector_3)",
          "description": "CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger"
        },
        "CreateTriggerRadiusApproximate": {
          "signature": "handle CreateTriggerRadiusApproximate(Vector Vector_1, float float_2)",
          "description": "CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided"
        },
        "CreateUnitByName": {
          "signature": "handle CreateUnitByName(string string_1, Vector Vector_2, bool bool_3, handle handle_4, handle handle_5, int int_6)",
          "description": "Creates a DOTA unit by its dota_npc_units.txt name ( szUnitName, vLocation, bFindClearSpace, hNPCOwner, hUnitOwner, iTeamNumber )"
        },
        "CreateUnitByNameAsync": {
          "signature": "int CreateUnitByNameAsync(string string_1, Vector Vector_2, bool bool_3, handle handle_4, handle handle_5, int int_6, handle handle_7)",
          "description": "Creates a DOTA unit by its dota_npc_units.txt name ( szUnitName, vLocation, bFindClearSpace, hNPCOwner, hUnitOwner, iTeamNumber, hCallback )"
        },
        "CreateUnitFromTable": {
          "signature": "handle CreateUnitFromTable(handle handle_1, Vector Vector_2)",
          "description": "Creates a new data-driven entity with the given table"
        },
        "cvar_getf": {
          "signature": "float cvar_getf(string string_1)",
          "description": "Gets the value of the given cvar, as a float."
        },
        "cvar_setf": {
          "signature": "bool cvar_setf(string string_1, float float_2)",
          "description": "Sets the value of the given cvar, as a float."
        },
        "DebugBreak": {
          "signature": "void DebugBreak()",
          "description": "Breaks in the debugger"
        },
        "DebugDrawBox": {
          "signature": "void DebugDrawBox(Vector origin, Vector min, Vector max, int r, int g, int b, int a, float duration)",
          "description": "Draw a debug overlay box"
        },
        "DebugDrawBoxDirection": {
          "signature": "void DebugDrawBoxDirection(Vector Vector_1, Vector Vector_2, Vector Vector_3, Vector Vector_4, Vector Vector_5, float float_6, float float_7)",
          "description": "Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)"
        },
        "DebugDrawCircle": {
          "signature": "void DebugDrawCircle(Vector Vector_1, Vector Vector_2, float float_3, float float_4, bool bool_5, float float_6)",
          "description": "Draw a debug circle (center, vRgb, a, rad, ztest, duration)"
        },
        "DebugDrawClear": {
          "signature": "void DebugDrawClear()",
          "description": "Try to clear all the debug overlay info"
        },
        "DebugDrawLine": {
          "signature": "void DebugDrawLine(Vector Vector_1, Vector Vector_2, int int_3, int int_4, int int_5, bool bool_6, float float_7)",
          "description": "Draw a debug overlay line (origin, target, r, g, b, ztest, duration)"
        },
        "DebugDrawLine_vCol": {
          "signature": "void DebugDrawLine_vCol(Vector Vector_1, Vector Vector_2, Vector Vector_3, bool bool_4, float float_5)",
          "description": "Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)"
        },
        "DebugDrawScreenTextLine": {
          "signature": "void DebugDrawScreenTextLine(float float_1, float float_2, int int_3, string string_4, int int_5, int int_6, int int_7, int int_8, float float_9)",
          "description": "Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)"
        },
        "DebugDrawSphere": {
          "signature": "void DebugDrawSphere(Vector Vector_1, Vector Vector_2, float float_3, float float_4, bool bool_5, float float_6)",
          "description": "Draw a debug sphere (center, vRgb, a, rad, ztest, duration)"
        },
        "DebugDrawText": {
          "signature": "void DebugDrawText(Vector Vector_1, string string_2, bool bool_3, float float_4)",
          "description": "Draw text in 3d (origin, text, bViewCheck, duration)"
        },
        "DebugScreenTextPretty": {
          "signature": "void DebugScreenTextPretty(float float_1, float float_2, int int_3, string string_4, int int_5, int int_6, int int_7, int int_8, float float_9, string string_10, int int_11, bool bool_12)",
          "description": "Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)"
        },
        "DoCleaveAttack": {
          "signature": "int DoCleaveAttack(handle handle_1, handle handle_2, handle handle_3, float float_4, float float_5, string string_6)",
          "description": "(hAttacker, hTarget, hAbility, fDamage, fStartRadius, fEndRadius, fDistance, effectName)"
        },
        "DoEntFire": {
          "signature": "void DoEntFire(string string_1, string string_2, string string_3, float float_4, handle handle_5, handle handle_6)",
          "description": "EntFire: Generate an entity i/o event ( szTarget, szAction, szValue, flDelay, hActivator, hCaller )"
        },
        "DoEntFireByInstanceHandle": {
          "signature": "void DoEntFireByInstanceHandle(handle handle_1, string string_2, string string_3, float float_4, handle handle_5, handle handle_6)",
          "description": "EntFireByHandle:Generate and entity i/o event"
        },
        "DoIncludeScript": {
          "signature": "bool DoIncludeScript(string string_1, handle handle_2)",
          "description": "Execute a script (internal)"
        },
        "DoScriptAssert": {
          "signature": "void DoScriptAssert(bool bool_1, string string_2)",
          "description": "ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog."
        },
        "DoUniqueString": {
          "signature": "string DoUniqueString(string string_1)",
          "description": "UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to table's when not sure what keys are already in use in that table."
        },
        "EmitAnnouncerSound": {
          "signature": "void EmitAnnouncerSound(string string_1)",
          "description": "Emit an announcer sound for all players."
        },
        "EmitAnnouncerSoundForPlayer": {
          "signature": "void EmitAnnouncerSoundForPlayer(string string_1, int int_2)",
          "description": "Emit an announcer sound for a player."
        },
        "EmitAnnouncerSoundForTeam": {
          "signature": "void EmitAnnouncerSoundForTeam(string string_1, int int_2)",
          "description": "Emit an announcer sound for a team."
        },
        "EmitAnnouncerSoundForTeamOnLocation": {
          "signature": "void EmitAnnouncerSoundForTeamOnLocation(string string_1, int int_2, Vector Vector_3)",
          "description": "Emit an announcer sound for a team at a specific location."
        },
        "EmitGlobalSound": {
          "signature": "void EmitGlobalSound(string string_1)",
          "description": "Play named sound for all players"
        },
        "EmitSoundOn": {
          "signature": "void EmitSoundOn(string string_1, handle handle_2)",
          "description": "Play named sound on Entity"
        },
        "EmitSoundOnClient": {
          "signature": "void EmitSoundOnClient(string string_1, handle handle_2)",
          "description": "Play named sound only on the client for the passed in player"
        },
        "EmitSoundOnLocationForAllies": {
          "signature": "void EmitSoundOnLocationForAllies(Vector Vector_1, string string_2, handle handle_3)",
          "description": "Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster"
        },
        "EmitSoundOnLocationWithCaster": {
          "signature": "void EmitSoundOnLocationWithCaster(Vector Vector_1, string string_2, handle handle_3)",
          "description": "Emit a sound on a location from a unit. (vLocation, soundName, hCaster)."
        },
        "EntIndexToHScript": {
          "signature": "handle EntIndexToHScript(int int_1)",
          "description": "Turn an entity index integer to an HScript representing that entity's script instance."
        },
        "ExecuteOrderFromTable": {
          "signature": "void ExecuteOrderFromTable(handle handle_1)",
          "description": "Issue an order from a script table"
        },
        "ExponentialDecay": {
          "signature": "float ExponentialDecay(float float_1, float float_2, float float_3)",
          "description": "Smooth curve decreasing slower as it approaches zero"
        },
        "FileToString": {
          "signature": "string FileToString(string a)",
          "description": "Reads a string from a file to send to script"
        },
        "FindClearSpaceForUnit": {
          "signature": "bool FindClearSpaceForUnit(handle handle_1, Vector Vector_2, bool bool_3)",
          "description": "Place a unit somewhere not already occupied."
        },
        "FindUnitsInRadius": {
          "signature": "table FindUnitsInRadius(int teamNumber, Vector position, handle cacheUnit, float radius, int teamFilter, int typeFilter, int flagFilter, int order, bool canGrowCache)",
          "description": "Finds the units in a given radius with the given flags. ( iTeamNumber, vPosition, hCacheUnit, flRadius, iTeamFilter, iTypeFilter, iFlagFilter, iOrder, bCanGrowCache )"
        },
        "FindUnitsInLine": {
          "signature": "table FindUnitsInLine(int teamNumber, Vector vStartPos, Vector vEndPos, handle cacheUnit, float width, int teamFilter, int typeFilter, int flagFilter)",
          "description": "Finds the units in a given line with the given flags. ( iTeamNumber, vStartPos, vEndPos, hCacheUnit, flWidth, iTeamFilter, iTypeFilter, iFlagFilter)"
        },
        "FireEntityIOInputNameOnly": {
          "signature": "void FireEntityIOInputNameOnly(ehandle ehandle_1, string string_2)",
          "description": "Fire Entity's Action Input w/no data"
        },
        "FireEntityIOInputString": {
          "signature": "void FireEntityIOInputString(ehandle ehandle_1, string string_2, string string_3)",
          "description": "Fire Entity's Action Input with passed String - you own the memory"
        },
        "FireEntityIOInputVec": {
          "signature": "void FireEntityIOInputVec(ehandle ehandle_1, string string_2, Vector Vector_3)",
          "description": "Fire Entity's Action Input with passed Vector ( hEntity, szActionName, vector )"
        },
        "FireGameEvent": {
          "signature": "void FireGameEvent(string eventName, handle parameterTable)",
          "description": "Fire a pre-defined event, which can be found either in custom_events.txt or in dota's resource/*.res"
        },
        "FireGameEventLocal": {
          "signature": "void FireGameEventLocal(string string_1, handle handle_2)",
          "description": "Fire a game event without broadcasting to the client."
        },
        "FrameTime": {
          "signature": "float FrameTime()",
          "description": "Get the time spent on the server in the last frame"
        },
        "GetEntityIndexForTreeId": {
          "signature": "<unknown> GetEntityIndexForTreeId(unsigned unsigned_1)",
          "description": "Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE."
        },
        "GetFrameCount": {
          "signature": "int GetFrameCount()",
          "description": "Returns the engines current frame count"
        },
        "GetFrostyBoostAmount": {
          "signature": "float GetFrostyBoostAmount(int int_1, int int_2)",
          "description": "No Description Set"
        },
        "GetFrostyPointsForRound": {
          "signature": "int GetFrostyPointsForRound(int int_1, int int_2, int int_3)",
          "description": "No Description Set"
        },
        "GetGoldFrostyBoostAmount": {
          "signature": "float GetGoldFrostyBoostAmount(int int_1, int int_2)",
          "description": "No Description Set"
        },
        "GetGoldFrostyPointsForRound": {
          "signature": "int GetGoldFrostyPointsForRound(int int_1, int int_2, int int_3)",
          "description": "No Description Set"
        },
        "GetGroundHeight": {
          "signature": "float GetGroundHeight(Vector Vector_1, handle handle_2)",
          "description": ""
        },
        "GetGroundPosition": {
          "signature": "Vector GetGroundPosition(Vector Vector_1, handle handle_2)",
          "description": "Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset."
        },
        "GetItemCost": {
          "signature": "int GetItemCost(string string_1)",
          "description": "Get the cost of an item by name."
        },
        "GetListenServerHost": {
          "signature": "handle GetListenServerHost()",
          "description": "Get the local player on a listen server."
        },
        "GetMapName": {
          "signature": "string GetMapName()",
          "description": "Get the name of the map."
        },
        "GetMaxOutputDelay": {
          "signature": "float GetMaxOutputDelay(ehandle ehandle_1, string string_2)",
          "description": "Get the longest delay for all events attached to an output"
        },
        "GetPhysAngularVelocity": {
          "signature": "Vector GetPhysAngularVelocity(handle handle_1)",
          "description": "Get Angular Velocity for VPHYS or normal object"
        },
        "GetPhysVelocity": {
          "signature": "Vector GetPhysVelocity(handle handle_1)",
          "description": "Get Velocity for VPHYS or normal object"
        },
        "GetSystemDate": {
          "signature": "string GetSystemDate()",
          "description": "Get the current real world date"
        },
        "GetSystemTime": {
          "signature": "string GetSystemTime()",
          "description": "Get the current real world time"
        },
        "GetTeamHeroKills": {
          "signature": "int GetTeamHeroKills(int int_1)",
          "description": "( int teamID )"
        },
        "GetTeamName": {
          "signature": "string GetTeamName(int teamNumber)",
          "description": "Returns the team name"
        },
        "GetTreeIdForEntityIndex": {
          "signature": "int GetTreeIdForEntityIndex(int int_1)",
          "description": "Given and entity index of a tree, get the tree id for use for use with with unit orders."
        },
        "GetWorldMaxX": {
          "signature": "float GetWorldMaxX()",
          "description": "Gets the world's maximum X position."
        },
        "GetWorldMaxY": {
          "signature": "float GetWorldMaxY()",
          "description": "Gets the world's maximum Y position."
        },
        "GetWorldMinX": {
          "signature": "float GetWorldMinX()",
          "description": "Gets the world's minimum X position."
        },
        "GetWorldMinY": {
          "signature": "float GetWorldMinY()",
          "description": "Gets the world's minimum Y position."
        },
        "InitLogFile": {
          "signature": "void InitLogFile(string string_1, string string_2)",
          "description": "If the given file doesn't exist, creates it with the given contents; does nothing if it exists"
        },
        "IsClient": {
          "signature": "bool IsClient()",
          "description": "Returns true if this is lua running from the client.dll."
        },
        "IsDedicatedServer": {
          "signature": "bool IsDedicatedServer()",
          "description": "Returns true if this server is a dedicated server."
        },
        "IsMarkedForDeletion": {
          "signature": "bool IsMarkedForDeletion(handle handle_1)",
          "description": "Returns true if the entity is valid and marked for deletion."
        },
        "IsServer": {
          "signature": "bool IsServer()",
          "description": "Returns true if this is lua running from the server.dll."
        },
        "IsValidEntity": {
          "signature": "bool IsValidEntity(handle handle_1)",
          "description": "Checks to see if the given hScript is a valid entity"
        },
        "IsInToolsMode": {
          "signature": "bool IsInToolsMode()",
          "description": "Returns true if this is lua running from the dota2 workshop tools."
        },
        "LimitPathingSearchDepth": {
          "signature": "void LimitPathingSearchDepth(float float_1)",
          "description": "Set the limit on the pathfinding search space."
        },
        "LinkLuaModifier": {
          "signature": "void LinkLuaModifier(string modifier_name, string file_path, int motion_controller_type)",
          "description": "Link a lua-defined modifier with the associated class. If the modifier is located within the root vscript folder, then the second argument (file_path) may be omitted"
        },
        "ListenToGameEvent": {
          "signature": "int ListenToGameEvent(string EventName, handle functionNameToCall, handle context)",
          "description": "Register as a listener for a game event from script."
        },
        "LoadKeyValues": {
          "signature": "table LoadKeyValues(string string_1)",
          "description": "Creates a table from the specified keyvalues text file"
        },
        "LoadKeyValuesFromString": {
          "signature": "table LoadKeyValuesFromString(string string_1)",
          "description": "Creates a table from the specified keyvalues string"
        },
        "MakeStringToken": {
          "signature": "int MakeStringToken(string string_1)",
          "description": "Checks to see if the given hScript is a valid entity"
        },
        "MinimapEvent": {
          "signature": "void MinimapEvent(int int_1, handle handle_2, int int_3, int int_4, int int_5, int int_6)",
          "description": "Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)."
        },
        "Msg": {
          "signature": "void Msg(string string_1)",
          "description": "Print a message"
        },
        "PauseGame": {
          "signature": "void PauseGame(bool bool_1)",
          "description": "Pause or unpause the game."
        },
        "PlayerInstanceFromIndex": {
          "signature": "handle PlayerInstanceFromIndex(int int_1)",
          "description": "Get a script instance of a player by index."
        },
        "PrecacheEntityFromTable": {
          "signature": "void PrecacheEntityFromTable(string string_1, handle handle_2, handle handle_3)",
          "description": "Precache an entity from KeyValues in table"
        },
        "PrecacheEntityListFromTable": {
          "signature": "void PrecacheEntityListFromTable(handle handle_1, handle handle_2)",
          "description": "Precache a list of entity KeyValues table's"
        },
        "PrecacheItemByNameAsync": {
          "signature": "void PrecacheItemByNameAsync(string string_1, handle handle_2)",
          "description": "Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished."
        },
        "PrecacheItemByNameSync": {
          "signature": "void PrecacheItemByNameSync(string string_1, handle handle_2)",
          "description": "Precaches a DOTA item by its dota_npc_items.txt name"
        },
        "PrecacheModel": {
          "signature": "void PrecacheModel(string string_1, handle handle_2)",
          "description": "( modelName, context ) - Manually precache a single model"
        },
        "PrecacheResource": {
          "signature": "void PrecacheResource(string precacheMode, string resource, handle context)",
          "description": "Manually precache a single resource"
        },
        "PrecacheUnitByNameAsync": {
          "signature": "void PrecacheUnitByNameAsync(string string_1, handle handle_2, int int_3)",
          "description": "Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished."
        },
        "PrecacheUnitByNameSync": {
          "signature": "void PrecacheUnitByNameSync(string string_1, handle handle_2, int int_3)",
          "description": "Precaches a DOTA unit by its dota_npc_units.txt name"
        },
        "PrintLinkedConsoleMessage": {
          "signature": "void PrintLinkedConsoleMessage(string string_1, string string_2)",
          "description": "Print a console message with a linked console command"
        },
        "RandomFloat": {
          "signature": "float RandomFloat(float float_1, float float_2)",
          "description": "Get a random float within a range"
        },
        "RandomInt": {
          "signature": "int RandomInt(int int_1, int int_2)",
          "description": "Get a random int within a range"
        },
        "RandomVector": {
          "signature": "Vector RandomVector(float maxLength)",
          "description": "Get a random 2D vector"
        },
        "RegisterSpawnGroupFilterProxy": {
          "signature": "void RegisterSpawnGroupFilterProxy(string string_1)",
          "description": "Create a C proxy for a script-based spawn group filter"
        },
        "ReloadMOTD": {
          "signature": "void ReloadMOTD()",
          "description": "Reloads the MotD file"
        },
        "RemoveSpawnGroupFilterProxy": {
          "signature": "void RemoveSpawnGroupFilterProxy(string string_1)",
          "description": "Remove the C proxy for a script-based spawn group filter"
        },
        "ResolveNPCPositions": {
          "signature": "void ResolveNPCPositions(Vector Vector_1, float float_2)",
          "description": "Check and fix units that have been assigned a position inside collision radius of other NPCs."
        },
        "RollPercentage": {
          "signature": "bool RollPercentage(int int_1)",
          "description": "Rolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified"
        },
        "RotateOrientation": {
          "signature": "QAngle RotateOrientation(QAngle QAngle_1, QAngle QAngle_2)",
          "description": "Rotate a QAngle by another QAngle."
        },
        "RotatePosition": {
          "signature": "Vector RotatePosition(Vector Vector_1, QAngle QAngle_2, Vector Vector_3)",
          "description": "Rotate a Vector around a point."
        },
        "RotateQuaternionByAxisAngle": {
          "signature": "Quaternion RotateQuaternionByAxisAngle(Quaternion Quaternion_1, Vector Vector_2, float float_3)",
          "description": "Rotates a quaternion by the specified angle around the specified vector axis"
        },
        "RotationDelta": {
          "signature": "QAngle RotationDelta(QAngle QAngle_1, QAngle QAngle_2)",
          "description": "Find the delta between two QAngles."
        },
        "RotationDeltaAsAngularVelocity": {
          "signature": "Vector RotationDeltaAsAngularVelocity(QAngle QAngle_1, QAngle QAngle_2)",
          "description": "Converts delta QAngle to an angular velocity Vector."
        },
        "rr_AddDecisionRule": {
          "signature": "bool rr_AddDecisionRule(handle handle_1)",
          "description": "Add a rule to the decision database."
        },
        "rr_CommitAIResponse": {
          "signature": "bool rr_CommitAIResponse(handle handle_1, handle handle_2)",
          "description": "Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)"
        },
        "rr_GetResponseTargets": {
          "signature": "handle rr_GetResponseTargets()",
          "description": "Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }."
        },
        "rr_QueryBestResponse": {
          "signature": "bool rr_QueryBestResponse(handle handle_1, handle handle_2, handle handle_3)",
          "description": "Params: ( hEnt, hQuery, hResult ) // Static : tests 'query' against entity's response system and returns the best response found (or nil if none found)."
        },
        "Say": {
          "signature": "void Say(handle entity, string message, bool teamOnly)",
          "description": "Have Entity say string, and teamOnly or not"
        },
        "ScreenShake": {
          "signature": "void ScreenShake(Vector Vector_1, float float_2, float float_3, float float_4, float float_5, int int_6, bool bool_7)",
          "description": "Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake"
        },
        "SendFrostivusTimeElapsedToGC": {
          "signature": "void SendFrostivusTimeElapsedToGC()",
          "description": "No Description Set"
        },
        "SendFrostyPointsMessageToGC": {
          "signature": "void SendFrostyPointsMessageToGC(handle handle_1)",
          "description": "No Description Set"
        },
        "SendOverheadEventMessage": {
          "signature": "void SendOverheadEventMessage(handle handle_1, int int_2, handle handle_3, int int_4, handle handle_5)",
          "description": "( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*"
        },
        "SendToConsole": {
          "signature": "void SendToConsole(string string_1)",
          "description": "Send a string to the console as a client command"
        },
        "SendToServerConsole": {
          "signature": "void SendToServerConsole(string string_1)",
          "description": "Send a string to the console as a server command"
        },
        "SetOpvarFloatAll": {
          "signature": "void SetOpvarFloatAll(string string_1, string string_2, string string_3, float float_4)",
          "description": "Sets an opvar value for all players"
        },
        "SetOpvarFloatPlayer": {
          "signature": "void SetOpvarFloatPlayer(string string_1, string string_2, string string_3, float float_4, handle handle_5)",
          "description": "Sets an opvar value for a single player ( szStackName, szOperatorName, szOpvarName, flOpvarValue, hEnt )"
        },
        "SetPhysAngularVelocity": {
          "signature": "void SetPhysAngularVelocity(handle handle_1, Vector axis)",
          "description": "Set angular velocity for VPHYS or normal object, from a vector of the axis of rotation multiplied by the degrees of rotation per second."
        },
        "SetQuestName": {
          "signature": "void SetQuestName(string string_1)",
          "description": "Set the current quest name."
        },
        "SetQuestPhase": {
          "signature": "void SetQuestPhase(int int_1)",
          "description": "Set the current quest phase."
        },
        "SetRenderingEnabled": {
          "signature": "void SetRenderingEnabled(ehandle ehandle_1, bool bool_2)",
          "description": "Set rendering on/off for an ehandle"
        },
        "SetTeamCustomHealthbarColor": {
          "signature": "void SetTeamCustomHealthbarColor(int int_1, int int_2, int int_3, int int_4)",
          "description": "( teamNumber, r, g, b )"
        },
        "ShowCustomHeaderMessage": {
          "signature": "void ShowCustomHeaderMessage(string message, int player, int value, float time)",
          "description": "Displays a header message from player"
        },
        "ShowGenericPopup": {
          "signature": "void ShowGenericPopup(string title, string content, string unknown, string unknown, int containerType)",
          "description": "Shows a generic popup to all users"
        },
        "ShowGenericPopupToPlayer": {
          "signature": "void ShowGenericPopupToPlayer(handle handle_1, string string_2, string string_3, string string_4, string string_5, int int_6)",
          "description": "Show a generic popup dialog to a specific player."
        },
        "ShowMessage": {
          "signature": "void ShowMessage(string string_1)",
          "description": "Print a hud message on all clients"
        },
        "SpawnEntityFromTableSynchronous": {
          "signature": "handle SpawnEntityFromTableSynchronous(string string_1, handle handle_2)",
          "description": "Synchronously spawns a single entity from a table"
        },
        "SpawnEntityGroupFromTable": {
          "signature": "bool SpawnEntityGroupFromTable(handle groupSpawnTables, bool bAsync, handle hCallback)",
          "description": "Hierarchically spawn an entity group from a set of spawn tables."
        },
        "SpawnEntityListFromTableAsynchronous": {
          "signature": "int SpawnEntityListFromTableAsynchronous(handle handle_1, handle handle_2)",
          "description": "Asynchronously spawn an entity group from a list of spawn table's. A callback will be triggered when the spawning is complete"
        },
        "SpawnEntityListFromTableSynchronous": {
          "signature": "handle SpawnEntityListFromTableSynchronous(handle handle_1)",
          "description": "Synchronously spawn an entity group from a list of spawn table's."
        },
        "SplineQuaternions": {
          "signature": "Quaternion SplineQuaternions(Quaternion Quaternion_1, Quaternion Quaternion_2, float float_3)",
          "description": "(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]"
        },
        "SplineVectors": {
          "signature": "Vector SplineVectors(Vector Vector_1, Vector Vector_2, float float_3)",
          "description": "(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]"
        },
        "StartSoundEvent": {
          "signature": "void StartSoundEvent(string string_1, handle handle_2)",
          "description": "Start a sound event"
        },
        "StartSoundEventFromPosition": {
          "signature": "void StartSoundEventFromPosition(string string_1, Vector Vector_2)",
          "description": "Start a sound event from position"
        },
        "StartSoundEventFromPositionReliable": {
          "signature": "void StartSoundEventFromPositionReliable(string string_1, Vector Vector_2)",
          "description": "Start a sound event from position with reliable delivery"
        },
        "StartSoundEventFromPositionUnreliable": {
          "signature": "void StartSoundEventFromPositionUnreliable(string string_1, Vector Vector_2)",
          "description": "Start a sound event from position with optional delivery"
        },
        "StartSoundEventReliable": {
          "signature": "void StartSoundEventReliable(string string_1, handle handle_2)",
          "description": "Start a sound event with reliable delivery"
        },
        "StartSoundEventUnreliable": {
          "signature": "void StartSoundEventUnreliable(string string_1, handle handle_2)",
          "description": "Start a sound event with optional delivery"
        },
        "StopEffect": {
          "signature": "void StopEffect(handle handle_1, string string_2)",
          "description": "(hEntity, szEffectName)"
        },
        "StopListeningToAllGameEvents": {
          "signature": "void StopListeningToAllGameEvents(handle handle_1)",
          "description": "Stop listening to all game events within a specific context."
        },
        "StopListeningToGameEvent": {
          "signature": "bool StopListeningToGameEvent(int int_1)",
          "description": "Stop listening to a particular game event."
        },
        "StopSoundEvent": {
          "signature": "void StopSoundEvent(string string_1, handle handle_2)",
          "description": "Stops a sound event"
        },
        "StopSoundOn": {
          "signature": "void StopSoundOn(string soundName, handle playingEntity)",
          "description": "Stop named sound on Entity"
        },
        "StringToFile": {
          "signature": "bool StringToFile(string a, string b)",
          "description": "* Directory traversal doesn't seem to work. The characters '.', '/' and '\\\\' are ignored."
        },
        "Time": {
          "signature": "float Time()",
          "description": "Get the current server time"
        },
        "TraceCollideable": {
          "signature": "bool TraceCollideable(table parameters)",
          "description": "Does a raytrace against a single entity. Input and output parameters are stored in the specified table."
        },
        "TraceHull": {
          "signature": "bool TraceHull(table parameters)",
          "description": "Traces a bounding box along a line. Input and output parameters are stored in the specified table."
        },
        "TraceLine": {
          "signature": "bool TraceLine(table parameters)",
          "description": "Does a raytrace along a line. Input and output parameters are stored in the specified table."
        },
        "UnitFilter": {
          "signature": "int UnitFilter(handle handle_1, int int_2, int int_3, int int_4, int int_5)",
          "description": "Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam"
        },
        "UnloadSpawnGroup": {
          "signature": "void UnloadSpawnGroup(string string_1)",
          "description": "Unload a spawn group by name"
        },
        "UnloadSpawnGroupByHandle": {
          "signature": "void UnloadSpawnGroupByHandle(int int_1)",
          "description": "Unload a spawn group by handle"
        },
        "UpdateEventPoints": {
          "signature": "void UpdateEventPoints(handle handle_1)",
          "description": "No Description Set"
        },
        "UTIL_MessageText": {
          "signature": "void UTIL_MessageText(int playerId, string message, int r, int g, int b, int a)",
          "description": "Displays a message for a specific player"
        },
        "UTIL_MessageText_WithContext": {
          "signature": "void UTIL_MessageText_WithContext(int playerId, string message, int r, int g, int b, int a, table context)",
          "description": "Sends a message to a specific player in the message box with a context table"
        },
        "UTIL_MessageTextAll": {
          "signature": "void UTIL_MessageTextAll(string message, int r, int g, int b, int a)",
          "description": "Sends a message to everyone in the message box"
        },
        "UTIL_MessageTextAll_WithContext": {
          "signature": "void UTIL_MessageTextAll_WithContext(string message, int r, int g, int b, int a, table context)",
          "description": "Sends a message to everyone in the message box with a context table"
        },
        "UTIL_Remove": {
          "signature": "void UTIL_Remove(handle handle_1)",
          "description": "Removes the specified entity"
        },
        "UTIL_RemoveImmediate": {
          "signature": "void UTIL_RemoveImmediate(handle handle_1)",
          "description": "Do Not use this function.  Use UTIL_Remove() instead.  This will crash your game."
        },
        "UTIL_ResetMessageText": {
          "signature": "void UTIL_ResetMessageText(int playerId)",
          "description": "Resets the message text for the player"
        },
        "UTIL_ResetMessageTextAll": {
          "signature": "void UTIL_ResetMessageTextAll()",
          "description": "Resets the message text for all players"
        },
        "VectorToAngles": {
          "signature": "QAngle VectorToAngles(Vector Vector_1)",
          "description": "Get Qangles (with no roll) for a Vector."
        },
        "Warning": {
          "signature": "void Warning(string string_1)",
          "description": "Print a warning"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CBaseEntity",
      "description": "The base class for stuff",
      "funcs": {
        "AddEffects": {
          "signature": "void AddEffects(int nFlags)",
          "description": "AddEffects( int ): Adds the render effect flag."
        },
        "ApplyAbsVelocityImpulse": {
          "signature": "void ApplyAbsVelocityImpulse(Vector vecImpulse)",
          "description": "Apply a Velocity Impulse"
        },
        "ApplyLocalAngularVelocityImpulse": {
          "signature": "void ApplyLocalAngularVelocityImpulse(Vector angImpulse)",
          "description": "Apply an Ang Velocity Impulse"
        },
        "Attribute_GetFloatValue": {
          "signature": "float Attribute_GetFloatValue(string pName, float flDefault)",
          "description": "Get float value for an entity attribute."
        },
        "Attribute_GetIntValue": {
          "signature": "float Attribute_GetIntValue(string pName, int nDefault)",
          "description": "Get int value for an entity attribute."
        },
        "Attribute_SetFloatValue": {
          "signature": "void Attribute_SetFloatValue(string pName, float flValue)",
          "description": "Set float value for an entity attribute."
        },
        "Attribute_SetIntValue": {
          "signature": "void Attribute_SetIntValue(string pName, int nValue)",
          "description": "Set int value for an entity attribute."
        },
        "DeleteAttribute": {
          "signature": "void DeleteAttribute(string pName)",
          "description": "Delete an entity attribute."
        },
        "EmitSound": {
          "signature": "void EmitSound(string soundName)",
          "description": "Plays a sound centered on the passed entity."
        },
        "EmitSoundParams": {
          "signature": "void EmitSoundParams(string soundName, int pitch, float volume, float soundTime)",
          "description": "Plays/modifies a sound from this entity. changes sound if Pitch and/or Volume or SoundTime is > 0."
        },
        "EyeAngles": {
          "signature": "QAngle EyeAngles()",
          "description": "Get the qangles that this entity is looking at."
        },
        "EyePosition": {
          "signature": "Vector EyePosition()",
          "description": "Get vector to eye position - absolute coords"
        },
        "FirstMoveChild": {
          "signature": "handle FirstMoveChild()",
          "description": "No Description Set"
        },
        "GatherCriteria": {
          "signature": "void GatherCriteria(handle hResult)",
          "description": "Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks."
        },
        "GetAbsOrigin": {
          "signature": "Vector GetAbsOrigin()",
          "description": "Get the current location of the entity as a Vector."
        },
        "GetAngles": {
          "signature": "QAngle GetAngles()",
          "description": "No Description Set"
        },
        "GetAnglesAsVector": {
          "signature": "Vector GetAnglesAsVector()",
          "description": "Get entity pitch, yaw, roll as a vector"
        },
        "GetAngularVelocity": {
          "signature": "Vector GetAngularVelocity()",
          "description": "Get the local angular velocity - returns a vector of pitch,yaw,roll"
        },
        "GetBaseVelocity": {
          "signature": "Vector GetBaseVelocity()",
          "description": "Get Base velocity"
        },
        "GetBoundingMaxs": {
          "signature": "Vector GetBoundingMaxs()",
          "description": "Get a vector containing max bounds, centered on object"
        },
        "GetBoundingMins": {
          "signature": "Vector GetBoundingMins()",
          "description": "Get a vector containing min bounds, centered on object"
        },
        "GetBounds": {
          "signature": "table GetBounds()",
          "description": "Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object"
        },
        "GetCenter": {
          "signature": "Vector GetCenter()",
          "description": "Get vector to center of object - absolute coords"
        },
        "GetChildren": {
          "signature": "handle GetChildren()",
          "description": "Get the entities parented to this entity."
        },
        "GetContext": {
          "signature": "table GetContext(string name)",
          "description": "GetContext( name ): looks up a context and returns it if available. May return string, float, or nil (if the context isn't found)"
        },
        "GetForwardVector": {
          "signature": "Vector GetForwardVector()",
          "description": "Get the forward vector of the entity"
        },
        "GetHealth": {
          "signature": "int GetHealth()",
          "description": "Get the entity's current health."
        },
        "GetLocalAngularVelocity": {
          "signature": "QAngle GetLocalAngularVelocity()",
          "description": "Maybe local angvel"
        },
        "GetLocalVelocity": {
          "signature": "Vector GetLocalVelocity()",
          "description": "Get Entity relative velocity"
        },
        "GetMaxHealth": {
          "signature": "int GetMaxHealth()",
          "description": "Get the entity's maximum health."
        },
        "GetModelName": {
          "signature": "string GetModelName()",
          "description": "Returns the name of the model"
        },
        "GetMoveParent": {
          "signature": "handle GetMoveParent()",
          "description": "If in hierarchy, retrieves the entity's parent"
        },
        "GetOrigin": {
          "signature": "Vector GetOrigin()",
          "description": "Gets the location of the entity (x/y/z)."
        },
        "GetOwner": {
          "signature": "handle GetOwner()",
          "description": "Gets this entity's owner"
        },
        "GetOwnerEntity": {
          "signature": "handle GetOwnerEntity()",
          "description": "Get the owner entity, if there is one"
        },
        "GetRightVector": {
          "signature": "Vector GetRightVector()",
          "description": "Get the right vector of the entity"
        },
        "GetRootMoveParent": {
          "signature": "handle GetRootMoveParent()",
          "description": "If in hierarchy, walks up the hierarchy to find the root parent"
        },
        "GetSoundDuration": {
          "signature": "float GetSoundDuration(string soundName, string actormodelname)",
          "description": "Returns float duration of the sound. Takes soundname and optional actormodelname."
        },
        "GetTeam": {
          "signature": "int GetTeam()",
          "description": "Get the team number of this entity."
        },
        "GetTeamNumber": {
          "signature": "int GetTeamNumber()",
          "description": "Get the team number of this entity."
        },
        "GetUpVector": {
          "signature": "Vector GetUpVector()",
          "description": "Get the up vector of the entity"
        },
        "GetVelocity": {
          "signature": "Vector GetVelocity()",
          "description": "No Description Set"
        },
        "HasAttribute": {
          "signature": "bool HasAttribute(string pName)",
          "description": "See if an entity has a particular attribute."
        },
        "IsAlive": {
          "signature": "bool IsAlive()",
          "description": "Is the entity alive?"
        },
        "IsPlayer": {
          "signature": "bool IsPlayer()",
          "description": "Is this a player entity?"
        },
        "IsNull": {
          "signature": "bool IsNull()",
          "description": "Detect if the entity has been deleted from C++."
        },
        "Kill": {
          "signature": "void Kill()",
          "description": "Immediately kills the chosen entity."
        },
        "NextMovePeer": {
          "signature": "handle NextMovePeer()",
          "description": "No Description Set"
        },
        "OverrideFriction": {
          "signature": "void OverrideFriction(float duration, float friction)",
          "description": "Takes duration, value for a temporary override"
        },
        "PrecacheScriptSound": {
          "signature": "void PrecacheScriptSound(string soundname)",
          "description": "Precache a sound for later playing."
        },
        "RemoveEffects": {
          "signature": "void RemoveEffects(int nFlags)",
          "description": "RemoveEffects( int ): Removes the render effect flag."
        },
        "SetAbsOrigin": {
          "signature": "void SetAbsOrigin(Vector origin)",
          "description": "Sets the entity's location on the passed vector."
        },
        "SetAngles": {
          "signature": "void SetAngles(float pitch, float yaw, float roll)",
          "description": "Set entity pitch, yaw, roll"
        },
        "SetAngularVelocity": {
          "signature": "void SetAngularVelocity(float pitch, float yaw, float roll)",
          "description": "Set the local angular velocity - takes float pitch,yaw,roll velocities"
        },
        "SetConstraint": {
          "signature": "void SetConstraint(Vector vPos)",
          "description": "Set the position of the constraint."
        },
        "SetContext": {
          "signature": "void SetContext(string pName, string pValue, float duration)",
          "description": "SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')."
        },
        "SetContextNum": {
          "signature": "void SetContextNum(string pName, float fValue, float duration)",
          "description": "SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')."
        },
        "SetContextThink": {
          "signature": "void SetContextThink(string pszContextName, handle hThinkFunc, float flInterval)",
          "description": "Set a think function on this entity."
        },
        "SetForwardVector": {
          "signature": "void SetForwardVector(Vector forwardVec)",
          "description": "Set the orientation of the entity to have this forward forwardVec"
        },
        "SetFriction": {
          "signature": "void SetFriction(float flFriction)",
          "description": "Set PLAYER friction, ignored for objects"
        },
        "SetGravity": {
          "signature": "void SetGravity(float flGravity)",
          "description": "Set PLAYER gravity, ignored for objects"
        },
        "SetHealth": {
          "signature": "void SetHealth(int hp)",
          "description": "Set the current health of the entity. Setting health above maximum health will set the current HP to the maximum."
        },
        "SetMaxHealth": {
          "signature": "void SetMaxHealth(int maxHP)",
          "description": "Set the maximum health of the entity."
        },
        "SetModel": {
          "signature": "void SetModel(string modelName)",
          "description": "Set the entity's model as the passed model name."
        },
        "SetOrigin": {
          "signature": "void SetOrigin(Vector origin)",
          "description": "Set the location of the entity."
        },
        "SetOwner": {
          "signature": "void SetOwner(handle owningEntity)",
          "description": "Sets this entity's owner"
        },
        "SetParent": {
          "signature": "void SetParent(handle hParent, string pAttachmentname)",
          "description": "Set the parent for this entity."
        },
        "SetRenderColor": {
          "signature": "void SetRenderColor(int a, int b, int c)",
          "description": "SetRenderColor( r, g, b ): Sets the render color of the entity."
        },
        "SetSize": {
          "signature": "void SetSize(Vector a, Vector b)",
          "description": "No Description Set"
        },
        "SetTeam": {
          "signature": "void SetTeam(int team)",
          "description": "No Description Set"
        },
        "SetVelocity": {
          "signature": "void SetVelocity(Vector vecVelocity)",
          "description": "No Description Set"
        },
        "StopSound": {
          "signature": "void StopSound(string soundName)",
          "description": "Stops a named sound playing from this entity."
        },
        "Trigger": {
          "signature": "void Trigger()",
          "description": "Fires off this entity's OnTrigger responses"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CEntities",
      "description": "",
      "funcs": {
        "CreateByClassname": {
          "signature": "handle CreateByClassname(string className)",
          "description": "Creates an entity by classname"
        },
        "FindAllByClassname": {
          "signature": "table FindAllByClassname(string string_1)",
          "description": "Finds all entities by class name. Returns an array containing all the found entities."
        },
        "FindAllByClassnameWithin": {
          "signature": "table FindAllByClassnameWithin(string string_1, Vector Vector_2, float float_3)",
          "description": "Find entities by class name within a radius."
        },
        "FindAllByModel": {
          "signature": "table FindAllByModel(string modelName)",
          "description": "Find entities by model name."
        },
        "FindAllByName": {
          "signature": "table FindAllByName(string name)",
          "description": "Find all entities by name. Returns an array containing all the found entities in it."
        },
        "FindAllByNameWithin": {
          "signature": "table FindAllByNameWithin(string name, Vector origin, float maxRadius)",
          "description": "Find entities by name within a radius."
        },
        "FindAllByTarget": {
          "signature": "table FindAllByTarget(string targetName)",
          "description": "Find entities by targetname."
        },
        "FindAllInSphere": {
          "signature": "table FindAllInSphere(Vector origin, float maxRadius)",
          "description": "Find entities within a radius."
        },
        "FindByClassname": {
          "signature": "handle FindByClassname(handle startFrom, string className)",
          "description": "Find entities by class name. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindByClassnameNearest": {
          "signature": "handle FindByClassnameNearest(string className, Vector origin, float maxRadius)",
          "description": "Find entities by class name nearest to a point."
        },
        "FindByClassnameWithin": {
          "signature": "handle FindByClassnameWithin(handle startFrom, string className, Vector origin, float maxRadius)",
          "description": "Find entities by class name within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindByModel": {
          "signature": "handle FindByModel(handle startFrom, string modelName)",
          "description": "Find entities by model name. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindByModelWithin": {
          "signature": "handle FindByModelWithin(handle startFrom, string modelName, Vector origin, float maxRadius)",
          "description": "Find entities by model name within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindByName": {
          "signature": "handle FindByName(handle lastEnt, string searchString)",
          "description": "Find entities by name. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindByNameNearest": {
          "signature": "handle FindByNameNearest(string name, Vector origin, float maxRadius)",
          "description": "Find entities by name nearest to a point."
        },
        "FindByNameWithin": {
          "signature": "handle FindByNameWithin(handle startFrom, string name, Vector origin, float maxRadius)",
          "description": "Find entities by name within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindByTarget": {
          "signature": "handle FindByTarget(handle startFrom, string targetName)",
          "description": "Find entities by targetname. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "FindInSphere": {
          "signature": "handle FindInSphere(handle startFrom, Vector origin, float maxRadius)",
          "description": "Find entities within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search"
        },
        "First": {
          "signature": "handle First()",
          "description": "Begin an iteration over the list of entities"
        },
        "Next": {
          "signature": "handle Next(handle startFrom)",
          "description": "Continue an iteration over the list of entities, providing reference to a previously found entity"
        }
      },
      "extends": "",
      "accessor": "Entities"
    },
    {
      "title": "CEntityInstance",
      "description": "",
      "funcs": {
        "ConnectOutput": {
          "signature": "void ConnectOutput(string string_1, string string_2)",
          "description": "Adds an I/O connection that will call the named function on this entity when the specified output fires."
        },
        "Destroy": {
          "signature": "void Destroy()",
          "description": "Delete entity from C++."
        },
        "DisconnectOutput": {
          "signature": "void DisconnectOutput(string string_1, string string_2)",
          "description": "Removes a connected script function from an I/O event on this entity."
        },
        "DisconnectRedirectedOutput": {
          "signature": "void DisconnectRedirectedOutput(string string_1, string string_2, handle handle_3)",
          "description": "Removes a connected script function from an I/O event on the passed entity."
        },
        "entindex": {
          "signature": "int entindex()",
          "description": "Get the entindex of this entity instance."
        },
        "FireOutput": {
          "signature": "void FireOutput(string outputName, handle activator, handle caller, table args, float delay)",
          "description": "Fire an entity output"
        },
        "GetClassname": {
          "signature": "string GetClassname()",
          "description": "Get the class name of the entity."
        },
        "GetDebugName": {
          "signature": "string GetDebugName()",
          "description": "Get the entity name w/help if not defined (i.e. classname/etc)"
        },
        "GetEntityHandle": {
          "signature": "ehandle GetEntityHandle()",
          "description": "Get the entity as an EHANDLE"
        },
        "GetEntityIndex": {
          "signature": "int GetEntityIndex()",
          "description": "Get the index of this entity."
        },
        "GetIntAttr": {
          "signature": "int GetIntAttr(string string_1)",
          "description": "Get Integer Attribute"
        },
        "GetName": {
          "signature": "string GetName()",
          "description": "Get the name of this entity."
        },
        "GetOrCreatePrivateScriptScope": {
          "signature": "handle GetOrCreatePrivateScriptScope()",
          "description": "Retrieve, creating if necessary, the private per-instance script-side data associated with an entity"
        },
        "GetOrCreatePublicScriptScope": {
          "signature": "handle GetOrCreatePublicScriptScope()",
          "description": "Retrieve, creating if necessary, the public script-side data associated with an entity"
        },
        "GetPrivateScriptScope": {
          "signature": "handle GetPrivateScriptScope()",
          "description": "Retrieve the private per-instance script-side data associated with an entity"
        },
        "GetPublicScriptScope": {
          "signature": "handle GetPublicScriptScope()",
          "description": "Retrieve the public script-side data associated with an entity"
        },
        "RedirectOutput": {
          "signature": "void RedirectOutput(string string_1, string string_2, handle handle_3)",
          "description": "Adds an I/O connection that will call the named function on the passed entity when the specified output fires."
        },
        "RemoveSelf": {
          "signature": "void RemoveSelf()",
          "description": "Delete this entity"
        },
        "SetIntAttr": {
          "signature": "void SetIntAttr(string string_1, int int_2)",
          "description": "Set Integer Attribute"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDOTABaseAbility",
      "description": "",
      "funcs": {
        "CanAbilityBeUpgraded": {
          "signature": "<unknown> CanAbilityBeUpgraded()",
          "description": ""
        },
        "CastAbility": {
          "signature": "void CastAbility()",
          "description": "Casts the ability."
        },
        "ContinueCasting": {
          "signature": "bool ContinueCasting()",
          "description": "No Description Set"
        },
        "CreateVisibilityNode": {
          "signature": "void CreateVisibilityNode(Vector vLocation, float fRadius, float fDuration)",
          "description": "Applies vision on a specific location that reveals a certain radius for a duration."
        },
        "DecrementModifierRefCount": {
          "signature": "void DecrementModifierRefCount()",
          "description": "No Description Set"
        },
        "EndChannel": {
          "signature": "void EndChannel(bool bInterrupted)",
          "description": "Param: bool bInterrupted"
        },
        "EndCooldown": {
          "signature": "void EndCooldown()",
          "description": "Clear the cooldown remaining on this ability."
        },
        "GetAbilityDamage": {
          "signature": "int GetAbilityDamage()",
          "description": "Get the damage defined in the \"AbilityDamage\" KV."
        },
        "GetAbilityDamageType": {
          "signature": "int GetAbilityDamageType()",
          "description": "Get the damage type defined in the \"AbilityUnitDamageType\" KV."
        },
        "GetAbilityIndex": {
          "signature": "int GetAbilityIndex()",
          "description": "Get the index of this ability."
        },
        "GetAbilityName": {
          "signature": "string GetAbilityName()",
          "description": "Get the name of the ability."
        },
        "GetAbilityKeyValues": {
          "signature": "table GetAbilityKeyValues()",
          "description": "Returns a table of this ability KVs."
        },
        "GetAbilityTargetFlags": {
          "signature": "int GetAbilityTargetFlags()",
          "description": "Get the ability's target flag(s) defined in the \"AbilityUnitTargetFlags\" KV."
        },
        "GetAbilityTargetTeam": {
          "signature": "int GetAbilityTargetTeam()",
          "description": "Get the ability's target team(s) defined in the \"AbilityUnitTargetTeam\" KV."
        },
        "GetAbilityTargetType": {
          "signature": "int GetAbilityTargetType()",
          "description": "Get the ability's target type(s) defined in the \"AbilityUnitTargetType\" KV."
        },
        "GetAbilityType": {
          "signature": "int GetAbilityType()",
          "description": "Get the ability type of this ability, set through \"AbilityType\" in KV at the npc_ability_custom.txt file."
        },
        "GetAnimationIgnoresModelScale": {
          "signature": "bool GetAnimationIgnoresModelScale()",
          "description": "No Description Set"
        },
        "GetAssociatedPrimaryAbilities": {
          "signature": "string GetAssociatedPrimaryAbilities()",
          "description": "Set which ability should be stolen with this ability, and set as the first ability in the order of the stolen abilities (Rubick)."
        },
        "GetAssociatedSecondaryAbilities": {
          "signature": "string GetAssociatedSecondaryAbilities()",
          "description": "Set which ability should be stolen with this ability, and set as the second in the order of the stolen abilities (Rubick)."
        },
        "GetAutoCastState": {
          "signature": "bool GetAutoCastState()",
          "description": "Returns true if the ability is set to auto cast, returns false otherwise."
        },
        "GetBackswingTime": {
          "signature": "float GetBackswingTime()",
          "description": "Returns the backswing time of the ability."
        },
        "GetBehavior": {
          "signature": "int GetBehavior()",
          "description": "Get the ability behavior(s) defined in the \"AbilityBehavior\" KV."
        },
        "GetCaster": {
          "signature": "handle GetCaster()",
          "description": "Get the ability's caster."
        },
        "GetCastPoint": {
          "signature": "float GetCastPoint()",
          "description": "Get the ability's cast point."
        },
        "GetCastRange": {
          "signature": "int GetCastRange()",
          "description": "Get the ability's cast range."
        },
        "GetChannelledManaCostPerSecond": {
          "signature": "int GetChannelledManaCostPerSecond(int iLevel)",
          "description": "Get the ability's channeled mana cost per second, defined in the \"AbilityChannelledManaCostPerSecond\" KV."
        },
        "GetChannelStartTime": {
          "signature": "float GetChannelStartTime()",
          "description": "Get the game time where the channeling of this ability started."
        },
        "GetChannelTime": {
          "signature": "float GetChannelTime()",
          "description": "Get how long (in seconds) this ability can be channeled."
        },
        "GetCloneSource": {
          "signature": "handle GetCloneSource()",
          "description": "No Description Set"
        },
        "GetConceptRecipientType": {
          "signature": "int GetConceptRecipientType()",
          "description": "No Description Set"
        },
        "GetCooldown": {
          "signature": "float GetCooldown(int iLevel)",
          "description": "Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left."
        },
        "GetCooldownTime": {
          "signature": "float GetCooldownTime()",
          "description": "No Description Set"
        },
        "GetCooldownTimeRemaining": {
          "signature": "float GetCooldownTimeRemaining()",
          "description": "Get the remaining time until this ability is ready to be cast again."
        },
        "GetCursorPosition": {
          "signature": "Vector GetCursorPosition()",
          "description": "Get the vector of the current position of the mouse cursor."
        },
        "GetCursorTarget": {
          "signature": "handle GetCursorTarget()",
          "description": "Get the target that the cursor is currently pointing on."
        },
        "GetCursorTargetingNothing": {
          "signature": "bool GetCursorTargetingNothing()",
          "description": "Is the cursor currently targeting anything?"
        },
        "GetDuration": {
          "signature": "float GetDuration()",
          "description": "No Description Set"
        },
        "GetGoldCost": {
          "signature": "int GetGoldCost(int iLevel)",
          "description": "Get the cost in gold for abilities defined to cost gold, defined through \"AbilityGoldCost\" at the ability's KV."
        },
        "GetGoldCostForUpgrade": {
          "signature": "int GetGoldCostForUpgrade(int iLevel)",
          "description": "Get the cost in gold for upgrading this ability, defined through \"AbilityUpgradeGoldCost\" at the ability's KV."
        },
        "GetHeroLevelRequiredToUpgrade": {
          "signature": "int GetHeroLevelRequiredToUpgrade()",
          "description": "Get the level the hero needs to be in order to upgrade this ability."
        },
        "GetIntrinsicModifierName": {
          "signature": "string GetIntrinsicModifierName()",
          "description": "Get the name of the modifier attached to this ability, which passively attached to its caster when the ability is first leveled."
        },
        "GetLevel": {
          "signature": "int GetLevel()",
          "description": "Get the current level of the ability."
        },
        "GetLevelSpecialValueFor": {
          "signature": "table GetLevelSpecialValueFor(string szName, int nLevel)",
          "description": "Get the value of an \"AbilitySpecial\" block for a certain level."
        },
        "GetManaCost": {
          "signature": "int GetManaCost(int iLevel)",
          "description": "Get the ability mana cost defined in the \"AbilityManaCost\" KV."
        },
        "GetMaxLevel": {
          "signature": "int GetMaxLevel()",
          "description": "Get the maximum level of the ability defined in the \"MaxLevel\" KV."
        },
        "GetModifierValue": {
          "signature": "float GetModifierValue()",
          "description": "No Description Set"
        },
        "GetModifierValueBonus": {
          "signature": "float GetModifierValueBonus()",
          "description": "No Description Set"
        },
        "GetPlaybackRateOverride": {
          "signature": "float GetPlaybackRateOverride()",
          "description": "No Description Set"
        },
        "GetSharedCooldownName": {
          "signature": "string GetSharedCooldownName()",
          "description": "Get the name of the shared cooldown group defined in the ability's \"AbilitySharedCooldown\" KV. This causes all abilities in the same cooldown name to go into cooldown when one of them is cast."
        },
        "GetSpecialValueFor": {
          "signature": "table GetSpecialValueFor(string szName)",
          "description": "Get the value of an \"AbilitySpecial\" block for the current ability level."
        },
        "GetStolenActivityModifier": {
          "signature": "string GetStolenActivityModifier()",
          "description": "No Description Set"
        },
        "GetToggleState": {
          "signature": "bool GetToggleState()",
          "description": "Returns true if the ability is currently toggled. Returns false otherwise."
        },
        "HeroXPChange": {
          "signature": "bool HeroXPChange(float flXP)",
          "description": "No Description Set"
        },
        "IncrementModifierRefCount": {
          "signature": "void IncrementModifierRefCount()",
          "description": "No Description Set"
        },
        "IsActivated": {
          "signature": "bool IsActivated()",
          "description": "Return whether or not this ability is activated, e.g. can be used. Disabled abilities are colored black."
        },
        "IsAttributeBonus": {
          "signature": "bool IsAttributeBonus()",
          "description": "Return whether or not the ability is defined as an attribute bonus through \"AbilityType\" being set to \"DOTA_ABILITY_TYPE_ATTRIBUTES\"."
        },
        "IsChanneling": {
          "signature": "bool IsChanneling()",
          "description": "Returns whether the ability is currently channeling."
        },
        "IsCooldownReady": {
          "signature": "bool IsCooldownReady()",
          "description": "Returns true if the ability currently has no cooldown and is ready to be used. Returns false otherwise."
        },
        "IsCosmetic": {
          "signature": "bool IsCosmetic(handle hEntity)",
          "description": "No Description Set"
        },
        "IsFullyCastable": {
          "signature": "bool IsFullyCastable()",
          "description": "Returns whether the ability can be cast."
        },
        "IsHidden": {
          "signature": "bool IsHidden()",
          "description": "Returns true if the ability behavior is set to hidden. Returns false otherwise."
        },
        "IsHiddenWhenStolen": {
          "signature": "bool IsHiddenWhenStolen()",
          "description": "Returns true if the ability is set to be hidden when stolen (by Rubick). Returns false otherwise."
        },
        "IsInAbilityPhase": {
          "signature": "bool IsInAbilityPhase()",
          "description": "Returns whether the ability is currently casting."
        },
        "IsItem": {
          "signature": "bool IsItem()",
          "description": "Returns whether this ability resides within an item."
        },
        "IsOwnersGoldEnough": {
          "signature": "bool IsOwnersGoldEnough(int nIssuerPlayerID)",
          "description": "Returns whether the owner of the ability has enough gold to cast it (used for abilities that cost gold instead of mana)."
        },
        "IsOwnersGoldEnoughForUpgrade": {
          "signature": "bool IsOwnersGoldEnoughForUpgrade()",
          "description": "Returns whether the owner of the ability has enough gold to upgrade it (used for abilities that cost gold instead of ability points)."
        },
        "IsOwnersManaEnough": {
          "signature": "bool IsOwnersManaEnough()",
          "description": "Returns true if the caster has enough mana to cast the ability. Returns false otherwise."
        },
        "IsPassive": {
          "signature": "bool IsPassive()",
          "description": "Returns true if the ability is a passive ability."
        },
        "IsSharedWithTeammates": {
          "signature": "bool IsSharedWithTeammates()",
          "description": "No Description Set"
        },
        "IsStealable": {
          "signature": "bool IsStealable()",
          "description": "Returns whether this ability can be stolen (by Rubick)."
        },
        "IsStolen": {
          "signature": "bool IsStolen()",
          "description": "Returns whether the ability is a stolen one."
        },
        "IsToggle": {
          "signature": "bool IsToggle()",
          "description": "Returns whether the ability is toggle-able."
        },
        "IsTrained": {
          "signature": "bool IsTrained()",
          "description": "Returns whether the ability has at least one level in it."
        },
        "MarkAbilityButtonDirty": {
          "signature": "void MarkAbilityButtonDirty()",
          "description": "Mark the ability button for this ability as needing a refresh."
        },
        "NumModifiersUsingAbility": {
          "signature": "int NumModifiersUsingAbility()",
          "description": "No Description Set"
        },
        "OnAbilityPhaseInterrupted": {
          "signature": "void OnAbilityPhaseInterrupted()",
          "description": "Launches when the caster tried to initiate the ability, but was interrupted/cancelled."
        },
        "OnAbilityPhaseStart": {
          "signature": "bool OnAbilityPhaseStart()",
          "description": "Launches when the ability is being cast (before cast point has been reached, which means it was not yet activated)"
        },
        "OnAbilityPinged": {
          "signature": "void OnAbilityPinged(int nPlayerID)",
          "description": "Fires when the ability is being pinged (through alt clicking it)."
        },
        "OnChannelFinish": {
          "signature": "void OnChannelFinish(bool bInterrupted)",
          "description": "Launches when the channeled ability finished channeling successfully."
        },
        "OnChannelThink": {
          "signature": "void OnChannelThink(float flInterval)",
          "description": "Launches on every interval of this ability's channel."
        },
        "OnHeroCalculateStatBonus": {
          "signature": "void OnHeroCalculateStatBonus()",
          "description": "Launches when calculating the hero's stats bonuses when leveling up."
        },
        "OnHeroLevelUp": {
          "signature": "void OnHeroLevelUp()",
          "description": "Launches when the hero levels up."
        },
        "OnInventoryContentsChanged": {
          "signature": "void OnInventoryContentsChanged()",
          "description": "Launches when the inventory of the ability's owner changes."
        },
        "OnOwnerDied": {
          "signature": "void OnOwnerDied()",
          "description": "Launches when the owner of this ability dies."
        },
        "OnOwnerSpawned": {
          "signature": "void OnOwnerSpawned()",
          "description": "Launches when the owner of this ability spawns."
        },
        "OnSpellStart": {
          "signature": "void OnSpellStart()",
          "description": "Launches when the ability finished casting, mana was spent, and the ability goes on cooldown."
        },
        "OnToggle": {
          "signature": "void OnToggle()",
          "description": "Launches when toggling the ability on and off."
        },
        "OnUpgrade": {
          "signature": "void OnUpgrade()",
          "description": "Launches when upgrading the ability."
        },
        "PayGoldCost": {
          "signature": "void PayGoldCost()",
          "description": "Pay the cost for casting this ability in gold."
        },
        "PayGoldCostForUpgrade": {
          "signature": "void PayGoldCostForUpgrade()",
          "description": "Pay the cost for upgrading this ability in gold."
        },
        "PayManaCost": {
          "signature": "void PayManaCost()",
          "description": "Spends the caster's mana equivalent to the mana cost required to cast this ability."
        },
        "PlaysDefaultAnimWhenStolen": {
          "signature": "bool PlaysDefaultAnimWhenStolen()",
          "description": "No Description Set"
        },
        "ProcsMagicStick": {
          "signature": "bool ProcsMagicStick()",
          "description": "Returns whether this ability grants a charge on Magic Stick/Magic Wand."
        },
        "RefCountsModifiers": {
          "signature": "bool RefCountsModifiers()",
          "description": "No Description Set"
        },
        "RefundManaCost": {
          "signature": "void RefundManaCost()",
          "description": "Return the caster's mana spent for casting this ability."
        },
        "ResetToggleOnRespawn": {
          "signature": "bool ResetToggleOnRespawn()",
          "description": "Reset the toggle to off when respawning."
        },
        "SetAbilityIndex": {
          "signature": "void SetAbilityIndex(int iIndex)",
          "description": "Set the index of this ability."
        },
        "SetActivated": {
          "signature": "void SetActivated(bool bActivated)",
          "description": "Set this ability as activated (true) or disabled (false). Disabled abilities are colored dark and cannot be used."
        },
        "SetChanneling": {
          "signature": "void SetChanneling(bool bChanneling)",
          "description": "No Description Set"
        },
        "SetHidden": {
          "signature": "void SetHidden(bool bHidden)",
          "description": "Set this ability as hidden (true) or visible (false)."
        },
        "SetInAbilityPhase": {
          "signature": "void SetInAbilityPhase(bool bInAbilityPhase)",
          "description": "No Description Set"
        },
        "SetLevel": {
          "signature": "void SetLevel(int iLevel)",
          "description": "Sets the level of this ability."
        },
        "SetOverrideCastPoint": {
          "signature": "void SetOverrideCastPoint(float flCastPoint)",
          "description": "No Description Set"
        },
        "SetRefCountsModifiers": {
          "signature": "void SetRefCountsModifiers(bool bRefCounts)",
          "description": "No Description Set"
        },
        "SetStolen": {
          "signature": "void SetStolen(bool bStolen)",
          "description": "Set whether or not this ability is considered stolen (by Rubick's Spellsteal)."
        },
        "ShouldUseResources": {
          "signature": "bool ShouldUseResources()",
          "description": "No Description Set"
        },
        "SpeakAbilityConcept": {
          "signature": "void SpeakAbilityConcept(int iConcept)",
          "description": "No Description Set"
        },
        "SpeakTrigger": {
          "signature": "<unknown> SpeakTrigger()",
          "description": "No Description Set"
        },
        "StartCooldown": {
          "signature": "void StartCooldown(float flCooldown)",
          "description": "Start a cooldown, starting to count from the passed float parameter."
        },
        "ToggleAbility": {
          "signature": "void ToggleAbility()",
          "description": "Toggle this ability on or off."
        },
        "ToggleAutoCast": {
          "signature": "void ToggleAutoCast()",
          "description": "Toggle this ability's auto cast on or off."
        },
        "UpgradeAbility": {
          "signature": "void UpgradeAbility(bool bSupressSpeech)",
          "description": "Increase the ability's level."
        },
        "UseResources": {
          "signature": "void UseResources(bool bMana, bool bGold, bool bCooldown)",
          "description": "Use the ability's resources. Return true for each resource to determine which resource should be used - mana, gold, and cooldown."
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDOTA_Ability_Animation_Attack",
      "description": "",
      "funcs": {
        "SetPlaybackRate": {
          "signature": "void SetPlaybackRate(float flRate)",
          "description": "Override playbackrate"
        }
      },
      "extends": "CDOTABaseAbility",
      "accessor": ""
    },
    {
      "title": "CDOTA_Ability_Animation_TailSpin",
      "description": "",
      "funcs": {
        "SetPlaybackRate": {
          "signature": "void SetPlaybackRate(float flRate)",
          "description": "Override playbackrate"
        }
      },
      "extends": "CDOTABaseAbility",
      "accessor": ""
    },
    {
      "title": "CDOTA_Ability_Nian_Leap",
      "description": "",
      "funcs": {
        "SetPlaybackRate": {
          "signature": "void SetPlaybackRate(float flRate)",
          "description": "Override playbackrate"
        }
      },
      "extends": "CDOTABaseAbility",
      "accessor": ""
    },
    {
      "title": "CDOTA_Ability_Nian_Dive",
      "description": "",
      "funcs": {
        "SetPlaybackRate": {
          "signature": "void SetPlaybackRate(float flRate)",
          "description": "Override playbackrate"
        }
      },
      "extends": "CDOTABaseAbility",
      "accessor": ""
    },
    {
      "title": "CDOTA_Ability_Nian_Roar",
      "description": "",
      "funcs": {
        "GetCastCount": {
          "signature": "int GetCastCount()",
          "description": "Number of times Nian has used the roar"
        }
      },
      "extends": "CDOTABaseAbility",
      "accessor": ""
    },
    {
      "title": "CDOTA_Item",
      "description": "",
      "funcs": {
        "GetContainer": {
          "signature": "handle GetContainer()",
          "description": "Get the container for this item."
        },
        "GetCost": {
          "signature": "int GetCost()",
          "description": "Get the item's purchase cost."
        },
        "GetCurrentCharges": {
          "signature": "int GetCurrentCharges()",
          "description": "Get the number of charges this item currently has."
        },
        "GetInitialCharges": {
          "signature": "int GetInitialCharges()",
          "description": "Get the initial number of charges this item has."
        },
        "GetPurchaser": {
          "signature": "handle GetPurchaser()",
          "description": "Get the purchaser for this item."
        },
        "GetPurchaseTime": {
          "signature": "float GetPurchaseTime()",
          "description": "Get the purchase time of this item"
        },
        "GetShareability": {
          "signature": "int GetShareability()",
          "description": "No Description Set"
        },
        "IsAlertableItem": {
          "signature": "bool IsAlertableItem()",
          "description": "Returns whether this item is alert-able (right click to ping \"Gather for ``item_name`` here\")"
        },
        "IsCastOnPickup": {
          "signature": "bool IsCastOnPickup()",
          "description": "Returns whether this item casts its ability when picked up."
        },
        "IsCombinable": {
          "signature": "bool IsCombinable()",
          "description": "Returns whether this item can be combined."
        },
        "IsDisassemblable": {
          "signature": "bool IsDisassemblable()",
          "description": "Returns whether this item can be disassembled."
        },
        "IsDroppable": {
          "signature": "bool IsDroppable()",
          "description": "Returns whether this item can be dropped."
        },
        "IsItem": {
          "signature": "bool IsItem()",
          "description": "Returns whether the handle is an item."
        },
        "IsKillable": {
          "signature": "bool IsKillable()",
          "description": "Returns whether this item can be destroyed on ground."
        },
        "IsMuted": {
          "signature": "bool IsMuted()",
          "description": "Returns whether this item is muted."
        },
        "IsPermanent": {
          "signature": "bool IsPermanent()",
          "description": "Is this a permanent item?"
        },
        "IsPurchasable": {
          "signature": "bool IsPurchasable()",
          "description": "Returns whether this item can be purchased."
        },
        "IsRecipe": {
          "signature": "bool IsRecipe()",
          "description": "Returns whether this item is a recipe."
        },
        "IsRecipeGenerated": {
          "signature": "bool IsRecipeGenerated()",
          "description": ""
        },
        "IsSellable": {
          "signature": "bool IsSellable()",
          "description": "Returns whether this item can be sold."
        },
        "IsStackable": {
          "signature": "bool IsStackable()",
          "description": "Returns whether this item can be stacked."
        },
        "LaunchLoot": {
          "signature": "void LaunchLoot(bool useOnContact, float height, float flDuration, Vector destination)",
          "description": "For items lying on the ground. Fires the item up into the air so that it lands at the specified position."
        },
        "LaunchLootInitialHeight": {
          "signature": "void LaunchLootInitialHeight(bool bAutoUse, float flInitialHeight, float flLaunchHeight, float flDuration, Vector vEndPoint)",
          "description": ""
        },
        "RequiresCharges": {
          "signature": "bool RequiresCharges()",
          "description": "Returns whether this item requires charges to be cast."
        },
        "SetCurrentCharges": {
          "signature": "void SetCurrentCharges(int iCharges)",
          "description": "Set the number of charges on this item"
        },
        "SetPurchaser": {
          "signature": "void SetPurchaser(handle hPurchaser)",
          "description": "Set the purchaser of record for this item."
        },
        "SetPurchaseTime": {
          "signature": "void SetPurchaseTime(float flTime)",
          "description": "Set the purchase time of this item"
        },
        "SetStacksWithOtherOwners": {
          "signature": "void SetStacksWithOtherOwners(bool bStacksWithOtherOwners)",
          "description": "No Description Set"
        },
        "StacksWithOtherOwners": {
          "signature": "bool StacksWithOtherOwners()",
          "description": "No Description Set"
        },
        "Think": {
          "signature": "void Think()",
          "description": "Think this item"
        }
      },
      "extends": "CDOTABaseAbility",
      "accessor": ""
    },
    {
      "title": "CDOTA_Item_Physical",
      "description": "",
      "funcs": {
        "GetContainedItem": {
          "signature": "handle GetContainedItem()",
          "description": "Returned the contained item."
        },
        "GetCreationTime": {
          "signature": "float GetCreationTime()",
          "description": "Returns the game time when this item was created in the world"
        },
        "SetContainedItem": {
          "signature": "void SetContainedItem(handle hItem)",
          "description": "Set the contained item."
        }
      },
      "extends": "CBaseAnimating",
      "accessor": ""
    },
    {
      "title": "CDOTA_Item_DataDriven",
      "description": "'\n",
      "funcs": {
        "ApplyDataDrivenModifier": {
          "signature": "void ApplyDataDrivenModifier(handle source, handle target, string modifier_name, handle modifierArgs)",
          "description": "Applies a data driven modifier to the target"
        },
        "ApplyDataDrivenThinker": {
          "signature": "handle ApplyDataDrivenThinker(handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable)",
          "description": "Applies a data driven thinker at the location"
        }
      },
      "extends": "CDOTA_Item",
      "accessor": ""
    },
    {
      "title": "CDOTA_Unit_Nian",
      "description": "",
      "funcs": {
        "GetHorn": {
          "signature": "handle GetHorn()",
          "description": "Is the Nian horn?"
        },
        "GetTail": {
          "signature": "handle GetTail()",
          "description": "Is the Nian's tail broken?"
        },
        "IsHornAlive": {
          "signature": "bool IsHornAlive()",
          "description": "Is the Nian's horn broken?"
        },
        "IsTailAlive": {
          "signature": "bool IsTailAlive()",
          "description": "Is the Nian's tail broken?"
        }
      },
      "extends": "CDOTA_BaseNPC_Creature",
      "accessor": ""
    },
    {
      "title": "CBasePlayer",
      "description": "",
      "funcs": {
        "GetHMDAvatar": {
          "signature": "handle GetHMDAvatar()",
          "description": "Returns the HMD Avatar entity for this player if it exists."
        },
        "IsNoclipping": {
          "signature": "bool IsNoclipping()",
          "description": "Returns true if the player is in noclip mode."
        },
        "IsSteamControllerButtonPressed": {
          "signature": "bool IsSteamControllerButtonPressed(int nControllerNumber, int nButton)",
          "description": "Returns true if the controller button is pressed."
        },
        "IsUsePressed": {
          "signature": "bool IsUsePressed()",
          "description": "Returns true if the use key is pressed."
        },
        "IsVRControllerButtonPressed": {
          "signature": "bool IsVRControllerButtonPressed(int nButton)",
          "description": "Returns true if the controller button is pressed."
        },
        "Quit": {
          "signature": "void Quit()",
          "description": "Quit the game from script."
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CDOTAPlayer",
      "description": "",
      "funcs": {
        "GetAssignedHero": {
          "signature": "handle GetAssignedHero()",
          "description": "Get the player's hero."
        },
        "GetControlledRPGUnit": {
          "signature": "handle GetControlledRPGUnit()",
          "description": "Get the RPG unit this player controls."
        },
        "GetPlayerID": {
          "signature": "int GetPlayerID()",
          "description": "Get the player's official PlayerID; notably is -1 when the player isn't yet on a team."
        },
        "MakeRandomHeroSelection": {
          "signature": "void MakeRandomHeroSelection()",
          "description": "Randoms this player's hero."
        },
        "SetKillCamUnit": {
          "signature": "void SetKillCamUnit(handle hEntity)",
          "description": "Set the kill cam unit for this hero."
        },
        "SetMusicStatus": {
          "signature": "void SetMusicStatus(int nMusicStatus, float flIntensity)",
          "description": "Set the music status for this player, note this will only really apply if dota_music_battle_enable is off."
        }
      },
      "extends": "CBaseAnimating",
      "accessor": ""
    },
    {
      "title": "CDOTA_PlayerResource",
      "description": "",
      "funcs": {
        "AddAegisPickup": {
          "signature": "void AddAegisPickup(int iPlayerID)",
          "description": "No Description Set"
        },
        "AddClaimedFarm": {
          "signature": "void AddClaimedFarm(int iPlayerID, float flFarmValue, bool bEarnedValue)",
          "description": "No Description Set"
        },
        "AddGoldSpentOnSupport": {
          "signature": "void AddGoldSpentOnSupport(int iPlayerID, int iCost)",
          "description": "No Description Set"
        },
        "AddRunePickup": {
          "signature": "void AddRunePickup(int iPlayerID)",
          "description": "No Description Set"
        },
        "AreUnitsSharedWithPlayerID": {
          "signature": "bool AreUnitsSharedWithPlayerID(int nUnitOwnerPlayerID, int nOtherPlayerID)",
          "description": "No Description Set"
        },
        "ClearKillsMatrix": {
          "signature": "void ClearKillsMatrix(int iPlayerID)",
          "description": "No Description Set"
        },
        "ClearLastHitMultikill": {
          "signature": "void ClearLastHitMultikill(int iPlayerID)",
          "description": "No Description Set"
        },
        "ClearLastHitStreak": {
          "signature": "void ClearLastHitStreak(int iPlayerID)",
          "description": "No Description Set"
        },
        "ClearRawPlayerDamageMatrix": {
          "signature": "void ClearRawPlayerDamageMatrix(int iPlayerID)",
          "description": "No Description Set"
        },
        "ClearStreak": {
          "signature": "void ClearStreak(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetAegisPickups": {
          "signature": "int GetAegisPickups(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetAssists": {
          "signature": "int GetAssists(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetBroadcasterChannel": {
          "signature": "unsigned GetBroadcasterChannel(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetBroadcasterChannelSlot": {
          "signature": "unsigned GetBroadcasterChannelSlot(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetClaimedDenies": {
          "signature": "int GetClaimedDenies(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetClaimedFarm": {
          "signature": "float GetClaimedFarm(int iPlayerID, bool bOnlyEarned)",
          "description": "No Description Set"
        },
        "GetClaimedMisses": {
          "signature": "int GetClaimedMisses(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetConnectionState": {
          "signature": "int GetConnectionState(int iPlayerID)",
          "description": "Returns a status code indication the connection state of the player. 0 - no connection. 1 - bot connected. 2 - player connected. 3 bot/player disconnected."
        },
        "GetCreepDamageTaken": {
          "signature": "int GetCreepDamageTaken(int iPlayerID, bool bTotal)",
          "description": "No Description Set"
        },
        "GetCustomBuybackCooldown": {
          "signature": "float GetCustomBuybackCooldown(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetCustomBuybackCost": {
          "signature": "int GetCustomBuybackCost(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetCustomTeamAssignment": {
          "signature": "int GetCustomTeamAssignment(int playerIndex)",
          "description": "Returns the team number that the player should join"
        },
        "GetDamageDoneToHero": {
          "signature": "int GetDamageDoneToHero(int iPlayerID, int iVictimID)",
          "description": "No Description Set"
        },
        "GetDeaths": {
          "signature": "int GetDeaths(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetDenies": {
          "signature": "int GetDenies(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetEventPointsForPlayerID": {
          "signature": "int GetEventPointsForPlayerID(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetEventPremiumPointsGranted": {
          "signature": "int GetEventPremiumPointsGranted(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetEventRankGranted": {
          "signature": "int GetEventRankGranted(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGold": {
          "signature": "int GetGold(int playerID)",
          "description": "Returns how much gold the specified player currently has"
        },
        "GetGoldBagsCollected": {
          "signature": "int GetGoldBagsCollected(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGoldLostToDeath": {
          "signature": "int GetGoldLostToDeath(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGoldPerMin": {
          "signature": "float GetGoldPerMin(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGoldSpentOnBuybacks": {
          "signature": "int GetGoldSpentOnBuybacks(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGoldSpentOnConsumables": {
          "signature": "int GetGoldSpentOnConsumables(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGoldSpentOnItems": {
          "signature": "int GetGoldSpentOnItems(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetGoldSpentOnSupport": {
          "signature": "int GetGoldSpentOnSupport(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetHealing": {
          "signature": "float GetHealing(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetHeroDamageTaken": {
          "signature": "int GetHeroDamageTaken(int iPlayerID, bool bTotal)",
          "description": "No Description Set"
        },
        "GetKills": {
          "signature": "int GetKills(int playerID)",
          "description": "Return how many kills the specified player currently gets"
        },
        "GetKillsDoneToHero": {
          "signature": "int GetKillsDoneToHero(int attackerPlayerID, int victimPlayerID)",
          "description": "Returns the number of times the attacker (first argument) has killed the victim (second argument)"
        },
        "GetLastHitMultikill": {
          "signature": "int GetLastHitMultikill(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetLastHits": {
          "signature": "int GetLastHits(int playerID)",
          "description": "No Description Set"
        },
        "GetLastHitStreak": {
          "signature": "int GetLastHitStreak(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetLevel": {
          "signature": "int GetLevel(int playerID)",
          "description": "No Description Set"
        },
        "GetMisses": {
          "signature": "int GetMisses(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetNearbyCreepDeaths": {
          "signature": "int GetNearbyCreepDeaths(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetNthCourierForTeam": {
          "signature": "handle GetNthCourierForTeam(int nCourierIndex, int nTeamNumber)",
          "description": "No Description Set"
        },
        "GetNthPlayerIDOnTeam": {
          "signature": "int GetNthPlayerIDOnTeam(int iTeamNumber, int iNthPlayer)",
          "description": "No Description Set"
        },
        "GetNumConsumablesPurchased": {
          "signature": "int GetNumConsumablesPurchased(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetNumCouriersForTeam": {
          "signature": "int GetNumCouriersForTeam(int nTeamNumber)",
          "description": "No Description Set"
        },
        "GetNumItemsPurchased": {
          "signature": "int GetNumItemsPurchased(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetOriginalLobbyTeam": {
          "signature": "int GetOriginalLobbyTeam(int iPlayerID)",
          "description": "The team this player was originally assigned in the lobby. DOTA_TEAM_NOTEAM if no lobby info."
        },
        "GetPlayer": {
          "signature": "handle GetPlayer(int playerID)",
          "description": "No Description Set"
        },
        "GetPlayerCount": {
          "signature": "int GetPlayerCount()",
          "description": "Includes spectators and players not assigned to a team"
        },
        "GetPlayerCountForTeam": {
          "signature": "int GetPlayerCountForTeam(int iTeam)",
          "description": ""
        },
        "GetPlayerLoadedCompletely": {
          "signature": "bool GetPlayerLoadedCompletely(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetPlayerName": {
          "signature": "string GetPlayerName(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetPlayerReservedState": {
          "signature": "bool GetPlayerReservedState(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetRawPlayerDamage": {
          "signature": "int GetRawPlayerDamage(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetReliableGold": {
          "signature": "int GetReliableGold(int playerID)",
          "description": "Returns how much reliable gold the specified player currently has"
        },
        "GetRespawnSeconds": {
          "signature": "int GetRespawnSeconds(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetRoshanKills": {
          "signature": "int GetRoshanKills(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetRunePickups": {
          "signature": "int GetRunePickups(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetSelectedHeroEntity": {
          "signature": "handle GetSelectedHeroEntity(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetSelectedHeroID": {
          "signature": "int GetSelectedHeroID(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetSelectedHeroName": {
          "signature": "string GetSelectedHeroName(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetSteamAccountID": {
          "signature": "unsigned GetSteamAccountID(int iPlayerID)",
          "description": "Return player steamID32"
        },
        "GetSteamID": {
          "signature": "unsigned GetSteamID(int iPlayerID)",
          "description": "Return player steamID64"
        },
        "GetStreak": {
          "signature": "int GetStreak(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetStuns": {
          "signature": "float GetStuns(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTeam": {
          "signature": "int GetTeam(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTeamKills": {
          "signature": "int GetTeamKills(int iTeam)",
          "description": "No Description Set"
        },
        "GetTeamPlayerCount": {
          "signature": "int GetTeamPlayerCount()",
          "description": "Players on a valid team (radiant, dire, or custom*) who haven't abandoned the game"
        },
        "GetTimeOfLastConsumablePurchase": {
          "signature": "float GetTimeOfLastConsumablePurchase(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTimeOfLastDeath": {
          "signature": "float GetTimeOfLastDeath(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTimeOfLastItemPurchase": {
          "signature": "float GetTimeOfLastItemPurchase(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTotalEarnedGold": {
          "signature": "int GetTotalEarnedGold(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTotalEarnedXP": {
          "signature": "int GetTotalEarnedXP(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTotalGoldSpent": {
          "signature": "int GetTotalGoldSpent(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetTowerDamageTaken": {
          "signature": "int GetTowerDamageTaken(int iPlayerID, bool bTotal)",
          "description": "No Description Set"
        },
        "GetTowerKills": {
          "signature": "int GetTowerKills(int iPlayerID)",
          "description": "No Description Set"
        },
        "GetUnitShareMaskForPlayer": {
          "signature": "int GetUnitShareMaskForPlayer(int nPlayerID, int nOtherPlayerID)",
          "description": "No Description Set"
        },
        "GetUnreliableGold": {
          "signature": "int GetUnreliableGold(int playerID)",
          "description": "Returns how much unreliable gold the specified player currently has"
        },
        "GetXPPerMin": {
          "signature": "float GetXPPerMin(int iPlayerID)",
          "description": "No Description Set"
        },
        "HasCustomGameTicketForPlayerID": {
          "signature": "bool HasCustomGameTicketForPlayerID(int iPlayerID)",
          "description": "Return true if player has pass"
        },
        "HasRandomed": {
          "signature": "bool HasRandomed(int iPlayerID)",
          "description": "No Description Set"
        },
        "HasRepicked": {
          "signature": "bool HasRepicked(int playerID)",
          "description": "No Description Set"
        },
        "HasSelectedHero": {
          "signature": "bool HasSelectedHero(int iPlayerID)",
          "description": "No Description Set"
        },
        "HaveAllPlayersJoined": {
          "signature": "bool HaveAllPlayersJoined()",
          "description": "No Description Set"
        },
        "HeroLevelUp": {
          "signature": "void HeroLevelUp(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementAssists": {
          "signature": "void IncrementAssists(int playerID, int iVictimID)",
          "description": "No Description Set"
        },
        "IncrementClaimedDenies": {
          "signature": "void IncrementClaimedDenies(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementClaimedMisses": {
          "signature": "void IncrementClaimedMisses(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementDeaths": {
          "signature": "void IncrementDeaths(int playerID, int iKillerID)",
          "description": "No Description Set"
        },
        "IncrementDenies": {
          "signature": "void IncrementDenies(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementGoldBagsCollected": {
          "signature": "void IncrementGoldBagsCollected(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementKills": {
          "signature": "void IncrementKills(int playerID, int kills)",
          "description": "No Description Set"
        },
        "IncrementLastHitMultikill": {
          "signature": "void IncrementLastHitMultikill(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementLastHits": {
          "signature": "void IncrementLastHits(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementLastHitStreak": {
          "signature": "void IncrementLastHitStreak(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementMisses": {
          "signature": "void IncrementMisses(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementNearbyCreepDeaths": {
          "signature": "void IncrementNearbyCreepDeaths(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementStreak": {
          "signature": "void IncrementStreak(int iPlayerID)",
          "description": "No Description Set"
        },
        "IncrementTotalEarnedXP": {
          "signature": "void IncrementTotalEarnedXP(int iPlayerID, int iXP, int nReason)",
          "description": "No Description Set"
        },
        "IsBroadcaster": {
          "signature": "bool IsBroadcaster(int iPlayerID)",
          "description": "No Description Set"
        },
        "IsDisableHelpSetForPlayerID": {
          "signature": "bool IsDisableHelpSetForPlayerID(int nPlayerID, int nOtherPlayerID)",
          "description": "No Description Set"
        },
        "IsFakeClient": {
          "signature": "bool IsFakeClient(int iPlayerID)",
          "description": "No Description Set"
        },
        "IsHeroSelected": {
          "signature": "bool IsHeroSelected(string pHeroname)",
          "description": "No Description Set"
        },
        "IsHeroSharedWithPlayerID": {
          "signature": "bool IsHeroSharedWithPlayerID(int nUnitOwnerPlayerID, int nOtherPlayerID)",
          "description": "No Description Set"
        },
        "IsValidPlayer": {
          "signature": "bool IsValidPlayer(int playerID)",
          "description": "No Description Set"
        },
        "IsValidPlayerID": {
          "signature": "bool IsValidPlayerID(int playerID)",
          "description": "No Description Set"
        },
        "IsValidTeamPlayer": {
          "signature": "bool IsValidTeamPlayer(int playerID)",
          "description": "No Description Set"
        },
        "IsValidTeamPlayerID": {
          "signature": "bool IsValidTeamPlayerID(int playerID)",
          "description": "No Description Set"
        },
        "ModifyGold": {
          "signature": "int ModifyGold(int playerID, int goldAmmt, bool reliable, int nReason)",
          "description": "No Description Set"
        },
        "ReplaceHeroWith": {
          "signature": "handle ReplaceHeroWith(int iPlayerID, string pszHeroClass, int nGold, int nXP)",
          "description": "(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP"
        },
        "ResetBuybackCostTime": {
          "signature": "void ResetBuybackCostTime(int nPlayerID)",
          "description": "No Description Set"
        },
        "ResetTotalEarnedGold": {
          "signature": "void ResetTotalEarnedGold(int iPlayerID)",
          "description": "No Description Set"
        },
        "SetBuybackCooldownTime": {
          "signature": "void SetBuybackCooldownTime(int nPlayerID, float flBuybackCooldown)",
          "description": "No Description Set"
        },
        "SetBuybackGoldLimitTime": {
          "signature": "void SetBuybackGoldLimitTime(int nPlayerID, float flBuybackCooldown)",
          "description": "No Description Set"
        },
        "SetCameraTarget": {
          "signature": "void SetCameraTarget(int nPlayerID, handle hTarget)",
          "description": "(playerID, entity) - force the given player's camera to follow the given entity"
        },
        "SetCustomBuybackCooldown": {
          "signature": "void SetCustomBuybackCooldown(int iPlayerID, float flCooldownTime)",
          "description": "Set the buyback cooldown for this player."
        },
        "SetCustomBuybackCost": {
          "signature": "void SetCustomBuybackCost(int iPlayerID, int iGoldCost)",
          "description": "Set the buyback cost for this player."
        },
        "SetCustomPlayerColor": {
          "signature": "void SetCustomPlayerColor(int iPlayerID, int r, int g, int b)",
          "description": "Set custom color for player (minimap, scoreboard, etc)"
        },
        "SetCustomTeamAssignment": {
          "signature": "void SetCustomTeamAssignment(int playerIndex, int teamToJoin)",
          "description": "Sets the team that the player should join"
        },
        "SetGold": {
          "signature": "void SetGold(int playerID, int amount, bool reliableGold)",
          "description": "Sets the reliable/unreliable gold of the specified player"
        },
        "SetHasRandomed": {
          "signature": "void SetHasRandomed(int playerID)",
          "description": "No Description Set"
        },
        "SetHasRepicked": {
          "signature": "void SetHasRepicked(int playerID)",
          "description": "No Description Set"
        },
        "SetLastBuybackTime": {
          "signature": "void SetLastBuybackTime(int iPlayerID, int iLastBuybackTime)",
          "description": "No Description Set"
        },
        "SetOverrideSelectionEntity": {
          "signature": "void SetOverrideSelectionEntity(int nPlayerID, handle hEntity)",
          "description": "Set the forced selection entity for a player."
        },
        "SetPlayerReservedState": {
          "signature": "void SetPlayerReservedState(int iPlayerID, bool bReserved)",
          "description": "No Description Set"
        },
        "SetUnitShareMaskForPlayer": {
          "signature": "void SetUnitShareMaskForPlayer(int nPlayerID, int nOtherPlayerID, int nFlag, bool bState)",
          "description": "No Description Set"
        },
        "SpendGold": {
          "signature": "void SpendGold(int playerID, int amount, int reason)",
          "description": "No Description Set"
        },
        "UpdateTeamSlot": {
          "signature": "void UpdateTeamSlot(int iPlayerID, int iTeamNumber, bool bFromLobby)",
          "description": "No Description Set"
        },
        "WhoSelectedHero": {
          "signature": "int WhoSelectedHero(string pHeroFilename)",
          "description": "No Description Set"
        }
      },
      "extends": "CBaseEntity",
      "accessor": "PlayerResource"
    },
    {
      "title": "CDOTA_BaseNPC",
      "description": "'\n",
      "funcs": {
        "AddAbility": {
          "signature": "handle AddAbility(string pszAbilityName)",
          "description": "Add an ability to this unit by name."
        },
        "AddItem": {
          "signature": "handle AddItem(handle hItem)",
          "description": "Add the passed item handler to this unit's inventory."
        },
        "AddItemByName": {
          "signature": "handle AddItemByName(string pszItemName)",
          "description": "Add an item with this name to this unit's inventory."
        },
        "AddNewModifier": {
          "signature": "handle AddNewModifier(handle caster, handle optionalSourceAbility, string modifierName, handle modifierData)",
          "description": "Add a new modifier to this unit. If the modifier is non-multiple (MODIFIER_ATTRIBUTE_MULTIPLE) and the target already has it, it refreshes the ability instead."
        },
        "AddNoDraw": {
          "signature": "void AddNoDraw()",
          "description": "Adds the no draw flag, effectively removing the model of this unit."
        },
        "AddSpeechBubble": {
          "signature": "void AddSpeechBubble(int iBubble, string pszSpeech, float flDuration, unsigned unOffsetX, unsigned unOffsetY)",
          "description": "Add a speech bubble(1-4 live at a time) to this NPC. WARNING: This function is deprecated since 7.00 and will NOT work"
        },
        "AlertNearbyUnits": {
          "signature": "void AlertNearbyUnits(handle hAttacker, handle hAbility)",
          "description": "No Description Set"
        },
        "AngerNearbyUnits": {
          "signature": "void AngerNearbyUnits()",
          "description": "No Description Set"
        },
        "AttackNoEarlierThan": {
          "signature": "void AttackNoEarlierThan(float flTime)",
          "description": "No Description Set"
        },
        "AttackReady": {
          "signature": "bool AttackReady()",
          "description": "No Description Set"
        },
        "BoundingRadius2D": {
          "signature": "float BoundingRadius2D()",
          "description": "No Description Set"
        },
        "CanEntityBeSeenByMyTeam": {
          "signature": "bool CanEntityBeSeenByMyTeam(handle hEntity)",
          "description": "Check FoW to see if an entity is visible."
        },
        "CanSellItems": {
          "signature": "bool CanSellItems()",
          "description": "Query if this unit can sell items."
        },
        "CastAbilityImmediately": {
          "signature": "void CastAbilityImmediately(handle ability, int playerIndex)",
          "description": "Cast an immediate ability."
        },
        "CastAbilityNoTarget": {
          "signature": "void CastAbilityNoTarget(handle ability, int playerIndex)",
          "description": "Cast a no target ability. ( hAbility, iPlayerIndex )"
        },
        "CastAbilityOnPosition": {
          "signature": "void CastAbilityOnPosition(Vector vPosition, handle hAbility, int iPlayerIndex)",
          "description": "Cast a point target ability on the specified position."
        },
        "CastAbilityOnTarget": {
          "signature": "void CastAbilityOnTarget(handle target, handle ability, int playerIndex)",
          "description": "Cast a unit target ability at the specified target."
        },
        "CastAbilityToggle": {
          "signature": "void CastAbilityToggle(handle hAbility, int iPlayerIndex)",
          "description": "Toggle an ability. ( hAbility, iPlayerIndex )"
        },
        "DestroyAllSpeechBubbles": {
          "signature": "void DestroyAllSpeechBubbles()",
          "description": ""
        },
        "DisassembleItem": {
          "signature": "void DisassembleItem(handle hItem)",
          "description": "Disassemble the passed item in this unit's inventory."
        },
        "DropItemAtPosition": {
          "signature": "void DropItemAtPosition(Vector vDest, handle hItem)",
          "description": "Drop an item at a given point."
        },
        "DropItemAtPositionImmediate": {
          "signature": "void DropItemAtPositionImmediate(handle hItem, Vector vPosition)",
          "description": "Immediately drop a carried item at a given position."
        },
        "EjectItemFromStash": {
          "signature": "void EjectItemFromStash(handle hItem)",
          "description": "Drops the selected item out of this unit's stash."
        },
        "FindAbilityByName": {
          "signature": "handle FindAbilityByName(string pAbilityName)",
          "description": "Retrieve an ability by name from the unit."
        },
        "FindAllModifiers": {
          "signature": "table FindAllModifiers()",
          "description": "Returns a table of all of the modifiers on the NPC."
        },
        "FindAllModifiersByName": {
          "signature": "table FindAllModifiersByName(string pszScriptName)",
          "description": "Returns a table of all of the modifiers on the NPC with the passed name (modifierName)"
        },
        "FindModifierByName": {
          "signature": "handle FindModifierByName(string pszScriptName)",
          "description": "Return a handle to the modifier of the given name if found (string Name). If there are multiple modifiers with the same name, it only returns the first one found."
        },
        "FindModifierByNameAndCaster": {
          "signature": "handle FindModifierByNameAndCaster(string pszScriptName, handle hCaster)",
          "description": "Return a handle to the modifier of the given name from the passed caster if found. (string Name, hCaster). If there are multiple modifier with the same name and caster, it only returns the first one found."
        },
        "ForceKill": {
          "signature": "void ForceKill(bool bReincarnate)",
          "description": "Kill this unit immediately."
        },
        "GetAbilityByIndex": {
          "signature": "handle GetAbilityByIndex(int iIndex)",
          "description": "Retrieve an ability by index from the unit."
        },
        "GetAbilityCount": {
          "signature": "int GetAbilityCount()",
          "description": "Get how many ability slots this unit has (usually 24). (NOT how much ability slots are occupied!)"
        },
        "GetAcquisitionRange": {
          "signature": "float GetAcquisitionRange()",
          "description": "Gets the range at which this unit will auto-acquire."
        },
        "GetAdditionalBattleMusicWeight": {
          "signature": "float GetAdditionalBattleMusicWeight()",
          "description": "Combat involving this creature will have this weight added to the music calcuations."
        },
        "GetAggroTarget": {
          "signature": "handle GetAggroTarget()",
          "description": "Returns this unit's aggro target."
        },
        "GetAttackAnimationPoint": {
          "signature": "float GetAttackAnimationPoint()",
          "description": "Get the animation point of the NPC's attack animation."
        },
        "GetAttackCapability": {
          "signature": "int GetAttackCapability()",
          "description": "Gets the Attack Capability of the unit. (none = 0, melee = 1, ranged = 2)."
        },
        "GetAttackDamage": {
          "signature": "int GetAttackDamage()",
          "description": "Returns a random integer between the minimum and maximum base damage of the unit."
        },
        "GetAttackRange": {
          "signature": "float GetAttackRange()",
          "description": "Gets this unit's attack range after all modifiers."
        },
        "GetAttackRangeBuffer": {
          "signature": "float GetAttackRangeBuffer()",
          "description": "Gets the attack range buffer (how far can the target move away from the unit before the attack is cancelled)."
        },
        "GetAttackSpeed": {
          "signature": "float GetAttackSpeed()",
          "description": "Get the attack speed of the unit. This returns attack speed in seconds."
        },
        "GetAttacksPerSecond": {
          "signature": "float GetAttacksPerSecond()",
          "description": "Get how many times this unit can attack in a second."
        },
        "GetAttackTarget": {
          "signature": "handle GetAttackTarget()",
          "description": "Get which target this unit is currently attacking."
        },
        "GetAverageTrueAttackDamage": {
          "signature": "int GetAverageTrueAttackDamage()",
          "description": "Returns the average value of the minimum and maximum damage values."
        },
        "GetBaseAttackRange": {
          "signature": "int GetBaseAttackRange()",
          "description": "Gets this unit's attack range before modifiers."
        },
        "GetBaseAttackTime": {
          "signature": "float GetBaseAttackTime()",
          "description": "Get the base attack time (BAT) of this unit."
        },
        "GetBaseDamageMax": {
          "signature": "int GetBaseDamageMax()",
          "description": "Gets the minimum base damage."
        },
        "GetBaseDamageMin": {
          "signature": "int GetBaseDamageMin()",
          "description": "Gets the minimum base damage."
        },
        "GetBaseDayTimeVisionRange": {
          "signature": "int GetBaseDayTimeVisionRange()",
          "description": "Returns the vision range before modifiers."
        },
        "GetBaseHealthRegen": {
          "signature": "float GetBaseHealthRegen()",
          "description": "Get the base health regen of this unit (before attribute and modifier bonuses)."
        },
        "GetBaseMagicalResistanceValue": {
          "signature": "float GetBaseMagicalResistanceValue()",
          "description": "Returns base magical armor value."
        },
        "GetBaseMaxHealth": {
          "signature": "float GetBaseMaxHealth()",
          "description": "Gets the base max health value."
        },
        "GetBaseMoveSpeed": {
          "signature": "float GetBaseMoveSpeed()",
          "description": "Get the base move speed of this unit (before modifier bonuses)."
        },
        "GetBaseNightTimeVisionRange": {
          "signature": "int GetBaseNightTimeVisionRange()",
          "description": "Returns the vision range before modifiers."
        },
        "GetCastPoint": {
          "signature": "float GetCastPoint(bool bAttack)",
          "description": "Parameter: bAttack"
        },
        "GetCloneSource": {
          "signature": "handle GetCloneSource()",
          "description": "Get clone source (Meepo Prime, if this is a Meepo)"
        },
        "GetCollisionPadding": {
          "signature": "float GetCollisionPadding()",
          "description": "Returns the size of the collision padding around the hull."
        },
        "GetConstantBasedManaRegen": {
          "signature": "float GetConstantBasedManaRegen()",
          "description": "This Mana regen is derived from constant bonuses like Basilius."
        },
        "GetCreationTime": {
          "signature": "float GetCreationTime()",
          "description": "Get the game time this NPC was created."
        },
        "GetCurrentActiveAbility": {
          "signature": "handle GetCurrentActiveAbility()",
          "description": "Get the ability this unit is currently casting."
        },
        "GetCurrentVisionRange": {
          "signature": "int GetCurrentVisionRange()",
          "description": "Gets the current vision range."
        },
        "GetCursorCastTarget": {
          "signature": "handle GetCursorCastTarget()",
          "description": "No Description Set"
        },
        "GetCursorPosition": {
          "signature": "Vector GetCursorPosition()",
          "description": "No Description Set"
        },
        "GetCursorTargetingNothing": {
          "signature": "bool GetCursorTargetingNothing()",
          "description": "No Description Set"
        },
        "GetDayTimeVisionRange": {
          "signature": "int GetDayTimeVisionRange()",
          "description": "Returns the vision range after modifiers."
        },
        "GetDeathXP": {
          "signature": "int GetDeathXP()",
          "description": "Get the XP bounty on this unit"
        },
        "GetForceAttackTarget": {
          "signature": "handle GetForceAttackTarget()",
          "description": "No Description Set"
        },
        "GetGoldBounty": {
          "signature": "int GetGoldBounty()",
          "description": "Get the gold bounty on this unit"
        },
        "GetHasteFactor": {
          "signature": "float GetHasteFactor()",
          "description": "No Description Set"
        },
        "GetHealth": {
          "signature": "int GetHealth()",
          "description": "Get the health of this unit."
        },
        "GetHealthDeficit": {
          "signature": "int GetHealthDeficit()",
          "description": "Returns integer amount of health missing from max."
        },
        "GetHealthPercent": {
          "signature": "int GetHealthPercent()",
          "description": "Get the current health percent of the unit."
        },
        "GetHealthRegen": {
          "signature": "float GetHealthRegen()",
          "description": "Get the current total health regeneration of this unit (including base and bonuses)."
        },
        "GetHullRadius": {
          "signature": "float GetHullRadius()",
          "description": "Get the collision hull radius of this NPC"
        },
        "GetIdealSpeed": {
          "signature": "float GetIdealSpeed()",
          "description": "Returns speed after all modifiers."
        },
        "GetIncreasedAttackSpeed": {
          "signature": "float GetIncreasedAttackSpeed()",
          "description": "Get the attack speed above the unit's base (that is gained through modifiers, but not attributes)."
        },
        "GetInitialGoalEntity": {
          "signature": "handle GetInitialGoalEntity()",
          "description": "Returns the initial waypoint goal for this NPC"
        },
        "GetItemInSlot": {
          "signature": "handle GetItemInSlot(int i)",
          "description": "Returns nth item in inventory slot (index is zero based)"
        },
        "GetLastAttackTime": {
          "signature": "float GetLastAttackTime()",
          "description": "Returns the last Game Time this unit attacked any target."
        },
        "GetLastIdleChangeTime": {
          "signature": "float GetLastIdleChangeTime()",
          "description": "Get the last game time that this unit switched to/from idle state."
        },
        "GetLevel": {
          "signature": "int GetLevel()",
          "description": "Returns the level of this unit."
        },
        "GetMagicalArmorValue": {
          "signature": "float GetMagicalArmorValue()",
          "description": "Returns current magical armor value."
        },
        "GetMainControllingPlayer": {
          "signature": "int GetMainControllingPlayer()",
          "description": "Returns the player ID of the controlling player."
        },
        "GetMana": {
          "signature": "float GetMana()",
          "description": "Get how much mana this unit currently has."
        },
        "GetManaPercent": {
          "signature": "int GetManaPercent()",
          "description": "Get the percent of mana remaining."
        },
        "GetManaRegen": {
          "signature": "float GetManaRegen()",
          "description": "Get the total current mana regeneration of this unit."
        },
        "GetMaxHealth": {
          "signature": "int GetMaxHealth()",
          "description": "Get the maximum health of this unit."
        },
        "GetMaximumGoldBounty": {
          "signature": "int GetMaximumGoldBounty()",
          "description": "Get the maximum gold bounty for this unit."
        },
        "GetMaxMana": {
          "signature": "float GetMaxMana()",
          "description": "Get the maximum mana of this unit."
        },
        "GetMinimumGoldBounty": {
          "signature": "int GetMinimumGoldBounty()",
          "description": "Get the minimum gold bounty for this unit."
        },
        "GetModelRadius": {
          "signature": "float GetModelRadius()",
          "description": "No Description Set"
        },
        "GetModifierCount": {
          "signature": "int GetModifierCount()",
          "description": "How many modifiers does this unit have?"
        },
        "GetModifierNameByIndex": {
          "signature": "string GetModifierNameByIndex(int nIndex)",
          "description": "Get a modifier name by index."
        },
        "GetModifierStackCount": {
          "signature": "int GetModifierStackCount(string modifierName, handle hCaster)",
          "description": "Gets the stack count of a given modifier."
        },
        "GetMoveSpeedModifier": {
          "signature": "float GetMoveSpeedModifier(float flBaseSpeed)",
          "description": "No Description Set"
        },
        "GetMustReachEachGoalEntity": {
          "signature": "bool GetMustReachEachGoalEntity()",
          "description": "Get whether this NPC is required to reach each goal entity, rather than being allowed to 'unkink' their path"
        },
        "GetNeverMoveToClearSpace": {
          "signature": "bool GetNeverMoveToClearSpace()",
          "description": "If set to true, we will never attempt to move this unit to clear space, even when it unphases."
        },
        "GetNightTimeVisionRange": {
          "signature": "int GetNightTimeVisionRange()",
          "description": "Returns the vision range after modifiers."
        },
        "GetOpposingTeamNumber": {
          "signature": "int GetOpposingTeamNumber()",
          "description": "No Description Set"
        },
        "GetPaddedCollisionRadius": {
          "signature": "float GetPaddedCollisionRadius()",
          "description": "Get the collision hull radius (including padding) of this NPC"
        },
        "GetPercentageBasedManaRegen": {
          "signature": "float GetPercentageBasedManaRegen()",
          "description": "This Mana regen is derived from % bonuses (from items like Void Stone)."
        },
        "GetPhysicalArmorBaseValue": {
          "signature": "float GetPhysicalArmorBaseValue()",
          "description": "Returns base physical armor value from npc_heroes.txt (\"ArmorPhysical\")."
        },
        "GetPhysicalArmorValue": {
          "signature": "float GetPhysicalArmorValue()",
          "description": "Returns current physical armor value."
        },
        "GetPlayerOwner": {
          "signature": "handle GetPlayerOwner()",
          "description": "Returns the player that owns this unit"
        },
        "GetPlayerOwnerID": {
          "signature": "int GetPlayerOwnerID()",
          "description": "Get the owner player ID for this unit."
        },
        "GetProjectileSpeed": {
          "signature": "int GetProjectileSpeed()",
          "description": "Get the projectile speed of this unit's attacks."
        },
        "GetRangedProjectileName": {
          "signature": "string GetRangedProjectileName()",
          "description": "Returns the name of this unit's projectile."
        },
        "GetRangeToUnit": {
          "signature": "float GetRangeToUnit(handle hNPC)",
          "description": "No Description Set"
        },
        "GetSecondsPerAttack": {
          "signature": "float GetSecondsPerAttack()",
          "description": "Get how many seconds each attack take."
        },
        "GetStatsBasedManaRegen": {
          "signature": "float GetStatsBasedManaRegen()",
          "description": "Returns mana regen rate per intelligence."
        },
        "GetTeamNumber": {
          "signature": "int GetTeamNumber()",
          "description": "Get the team number of this unit."
        },
        "GetTotalPurchasedUpgradeGoldCost": {
          "signature": "int GetTotalPurchasedUpgradeGoldCost()",
          "description": "Get how much gold has been spent on ability upgrades."
        },
        "GetUnitLabel": {
          "signature": "string GetUnitLabel()",
          "description": "Get the label of this unit set through \"UnitLabel\" KV of this unit."
        },
        "GetUnitName": {
          "signature": "string GetUnitName()",
          "description": "Get the name of this unit."
        },
        "GiveMana": {
          "signature": "void GiveMana(float flMana)",
          "description": "Give mana to this unit, this can be used for mana gained by abilities or item usage."
        },
        "HasAbility": {
          "signature": "bool HasAbility(string pszAbilityName)",
          "description": "See whether this unit has an ability by name."
        },
        "HasAnyActiveAbilities": {
          "signature": "bool HasAnyActiveAbilities()",
          "description": ""
        },
        "HasAttackCapability": {
          "signature": "bool HasAttackCapability()",
          "description": "Returns whether this unit is capable of attacking."
        },
        "HasFlyingVision": {
          "signature": "bool HasFlyingVision()",
          "description": "No Description Set"
        },
        "HasFlyMovementCapability": {
          "signature": "bool HasFlyMovementCapability()",
          "description": "Returns whether this unit can move through terrain freely."
        },
        "HasGroundMovementCapability": {
          "signature": "bool HasGroundMovementCapability()",
          "description": "Returns whether this unit can only move on the ground."
        },
        "HasInventory": {
          "signature": "bool HasInventory()",
          "description": "Returns whether this unit has \"HasInventory\" KV set to \"1\"."
        },
        "HasItemInInventory": {
          "signature": "bool HasItemInInventory(string pItemName)",
          "description": "See whether this unit has an item by name."
        },
        "HasModifier": {
          "signature": "bool HasModifier(string pszScriptName)",
          "description": "Sees if this unit has a given modifier"
        },
        "HasMovementCapability": {
          "signature": "bool HasMovementCapability()",
          "description": "Returns whether this unit is capable of moving."
        },
        "HasScepter": {
          "signature": "bool HasScepter()",
          "description": "Returns whether this unit is holding a scepter. (or has a modifier that grants scepter effects)."
        },
        "Heal": {
          "signature": "void Heal(float amount, handle source)",
          "description": "Heal this unit."
        },
        "Hold": {
          "signature": "void Hold()",
          "description": "Hold position."
        },
        "Interrupt": {
          "signature": "void Interrupt()",
          "description": "Interrupts any orders this unit is currently executing."
        },
        "InterruptChannel": {
          "signature": "void InterruptChannel()",
          "description": "Interrupt the channel of this unit."
        },
        "InterruptMotionControllers": {
          "signature": "void InterruptMotionControllers(bool bFindClearSpace)",
          "description": "Parameter boolean determines finding clear space."
        },
        "IsAlive": {
          "signature": "bool IsAlive()",
          "description": "Is this unit alive?"
        },
        "IsAncient": {
          "signature": "bool IsAncient()",
          "description": "Is this creature an Ancient?"
        },
        "IsAttackImmune": {
          "signature": "bool IsAttackImmune()",
          "description": "Is this unit immune to attacks? (e.g. Ethereal effect)"
        },
        "IsAttacking": {
          "signature": "bool IsAttacking()",
          "description": "Is this unit is currently attacking?"
        },
        "IsAttackingEntity": {
          "signature": "bool IsAttackingEntity(handle hEntity)",
          "description": "Is this unit is currently attacking this entity?"
        },
        "IsBarracks": {
          "signature": "bool IsBarracks()",
          "description": "Is this unit a Barracks?"
        },
        "IsBlind": {
          "signature": "bool IsBlind()",
          "description": "Is this unit blinded?"
        },
        "IsBlockDisabled": {
          "signature": "bool IsBlockDisabled()",
          "description": "Is this unit's block disabled?"
        },
        "IsBoss": {
          "signature": "bool IsBoss()",
          "description": "Is this a real hero?"
        },
        "IsBuilding": {
          "signature": "bool IsBuilding()",
          "description": "Is this unit a building?"
        },
        "IsChanneling": {
          "signature": "bool IsChanneling()",
          "description": "Is this unit currently channeling a spell?"
        },
        "IsClone": {
          "signature": "bool IsClone()",
          "description": "Is this unit a clone? (Meepo)"
        },
        "IsCommandRestricted": {
          "signature": "bool IsCommandRestricted()",
          "description": "Is this unit's command restricted?"
        },
        "IsConsideredHero": {
          "signature": "bool IsConsideredHero()",
          "description": "Is this unit a considered a hero for targeting purposes?"
        },
        "IsControllableByAnyPlayer": {
          "signature": "bool IsControllableByAnyPlayer()",
          "description": "Is this unit controlled by any non-bot player?"
        },
        "IsCourier": {
          "signature": "bool IsCourier()",
          "description": "Is this unit a courier?"
        },
        "IsCreature": {
          "signature": "bool IsCreature()",
          "description": "Is this a Creature type NPC?"
        },
        "IsCreep": {
          "signature": "bool IsCreep()",
          "description": "Is this unit a creep?"
        },
        "IsDeniable": {
          "signature": "bool IsDeniable()",
          "description": "No Description Set"
        },
        "IsDisarmed": {
          "signature": "bool IsDisarmed()",
          "description": "Is this unit disarmed?"
        },
        "IsDominated": {
          "signature": "bool IsDominated()",
          "description": "Is this unit dominated?"
        },
        "IsEvadeDisabled": {
          "signature": "bool IsEvadeDisabled()",
          "description": "Is this unit's evasion disabled?"
        },
        "IsFort": {
          "signature": "bool IsFort()",
          "description": "Is this unit an Ancient?"
        },
        "IsFrozen": {
          "signature": "bool IsFrozen()",
          "description": "Is this unit frozen? (Chronosphere/Timelock freeze)"
        },
        "IsHardDisarmed": {
          "signature": "bool IsHardDisarmed()",
          "description": "No Description Set"
        },
        "IsHero": {
          "signature": "bool IsHero()",
          "description": "Is this a hero or hero illusion?"
        },
        "IsHexed": {
          "signature": "bool IsHexed()",
          "description": "Is this unit hexed?"
        },
        "IsIdle": {
          "signature": "bool IsIdle()",
          "description": "Is this creature currently idle?"
        },
        "IsIllusion": {
          "signature": "bool IsIllusion()",
          "description": "Is this unit an illusion?"
        },
        "IsInvisible": {
          "signature": "bool IsInvisible()",
          "description": "Is this unit invisible?"
        },
        "IsInvulnerable": {
          "signature": "bool IsInvulnerable()",
          "description": "Is this unit invulnerable?"
        },
        "IsLowAttackPriority": {
          "signature": "bool IsLowAttackPriority()",
          "description": "Is this unit's attack priority set to low? (being attacked last when attack moving)"
        },
        "IsMagicImmune": {
          "signature": "bool IsMagicImmune()",
          "description": "Is this unit magic immune?"
        },
        "IsMechanical": {
          "signature": "bool IsMechanical()",
          "description": "Is the unit mechanical?"
        },
        "IsMovementImpaired": {
          "signature": "bool IsMovementImpaired()",
          "description": "No Description Set"
        },
        "IsMuted": {
          "signature": "bool IsMuted()",
          "description": "Is this unit muted?"
        },
        "IsNeutralUnitType": {
          "signature": "bool IsNeutralUnitType()",
          "description": "Is this a neutral?"
        },
        "IsNightmared": {
          "signature": "bool IsNightmared()",
          "description": "Is this unit nightmared?"
        },
        "IsOpposingTeam": {
          "signature": "bool IsOpposingTeam(int nTeam)",
          "description": "No Description Set"
        },
        "IsOther": {
          "signature": "bool IsOther()",
          "description": "Is this unit a ward-type unit?"
        },
        "IsOutOfGame": {
          "signature": "bool IsOutOfGame()",
          "description": "Is this unit out of the game? (Astral Imprisonment)"
        },
        "IsOwnedByAnyPlayer": {
          "signature": "bool IsOwnedByAnyPlayer()",
          "description": "Is this unit owned by any non-bot player?"
        },
        "IsPhantom": {
          "signature": "bool IsPhantom()",
          "description": "Is this a phantom unit?"
        },
        "IsPhantomBlocker": {
          "signature": "bool IsPhantomBlocker()",
          "description": "No Description Set"
        },
        "IsPhased": {
          "signature": "bool IsPhased()",
          "description": "No Description Set"
        },
        "IsPositionInRange": {
          "signature": "bool IsPositionInRange(Vector vPosition, float flRange)",
          "description": "No Description Set"
        },
        "IsRangedAttacker": {
          "signature": "bool IsRangedAttacker()",
          "description": "Is this unit a ranged attacker?"
        },
        "IsRealHero": {
          "signature": "bool IsRealHero()",
          "description": "Returns true if the hero is a true Hero, not a creep or an Illusion of a hero"
        },
        "IsRooted": {
          "signature": "bool IsRooted()",
          "description": "No Description Set"
        },
        "IsShrine": {
          "signature": "bool IsShrine()",
          "description": "No Description Set"
        },
        "IsSilenced": {
          "signature": "bool IsSilenced()",
          "description": "No Description Set"
        },
        "IsSoftDisarmed": {
          "signature": "bool IsSoftDisarmed()",
          "description": "No Description Set"
        },
        "IsSpeciallyDeniable": {
          "signature": "bool IsSpeciallyDeniable()",
          "description": "No Description Set"
        },
        "IsStunned": {
          "signature": "bool IsStunned()",
          "description": "No Description Set"
        },
        "IsSummoned": {
          "signature": "bool IsSummoned()",
          "description": "Is this unit summoned?"
        },
        "IsTempestDouble": {
          "signature": "bool IsTempestDouble()",
          "description": "No Description Set"
        },
        "IsTower": {
          "signature": "bool IsTower()",
          "description": "Is this a tower?"
        },
        "IsUnableToMiss": {
          "signature": "bool IsUnableToMiss()",
          "description": "No Description Set"
        },
        "IsUnselectable": {
          "signature": "bool IsUnselectable()",
          "description": "No Description Set"
        },
        "Kill": {
          "signature": "void Kill(handle hAbility, handle hAttacker)",
          "description": "Kills this NPC, with the params Ability and Attacker"
        },
        "MakeIllusion": {
          "signature": "void MakeIllusion()",
          "description": "No Description Set"
        },
        "MakePhantomBlocker": {
          "signature": "void MakePhantomBlocker()",
          "description": "No Description Set"
        },
        "MakeVisibleDueToAttack": {
          "signature": "void MakeVisibleDueToAttack(int iTeam)",
          "description": "No Description Set"
        },
        "MakeVisibleToTeam": {
          "signature": "void MakeVisibleToTeam(int iTeam, float flDuration)",
          "description": "No Description Set"
        },
        "ManageModelChanges": {
          "signature": "void ManageModelChanges()",
          "description": ""
        },
        "ModifyHealth": {
          "signature": "void ModifyHealth(int iDesiredHealthValue, handle hAbility, bool bLethal, int iAdditionalFlags)",
          "description": "Sets the health to a specific value, with optional flags or inflictors."
        },
        "MoveToNPC": {
          "signature": "void MoveToNPC(handle hNPC)",
          "description": "Move to follow a unit."
        },
        "MoveToNPCToGiveItem": {
          "signature": "void MoveToNPCToGiveItem(handle npc, handle item)",
          "description": "Give an item to another unit."
        },
        "MoveToPosition": {
          "signature": "void MoveToPosition(Vector vDest)",
          "description": "Issue a Move-To command"
        },
        "MoveToPositionAggressive": {
          "signature": "void MoveToPositionAggressive(Vector vDest)",
          "description": "Issue an Attack-Move-To command"
        },
        "MoveToTargetToAttack": {
          "signature": "void MoveToTargetToAttack(handle hTarget)",
          "description": "Move to a target to attack."
        },
        "NoHealthBar": {
          "signature": "bool NoHealthBar()",
          "description": "No Description Set"
        },
        "NoTeamMoveTo": {
          "signature": "bool NoTeamMoveTo()",
          "description": "No Description Set"
        },
        "NoTeamSelect": {
          "signature": "bool NoTeamSelect()",
          "description": "No Description Set"
        },
        "NotifyWearablesOfModelChange": {
          "signature": "void NotifyWearablesOfModelChange(bool bOriginalModel)",
          "description": ""
        },
        "NotOnMinimap": {
          "signature": "bool NotOnMinimap()",
          "description": "No Description Set"
        },
        "NotOnMinimapForEnemies": {
          "signature": "bool NotOnMinimapForEnemies()",
          "description": "No Description Set"
        },
        "NoUnitCollision": {
          "signature": "bool NoUnitCollision()",
          "description": "No Description Set"
        },
        "PassivesDisabled": {
          "signature": "bool PassivesDisabled()",
          "description": "No Description Set"
        },
        "PerformAttack": {
          "signature": "void PerformAttack(handle hTarget, bool bUseCastAttackOrb, bool bProcessProcs, bool bSkipCooldown, bool bIgnoreInvis, bool bUseProjectile, bool bFakeAttack, bool bNeverMiss)",
          "description": "Performs an attack on a target. Params: Target, bUseCastAttackOrb, bProcessProcs, bSkipCooldown, bIgnoreInvis, bUseProjectile, bFakeAttack, bNeverMiss"
        },
        "PickupDroppedItem": {
          "signature": "void PickupDroppedItem(handle hItem)",
          "description": "Pick up a dropped item."
        },
        "PickupRune": {
          "signature": "void PickupRune(handle hItem)",
          "description": "Pick up a rune."
        },
        "ProvidesVision": {
          "signature": "bool ProvidesVision()",
          "description": "No Description Set"
        },
        "Purge": {
          "signature": "void Purge(bool bRemovePositiveBuffs, bool bRemoveDebuffs, bool bFrameOnly, bool bRemoveStuns, bool bRemoveExceptions)",
          "description": "(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions"
        },
        "ReduceMana": {
          "signature": "void ReduceMana(float flAmount)",
          "description": "Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent."
        },
        "RemoveAbility": {
          "signature": "void RemoveAbility(string pszAbilityName)",
          "description": "Remove an ability from this unit by name."
        },
        "RemoveGesture": {
          "signature": "void RemoveGesture(int nActivity)",
          "description": "Remove the given gesture activity."
        },
        "RemoveHorizontalMotionController": {
          "signature": "void RemoveHorizontalMotionController(handle hBuff)",
          "description": ""
        },
        "RemoveItem": {
          "signature": "void RemoveItem(handle hItem)",
          "description": "Removes the passed item from this unit's inventory."
        },
        "RemoveModifierByName": {
          "signature": "void RemoveModifierByName(string pszScriptName)",
          "description": "Removes a modifier"
        },
        "RemoveModifierByNameAndCaster": {
          "signature": "void RemoveModifierByNameAndCaster(string pszScriptName, handle hCaster)",
          "description": "Removes a modifier that was cast by the given caster"
        },
        "RemoveNoDraw": {
          "signature": "void RemoveNoDraw()",
          "description": "Remove the no draw flag."
        },
        "RemoveVerticalMotionController": {
          "signature": "void RemoveVerticalMotionController(handle hBuff)",
          "description": ""
        },
        "RespawnUnit": {
          "signature": "void RespawnUnit()",
          "description": "Respawns the target unit if it can be respawned."
        },
        "TakeItem": {
          "signature": "void TakeItem(handle hItem)",
          "description": "Hidden item"
        },
        "SellItem": {
          "signature": "void SellItem(handle hItem)",
          "description": "Sells the passed item in this unit's inventory."
        },
        "SetAbilityByIndex": {
          "signature": "void SetAbilityByIndex(handle hAbility, int iIndex)",
          "description": "change ability index"
        },
        "SetAcquisitionRange": {
          "signature": "void SetAcquisitionRange(float nRange)",
          "description": "Sets acquisition range"
        },
        "SetAdditionalBattleMusicWeight": {
          "signature": "void SetAdditionalBattleMusicWeight(float flWeight)",
          "description": "Combat involving this creature will have this weight added to the music calcuations"
        },
        "SetAggroTarget": {
          "signature": "void SetAggroTarget(handle hAggroTarget)",
          "description": "Set this unit's aggro target to a specified unit."
        },
        "SetAttackCapability": {
          "signature": "void SetAttackCapability(int iAttackCapabilities)",
          "description": "No Description Set"
        },
        "SetAttacking": {
          "signature": "void SetAttacking(handle hAttackTarget)",
          "description": "No Description Set"
        },
        "SetBaseAttackTime": {
          "signature": "void SetBaseAttackTime(float flBaseAttackTime)",
          "description": "No Description Set"
        },
        "SetBaseDamageMax": {
          "signature": "void SetBaseDamageMax(int nMax)",
          "description": "Sets the minimum base damage."
        },
        "SetBaseDamageMin": {
          "signature": "void SetBaseDamageMin(int nMin)",
          "description": "Sets the minimum base damage."
        },
        "SetBaseHealthRegen": {
          "signature": "void SetBaseHealthRegen(float flHealthRegen)",
          "description": "No Description Set"
        },
        "SetBaseMagicalResistanceValue": {
          "signature": "void SetBaseMagicalResistanceValue(float flMagicalResistanceValue)",
          "description": "Sets base magical armor value."
        },
        "SetBaseManaRegen": {
          "signature": "void SetBaseManaRegen(float flManaRegen)",
          "description": "No Description Set"
        },
        "SetBaseMaxHealth": {
          "signature": "void SetBaseMaxHealth(float flBaseMaxHealth)",
          "description": "Set a new base max health value."
        },
        "SetBaseMoveSpeed": {
          "signature": "void SetBaseMoveSpeed(int iMoveSpeed)",
          "description": "No Description Set"
        },
        "SetCanSellItems": {
          "signature": "void SetCanSellItems(bool bCanSell)",
          "description": "Set whether or not this unit is allowed to sell items (bCanSellItems)"
        },
        "SetControllableByPlayer": {
          "signature": "void SetControllableByPlayer(int iIndex, bool bSkipAdjustingPosition)",
          "description": "Set this unit controllable by the player with the passed ID."
        },
        "SetCursorCastTarget": {
          "signature": "void SetCursorCastTarget(handle hEntity)",
          "description": "No Description Set"
        },
        "SetCursorPosition": {
          "signature": "void SetCursorPosition(Vector vLocation)",
          "description": "No Description Set"
        },
        "SetCursorTargetingNothing": {
          "signature": "void SetCursorTargetingNothing(bool bTargetingNothing)",
          "description": "No Description Set"
        },
        "SetCustomHealthLabel": {
          "signature": "void SetCustomHealthLabel(string pLabel, int r, int g, int b)",
          "description": ""
        },
        "SetDayTimeVisionRange": {
          "signature": "void SetDayTimeVisionRange(int iRange)",
          "description": "Set the base vision range."
        },
        "SetDeathXP": {
          "signature": "void SetDeathXP(int iXPBounty)",
          "description": "Set the XP bounty on this unit"
        },
        "SetForceAttackTarget": {
          "signature": "void SetForceAttackTarget(handle hNPC)",
          "description": "No Description Set"
        },
        "SetForceAttackTargetAlly": {
          "signature": "void SetForceAttackTargetAlly(handle hNPC)",
          "description": "No Description Set"
        },
        "SetHasInventory": {
          "signature": "void SetHasInventory(bool bHasInventory)",
          "description": "No Description Set"
        },
        "SetHullRadius": {
          "signature": "void SetHullRadius(float flHullRadius)",
          "description": "Set the collision hull radius of this NPC"
        },
        "SetIdleAcquire": {
          "signature": "void SetIdleAcquire(bool bIdleAcquire)",
          "description": "No Description Set"
        },
        "SetInitialGoalEntity": {
          "signature": "void SetInitialGoalEntity(handle hGoal)",
          "description": "Sets the initial waypoint goal for this NPC"
        },
        "SetMana": {
          "signature": "void SetMana(float flMana)",
          "description": "Set the mana on this unit."
        },
        "SetMaximumGoldBounty": {
          "signature": "void SetMaximumGoldBounty(int iGoldBountyMax)",
          "description": "Set the maximum gold bounty for this unit."
        },
        "SetMinimumGoldBounty": {
          "signature": "void SetMinimumGoldBounty(int iGoldBountyMin)",
          "description": "Set the minimum gold bounty for this unit."
        },
        "SetModifierStackCount": {
          "signature": "void SetModifierStackCount(string modifierName, handle hCaster, int modifierCount)",
          "description": "Sets the stack count of a given modifier."
        },
        "SetMoveCapability": {
          "signature": "void SetMoveCapability(int iMoveCapabilities)",
          "description": "No Description Set"
        },
        "SetMustReachEachGoalEntity": {
          "signature": "void SetMustReachEachGoalEntity(bool must)",
          "description": "Set whether this NPC is required to reach each goal entity, rather than being allowed to 'unkink' their path"
        },
        "SetNeverMoveToClearSpace": {
          "signature": "void SetNeverMoveToClearSpace(bool neverMoveToClearSpace)",
          "description": "If set to true, we will never attempt to move this unit to clear space, even when it unphases."
        },
        "SetNightTimeVisionRange": {
          "signature": "void SetNightTimeVisionRange(int iRange)",
          "description": "Set the base vision range."
        },
        "SetOrigin": {
          "signature": "void SetOrigin(Vector vLocation)",
          "description": "Set the unit's origin."
        },
        "SetOriginalModel": {
          "signature": "void SetOriginalModel(string originalModel)",
          "description": "Sets the original model of this entity, which it will tend to fall back to anytime its state changes"
        },
        "SetPhysicalArmorBaseValue": {
          "signature": "void SetPhysicalArmorBaseValue(float flPhysicalArmorValue)",
          "description": "Sets base physical armor value."
        },
        "SetRangedProjectileName": {
          "signature": "void SetRangedProjectileName(string pProjectileName)",
          "description": "No Description Set"
        },
        "SetRenderAlpha": {
          "signature": "void SetRenderAlpha( int alpha )",
          "description": "No Description Set"
        },
        "SetStolenScepter": {
          "signature": "void SetStolenScepter(bool bStolenScepter)",
          "description": "No Description Set"
        },
        "SetUnitCanRespawn": {
          "signature": "void SetUnitCanRespawn(bool bCanRespawn)",
          "description": "Set whether or not this unit can respawn."
        },
        "SetUnitName": {
          "signature": "void SetUnitName(string pName)",
          "description": "No Description Set"
        },
        "ShouldIdleAcquire": {
          "signature": "bool ShouldIdleAcquire()",
          "description": "No Description Set"
        },
        "SpendMana": {
          "signature": "void SpendMana(float flManaSpent, handle hAbility)",
          "description": "Spend mana from this unit, this can be used for spending mana from abilities or item usage."
        },
        "StartGesture": {
          "signature": "void StartGesture(int nActivity)",
          "description": "Add the given gesture activity."
        },
        "StartGestureWithPlaybackRate": {
          "signature": "void StartGestureWithPlaybackRate( nActivity, flRate )",
          "description": "Add the given gesture activity with custom playback rate."
        },
        "Stop": {
          "signature": "void Stop()",
          "description": "Stop the current order."
        },
        "SwapAbilities": {
          "signature": "void SwapAbilities(string pAbilityName1, string pAbilityName2, bool bEnable1, bool bEnable2)",
          "description": "Swaps the slots of the two passed abilities and sets them enabled/disabled: const char* AbilityName1, const char* AbilityName2, bool bEnable1, bool bEnable2. The boolean controls which ability is active. The ability order is never swapped when swapping abilities, only the boolean statements are flipped."
        },
        "SwapItems": {
          "signature": "void SwapItems(int nSlot1, int nSlot2)",
          "description": "Swap the contents of two item slots (slot1, slot2)"
        },
        "TimeUntilNextAttack": {
          "signature": "float TimeUntilNextAttack()",
          "description": "No Description Set"
        },
        "TriggerModifierDodge": {
          "signature": "bool TriggerModifierDodge()",
          "description": "No Description Set"
        },
        "TriggerSpellAbsorb": {
          "signature": "bool TriggerSpellAbsorb(handle hAbility)",
          "description": "Query whether the passed ability will trigger spell absorb on this unit."
        },
        "TriggerSpellReflect": {
          "signature": "void TriggerSpellReflect(handle hAbility)",
          "description": "Trigger the Lotus Orb-like effect.(hAbility)"
        },
        "UnitCanRespawn": {
          "signature": "bool UnitCanRespawn()",
          "description": "No Description Set"
        }
      },
      "extends": "CBaseFlex",
      "accessor": ""
    },
    {
      "title": "CDOTA_BaseNPC_Hero",
      "description": "'\n",
      "funcs": {
        "AddExperience": {
          "signature": "bool AddExperience(float amount, int nReason, bool bApplyBotDifficultyScaling, bool bIncrementTotal)",
          "description": "Adds experience to this unit."
        },
        "Buyback": {
          "signature": "void Buyback()",
          "description": "Spend the gold and buyback with this hero."
        },
        "CalculateStatBonus": {
          "signature": "void CalculateStatBonus()",
          "description": "Recalculate all stats after the hero gains stats."
        },
        "CanEarnGold": {
          "signature": "bool CanEarnGold()",
          "description": "Returns boolean value result of buyback gold limit time less than game time."
        },
        "ClearLastHitMultikill": {
          "signature": "void ClearLastHitMultikill()",
          "description": "Value is stored in PlayerResource."
        },
        "ClearLastHitStreak": {
          "signature": "void ClearLastHitStreak()",
          "description": "Value is stored in PlayerResource."
        },
        "ClearStreak": {
          "signature": "void ClearStreak()",
          "description": "Value is stored in PlayerResource."
        },
        "GetAbilityPoints": {
          "signature": "int GetAbilityPoints()",
          "description": "Gets the current unspent ability point's."
        },
        "GetAdditionalOwnedUnits": {
          "signature": "table GetAdditionalOwnedUnits()",
          "description": "Returns a table of all units summoned by this hero."
        },
        "GetAgility": {
          "signature": "float GetAgility()",
          "description": "Get the current agility stat of the hero."
        },
        "GetAgilityGain": {
          "signature": "float GetAgilityGain()",
          "description": "Get the agility gain of the hero when leveling up."
        },
        "GetAssists": {
          "signature": "int GetAssists()",
          "description": "Value is stored in PlayerResource."
        },
        "GetAttacker": {
          "signature": "int GetAttacker(int nIndex)",
          "description": "No Description Set"
        },
        "GetBaseAgility": {
          "signature": "float GetBaseAgility()",
          "description": "Get the base agility of a hero."
        },
        "GetBaseDamageMax": {
          "signature": "int GetBaseDamageMax()",
          "description": "Hero damage is also affected by attributes."
        },
        "GetBaseDamageMin": {
          "signature": "int GetBaseDamageMin()",
          "description": "Hero damage is also affected by attributes."
        },
        "GetBaseIntellect": {
          "signature": "float GetBaseIntellect()",
          "description": "Get the base intelligence of the hero."
        },
        "GetBaseStrength": {
          "signature": "float GetBaseStrength()",
          "description": "Get the base strength of the hero."
        },
        "GetBonusDamageFromPrimaryStat": {
          "signature": "int GetBonusDamageFromPrimaryStat()",
          "description": "No Description Set"
        },
        "GetBuybackCooldownTime": {
          "signature": "float GetBuybackCooldownTime()",
          "description": "Return float value for the amount of time left on cooldown for this hero's buyback."
        },
        "GetBuybackCost": {
          "signature": "int GetBuybackCost()",
          "description": "Return integer value for the gold cost of a buyback."
        },
        "GetBuybackGoldLimitTime": {
          "signature": "float GetBuybackGoldLimitTime()",
          "description": "Returns the amount of time gold gain is limited after buying back."
        },
        "GetCurrentXP": {
          "signature": "int GetCurrentXP()",
          "description": "Returns the amount of XP"
        },
        "GetDeathGoldCost": {
          "signature": "int GetDeathGoldCost()",
          "description": "No Description Set"
        },
        "GetDeaths": {
          "signature": "int GetDeaths()",
          "description": "Value is stored in PlayerResource."
        },
        "GetDenies": {
          "signature": "int GetDenies()",
          "description": "Value is stored in PlayerResource."
        },
        "GetGold": {
          "signature": "int GetGold()",
          "description": "Returns gold amount for the player owning this hero"
        },
        "GetGoldBounty": {
          "signature": "int GetGoldBounty()",
          "description": "No Description Set"
        },
        "GetHealthRegen": {
          "signature": "float GetHealthRegen()",
          "description": "Hero health regen is affected by attributes."
        },
        "GetIncreasedAttackSpeed": {
          "signature": "float GetIncreasedAttackSpeed()",
          "description": "Hero attack speed is also affected by agility."
        },
        "GetIntellect": {
          "signature": "float GetIntellect()",
          "description": "Get the current intelligence of the hero."
        },
        "GetIntellectGain": {
          "signature": "float GetIntellectGain()",
          "description": "Get the intelligence gain of the hero when leveling up."
        },
        "GetKills": {
          "signature": "int GetKills()",
          "description": "Value is stored in PlayerResource."
        },
        "GetLastHits": {
          "signature": "int GetLastHits()",
          "description": "Value is stored in PlayerResource."
        },
        "GetManaRegen": {
          "signature": "float GetManaRegen()",
          "description": "Hero mana regen is affected by attributes."
        },
        "GetMostRecentDamageTime": {
          "signature": "float GetMostRecentDamageTime()",
          "description": "No Description Set"
        },
        "GetMultipleKillCount": {
          "signature": "int GetMultipleKillCount()",
          "description": "No Description Set"
        },
        "GetNumAttackers": {
          "signature": "int GetNumAttackers()",
          "description": "No Description Set"
        },
        "GetNumItemsInInventory": {
          "signature": "int GetNumItemsInInventory()",
          "description": "Gets how many items does the hero holds."
        },
        "GetNumItemsInStash": {
          "signature": "int GetNumItemsInStash()",
          "description": "Gets how many items does the hero has in stash."
        },
        "GetPhysicalArmorValue": {
          "signature": "float GetPhysicalArmorValue()",
          "description": "Hero armor is affected by attributes."
        },
        "GetPlayerID": {
          "signature": "int GetPlayerID()",
          "description": "Returns player ID of the player owning this hero"
        },
        "GetPrimaryAttribute": {
          "signature": "int GetPrimaryAttribute()",
          "description": "Get the main attribute of the hero. 0 = strength, 1 = agility, 2 = intelligence."
        },
        "GetPrimaryStatValue": {
          "signature": "float GetPrimaryStatValue()",
          "description": "Returns the amount of stats points in the hero's main attribute."
        },
        "GetRespawnsDisabled": {
          "signature": "bool GetRespawnsDisabled()",
          "description": "Is this hero prevented from respawning?"
        },
        "GetRespawnTime": {
          "signature": "float GetRespawnTime()",
          "description": "No Description Set"
        },
        "GetStatsBasedManaRegen": {
          "signature": "float GetStatsBasedManaRegen()",
          "description": "Returns only the regen based on Intelligence."
        },
        "GetStreak": {
          "signature": "int GetStreak()",
          "description": "Value is stored in PlayerResource."
        },
        "GetStrength": {
          "signature": "float GetStrength()",
          "description": "No Description Set"
        },
        "GetStrengthGain": {
          "signature": "float GetStrengthGain()",
          "description": "Get the strength gain of the hero when leveling up."
        },
        "GetTimeUntilRespawn": {
          "signature": "float GetTimeUntilRespawn()",
          "description": "Get how long until the hero respawns."
        },
        "GetTogglableWearable": {
          "signature": "handle GetTogglableWearable(int nSlotType)",
          "description": "Get wearable entity in slot (slot)"
        },
        "HasAnyAvailableInventorySpace": {
          "signature": "bool HasAnyAvailableInventorySpace()",
          "description": "Returns true if the hero has at least one clear inventory space."
        },
        "HasFlyingVision": {
          "signature": "bool HasFlyingVision()",
          "description": "Returns true if the hero has flying vision."
        },
        "HasOwnerAbandoned": {
          "signature": "bool HasOwnerAbandoned()",
          "description": "Returns true if the player owning the hero has abandoned."
        },
        "HasRoomForItem": {
          "signature": "int HasRoomForItem(string pItemName, bool bIncludeStashCombines, bool bAllowSelling)",
          "description": "Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling"
        },
        "HeroLevelUp": {
          "signature": "void HeroLevelUp(bool bPlayEffects)",
          "description": "Levels up the hero, true or false to play effects."
        },
        "IncrementAssists": {
          "signature": "void IncrementAssists(int iKillerID)",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementDeaths": {
          "signature": "void IncrementDeaths(int iKillerID)",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementDenies": {
          "signature": "void IncrementDenies()",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementKills": {
          "signature": "void IncrementKills(int kills)",
          "description": "Passed ID is for the victim, killer ID is ID of the current hero. Value is stored in PlayerResource."
        },
        "IncrementLastHitMultikill": {
          "signature": "void IncrementLastHitMultikill()",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementLastHits": {
          "signature": "void IncrementLastHits()",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementLastHitStreak": {
          "signature": "void IncrementLastHitStreak()",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementNearbyCreepDeaths": {
          "signature": "void IncrementNearbyCreepDeaths()",
          "description": "Value is stored in PlayerResource."
        },
        "IncrementStreak": {
          "signature": "void IncrementStreak()",
          "description": "Value is stored in PlayerResource."
        },
        "IsBuybackDisabledByReapersScythe": {
          "signature": "bool IsBuybackDisabledByReapersScythe()",
          "description": "No Description Set"
        },
        "IsReincarnating": {
          "signature": "bool IsReincarnating()",
          "description": "No Description Set"
        },
        "KilledHero": {
          "signature": "void KilledHero(handle hHero, handle hInflictor)",
          "description": "Args: Hero, Inflictor"
        },
        "ModifyAgility": {
          "signature": "void ModifyAgility(float flNewAgility)",
          "description": "Adds passed value to base attribute value, then calls CalculateStatBonus."
        },
        "ModifyGold": {
          "signature": "int ModifyGold(int goldAmmt, bool reliable, int reason)",
          "description": "Gives this hero some gold. Args: int nGoldChange, bool bReliable, int reason"
        },
        "ModifyIntellect": {
          "signature": "void ModifyIntellect(float flNewIntellect)",
          "description": "Adds passed value to base attribute value, then calls CalculateStatBonus."
        },
        "ModifyStrength": {
          "signature": "void ModifyStrength(float flNewStrength)",
          "description": "Adds passed value to base attribute value, then calls CalculateStatBonus."
        },
        "PerformTaunt": {
          "signature": "void PerformTaunt()",
          "description": "No Description Set"
        },
        "RecordLastHit": {
          "signature": "void RecordLastHit()",
          "description": "No Description Set"
        },
        "RespawnHero": {
          "signature": "void RespawnHero(bool buyback, bool IsActuallyBeingSpawnedForTheFirstTime, bool RespawnPenalty)",
          "description": "Respawn this hero."
        },
        "SetAbilityPoints": {
          "signature": "void SetAbilityPoints(int iPoints)",
          "description": "Sets the current unspent ability point's."
        },
        "SetBaseAgility": {
          "signature": "void SetBaseAgility(float flAgility)",
          "description": "Sets the base agility points for this hero."
        },
        "SetBaseIntellect": {
          "signature": "void SetBaseIntellect(float flIntellect)",
          "description": "Sets the base intelligence points for this hero."
        },
        "SetBaseStrength": {
          "signature": "void SetBaseStrength(float flStrength)",
          "description": "Sets the base strength points for this hero."
        },
        "SetBotDifficulty": {
          "signature": "void SetBotDifficulty(int nDifficulty)",
          "description": "Sets the bot's difficulty level (0 = passive, 1 = easy, 2 = medium, 3 = hard, 4 = unfair)"
        },
        "SetBuybackCooldownTime": {
          "signature": "void SetBuybackCooldownTime(float flTime)",
          "description": "Sets the buyback cooldown time."
        },
        "SetBuyBackDisabledByReapersScythe": {
          "signature": "void SetBuyBackDisabledByReapersScythe(bool bBuybackDisabled)",
          "description": "Set whether this hero can buyback."
        },
        "SetBuybackGoldLimitTime": {
          "signature": "void SetBuybackGoldLimitTime(float flTime)",
          "description": "Set the amount of time gold gain is limited after buying back."
        },
        "SetCustomDeathXP": {
          "signature": "void SetCustomDeathXP(int iValue)",
          "description": "Sets a custom experience value for this hero.  Tip:GameRules boolean must be set for this to work!"
        },
        "SetGold": {
          "signature": "void SetGold(int amount, bool reliableGold)",
          "description": "Sets the gold amount for the player owning this hero"
        },
        "SetPlayerID": {
          "signature": "void SetPlayerID(int iPlayerID)",
          "description": "Set the player's ID."
        },
        "SetPrimaryAttribute": {
          "signature": "void SetPrimaryAttribute(int nPrimaryAttribute)",
          "description": "Set this hero's primary attribute value."
        },
        "SetRespawnPosition": {
          "signature": "void SetRespawnPosition(Vector vOrigin)",
          "description": "Set the location where the hero will respawn."
        },
        "SetRespawnsDisabled": {
          "signature": "void SetRespawnsDisabled(bool bDisableRespawns)",
          "description": "Prevent this hero from respawning."
        },
        "SetTimeUntilRespawn": {
          "signature": "void SetTimeUntilRespawn(float time)",
          "description": "Set the time remaining until the hero respawns."
        },
        "ShouldDoFlyHeightVisual": {
          "signature": "bool ShouldDoFlyHeightVisual()",
          "description": "No Description Set"
        },
        "SpendGold": {
          "signature": "void SpendGold(int amount, int reason)",
          "description": "Args: int nGold, int nReason"
        },
        "UnitCanRespawn": {
          "signature": "bool UnitCanRespawn()",
          "description": "No Description Set"
        },
        "UpgradeAbility": {
          "signature": "void UpgradeAbility(handle hAbility)",
          "description": "This upgrades the passed ability if it exists and the hero has enough ability point's."
        },
        "WillReincarnate": {
          "signature": "bool WillReincarnate()",
          "description": "No Description Set"
        }
      },
      "extends": "CDOTA_BaseNPC",
      "accessor": ""
    },
    {
      "title": "CDOTA_BaseNPC_Creature",
      "description": "",
      "funcs": {
        "AddItemDrop": {
          "signature": "void AddItemDrop(handle hDropData)",
          "description": "Add the specified item drop to this creature"
        },
        "CreatureLevelUp": {
          "signature": "void CreatureLevelUp(int iLevels)",
          "description": "Level the creature up by the specified number of levels"
        },
        "IsChampion": {
          "signature": "bool IsChampion()",
          "description": "Is this unit a champion?"
        },
        "SetArmorGain": {
          "signature": "void SetArmorGain(float flArmorGain)",
          "description": "Set the armor gained per level on this creature."
        },
        "SetAttackTimeGain": {
          "signature": "void SetAttackTimeGain(float flAttackTimeGain)",
          "description": "Set the attack time gained per level on this creature."
        },
        "SetBountyGain": {
          "signature": "void SetBountyGain(int nBountyGain)",
          "description": "Set the bounty gold gained per level on this creature."
        },
        "SetChampion": {
          "signature": "void SetChampion(bool bIsChampion)",
          "description": "Flag this unit as a champion creature."
        },
        "SetDamageGain": {
          "signature": "void SetDamageGain(int nDamageGain)",
          "description": "Set the damage gained per level on this creature."
        },
        "SetDisableResistanceGain": {
          "signature": "void SetDisableResistanceGain(float flDisableResistanceGain)",
          "description": "Set the disable resistance gained per level on this creature."
        },
        "SetHPGain": {
          "signature": "void SetHPGain(int nHPGain)",
          "description": "Set the hit point's gained per level on this creature."
        },
        "SetHPRegenGain": {
          "signature": "void SetHPRegenGain(float flHPRegenGain)",
          "description": "Set the hit point's regen gained per level on this creature."
        },
        "SetMagicResistanceGain": {
          "signature": "void SetMagicResistanceGain(float flMagicResistanceGain)",
          "description": "Set the magic resistance gained per level on this creature."
        },
        "SetManaGain": {
          "signature": "void SetManaGain(int nManaGain)",
          "description": "Set the mana point's gained per level on this creature."
        },
        "SetManaRegenGain": {
          "signature": "void SetManaRegenGain(float flManaRegenGain)",
          "description": "Set the mana point's regen gained per level on this creature."
        },
        "SetMoveSpeedGain": {
          "signature": "void SetMoveSpeedGain(int nMoveSpeedGain)",
          "description": "Set the move speed gained per level on this creature."
        },
        "SetXPGain": {
          "signature": "void SetXPGain(int nXPGain)",
          "description": "Set the xp reward gained per level on this creature."
        }
      },
      "extends": "CDOTA_BaseNPC",
      "accessor": ""
    },
    {
      "title": "CDOTA_BaseNPC_Building",
      "description": "",
      "funcs": {
        "GetInvulnCount": {
          "signature": "int GetInvulnCount()",
          "description": "Get the invulnerability count for a building."
        },
        "SetInvulnCount": {
          "signature": "void SetInvulnCount(int nInvulnCount)",
          "description": "Set the invulnerability counter of this building."
        }
      },
      "extends": "CDOTA_BaseNPC",
      "accessor": ""
    },
    {
      "title": "CDOTABaseGameMode",
      "description": "",
      "funcs": {
        "ClearAbilityTuningValueFilter": {
          "signature": "void ClearAbilityTuningValueFilter()",
          "description": "Clear the script filter that controls the tuning values abilities use."
        },
        "ClearBountyRunePickupFilter": {
          "signature": "void ClearBountyRunePickupFilter()",
          "description": "Clear the script filter that controls bounty rune pickup behavior."
        },
        "ClearDamageFilter": {
          "signature": "void ClearDamageFilter()",
          "description": "Clear the script filter that controls how a unit takes damage."
        },
        "ClearExecuteOrderFilter": {
          "signature": "void ClearExecuteOrderFilter()",
          "description": "Clear the script filter that controls when a unit picks up an item."
        },
        "ClearItemAddedToInventoryFilter": {
          "signature": "void ClearItemAddedToInventoryFilter()",
          "description": "Clear the script filter that controls when a unit add an item to inventory."
        },
        "ClearModifierGainedFilter": {
          "signature": "void ClearModifierGainedFilter()",
          "description": "Clear the script filter that controls the modifier filter."
        },
        "ClearModifyExperienceFilter": {
          "signature": "void ClearModifyExperienceFilter()",
          "description": "Clear the script filter that controls how hero experience is modified."
        },
        "ClearModifyGoldFilter": {
          "signature": "void ClearModifyGoldFilter()",
          "description": "Clear the script filter that controls how hero gold is modified."
        },
        "ClearRuneSpawnFilter": {
          "signature": "void ClearRuneSpawnFilter()",
          "description": "Clear the script filter that controls what rune spawns."
        },
        "ClearTrackingProjectileFilter": {
          "signature": "void ClearTrackingProjectileFilter()",
          "description": "Clear the script filter that controls when tracking projectiles are launched."
        },
        "ClientLoadGridNav": {
          "signature": "void ClientLoadGridNav()",
          "description": "Tell clients that they need to load gridnav information. Used for things like allowing clients to identify valid locations to place buildings."
        },
        "GetAlwaysShowPlayerNames": {
          "signature": "bool GetAlwaysShowPlayerNames()",
          "description": "No Description Set"
        },
        "GetAlwaysShowPlayerInventory": {
          "signature": "bool GetAlwaysShowPlayerInventory()",
          "description": "Show the player hero's inventory in the HUD, regardless of what unit is selected."
        },
        "GetAnnouncerDisabled": {
          "signature": "bool GetAnnouncerDisabled()",
          "description": "Are in-game announcers disabled?"
        },
        "GetCameraDistanceOverride": {
          "signature": "float GetCameraDistanceOverride()",
          "description": "Set a different camera distance; dota default is 1134."
        },
        "GetCustomBuybackCooldownEnabled": {
          "signature": "bool GetCustomBuybackCooldownEnabled()",
          "description": "Turns on capability to define custom buyback cooldowns."
        },
        "GetCustomBuybackCostEnabled": {
          "signature": "bool GetCustomBuybackCostEnabled()",
          "description": "Turns on capability to define custom buyback costs."
        },
        "GetCustomHeroMaxLevel": {
          "signature": "int GetCustomHeroMaxLevel()",
          "description": "Allows definition of the max level heroes can achieve (default is 25)."
        },
        "GetFixedRespawnTime": {
          "signature": "float GetFixedRespawnTime()",
          "description": "Gets the fixed respawn time."
        },
        "GetFogOfWarDisabled": {
          "signature": "bool GetFogOfWarDisabled()",
          "description": "Turn the fog of war on or off."
        },
        "GetGoldSoundDisabled": {
          "signature": "bool GetGoldSoundDisabled()",
          "description": "Turn the sound when gold is acquired off/on."
        },
        "GetMaximumAttackSpeed": {
          "signature": "int GetMaximumAttackSpeed()",
          "description": "Get the maximum attack speed for units."
        },
        "GetMinimumAttackSpeed": {
          "signature": "int GetMinimumAttackSpeed()",
          "description": "Get the minimum attack speed for units."
        },
        "GetRecommendedItemsDisabled": {
          "signature": "bool GetRecommendedItemsDisabled()",
          "description": "Turn the panel for showing recommended items at the shop off/on."
        },
        "GetStashPurchasingDisabled": {
          "signature": "bool GetStashPurchasingDisabled()",
          "description": "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
        },
        "GetStickyItemDisabled": {
          "signature": "bool GetStickyItemDisabled()",
          "description": "Hide the sticky item in the quickbuy."
        },
        "GetTopBarTeamValuesOverride": {
          "signature": "bool GetTopBarTeamValuesOverride()",
          "description": "Override the values of the team values on the top game bar."
        },
        "GetTopBarTeamValuesVisible": {
          "signature": "bool GetTopBarTeamValuesVisible()",
          "description": "Turning on/off the team values on the top game bar."
        },
        "GetTowerBackdoorProtectionEnabled": {
          "signature": "bool GetTowerBackdoorProtectionEnabled()",
          "description": "Enables/Disables tower backdoor protection."
        },
        "GetUseCustomHeroLevels": {
          "signature": "bool GetUseCustomHeroLevels()",
          "description": "Are custom-defined XP values for hero level ups in use?"
        },
        "IsBuybackEnabled": {
          "signature": "bool IsBuybackEnabled()",
          "description": "Enables or disables buyback completely."
        },
        "SetAbilityTuningValueFilter": {
          "signature": "void SetAbilityTuningValueFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)"
        },
        "SetAlwaysShowPlayerNames": {
          "signature": "void SetAlwaysShowPlayerNames(bool bShow)",
          "description": "No Description Set"
        },
        "SetAlwaysShowPlayerInventory": {
          "signature": "void SetAlwaysShowPlayerInventory(bool bAlwaysShow)",
          "description": "Show the player hero's inventory in the HUD, regardless of what unit is selected."
        },
        "SetAnnouncerDisabled": {
          "signature": "void SetAnnouncerDisabled(bool enabled)",
          "description": "Disables the dota announcer"
        },
        "SetBotsAlwaysPushWithHuman": {
          "signature": "void SetBotsAlwaysPushWithHuman(bool bAlwaysPush)",
          "description": "Set if the bots should try their best to push with a human player."
        },
        "SetBotsInLateGame": {
          "signature": "void SetBotsInLateGame(bool bLateGame)",
          "description": "Set if bots should enable their late game behavior."
        },
        "SetBotsMaxPushTier": {
          "signature": "void SetBotsMaxPushTier(int nMaxTier)",
          "description": "Set the max tier of tower that bots want to push. (-1 to disable)"
        },
        "SetBotThinkingEnabled": {
          "signature": "void SetBotThinkingEnabled(bool bEnabled)",
          "description": "Enables/Disables bot thinking. Requires a very Dota PvP-like map with 3 lanes, a shop, etc."
        },
        "SetBountyRunePickupFilter": {
          "signature": "void SetBountyRunePickupFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetBuybackEnabled": {
          "signature": "void SetBuybackEnabled(bool bEnabled)",
          "description": "Enables or disables buyback completely"
        },
        "SetCameraDistanceOverride": {
          "signature": "void SetCameraDistanceOverride(float flCameraDistanceOverride)",
          "description": "Set a different camera distance; dota default is 1134."
        },
        "SetCustomBuybackCooldownEnabled": {
          "signature": "void SetCustomBuybackCooldownEnabled(bool bEnabled)",
          "description": "Turns on capability to define custom buyback cooldowns."
        },
        "SetCustomBuybackCostEnabled": {
          "signature": "void SetCustomBuybackCostEnabled(bool bEnabled)",
          "description": "Turns on capability to define custom buyback costs."
        },
        "SetCustomGameForceHero": {
          "signature": "void SetCustomGameForceHero(string pHeroName)",
          "description": "Force single-player hero selection."
        },
        "SetCustomHeroMaxLevel": {
          "signature": "void SetCustomHeroMaxLevel(int maxLevel)",
          "description": "[Deprecated] Allows definition of the max level heroes can achieve (default is 25)."
        },
        "SetCustomXPRequiredToReachNextLevel": {
          "signature": "void SetCustomXPRequiredToReachNextLevel(handle hTable)",
          "description": "Allows definition of a table of hero XP values."
        },
        "SetDamageFilter": {
          "signature": "void SetDamageFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetExecuteOrderFilter": {
          "signature": "void SetExecuteOrderFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetFixedRespawnTime": {
          "signature": "void SetFixedRespawnTime(float time)",
          "description": "Sets the dota respawn time.  -1 for default behavior"
        },
        "SetFogOfWarDisabled": {
          "signature": "void SetFogOfWarDisabled(bool bDisabled)",
          "description": "Turn the fog of war on or off."
        },
        "SetFountainConstantManaRegen": {
          "signature": "void SetFountainConstantManaRegen(float flConstantManaRegen)",
          "description": "Set the constant rate that the fountain will regen mana. (-1 for default)"
        },
        "SetFountainPercentageHealthRegen": {
          "signature": "void SetFountainPercentageHealthRegen(float flPercentageHealthRegen)",
          "description": "Set the percentage rate that the fountain will regen health. (-1 for default)"
        },
        "SetFountainPercentageManaRegen": {
          "signature": "void SetFountainPercentageManaRegen(float flPercentageManaRegen)",
          "description": "Set the percentage rate that the fountain will regen mana. (-1 for default)"
        },
        "SetGoldSoundDisabled": {
          "signature": "void SetGoldSoundDisabled(bool bDisabled)",
          "description": "Turn the sound when gold is acquired off/on. Takes a bool."
        },
        "SetHUDVisible": {
          "signature": "void SetHUDVisible(int iHUDElement, bool bVisible)",
          "description": "Set the HUD element visibility."
        },
        "SetItemAddedToInventoryFilter": {
          "signature": "void SetItemAddedToInventoryFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control when a unit add an item to inventory."
        },
        "SetLoseGoldOnDeath": {
          "signature": "void SetLoseGoldOnDeath(bool bEnabled)",
          "description": "Use to disable gold loss on death."
        },
        "SetMaximumAttackSpeed": {
          "signature": "void SetMaximumAttackSpeed(int nMaxSpeed)",
          "description": "Set the maximum attack speed for units."
        },
        "SetMinimumAttackSpeed": {
          "signature": "void SetMinimumAttackSpeed(int nMinSpeed)",
          "description": "Set the minimum attack speed for units."
        },
        "SetModifierGainedFilter": {
          "signature": "void SetModifierGainedFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control modifiers that are gained, return false to destroy modifier."
        },
        "SetModifyExperienceFilter": {
          "signature": "void SetModifyExperienceFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetModifyGoldFilter": {
          "signature": "void SetModifyGoldFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetOverrideSelectionEntity": {
          "signature": "void SetOverrideSelectionEntity(handle unit)",
          "description": "Set an override for the default selection entity, instead of each player's hero."
        },
        "SetPauseEnabled": {
          "signature": "void SetPauseEnabled(bool bPause)",
          "description": "Allow/Disallow players to pause the game."
        },
        "SetRecommendedItemsDisabled": {
          "signature": "void SetRecommendedItemsDisabled(bool bDisabled)",
          "description": "Turn the panel for showing recommended items at the shop off/on. Takes a bool."
        },
        "SetRemoveIllusionsOnDeath": {
          "signature": "void SetRemoveIllusionsOnDeath(bool bRemove)",
          "description": "Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds."
        },
        "SetRuneEnabled": {
          "signature": "void SetRuneEnabled(int nRune, bool bEnabled)",
          "description": "Set if a given type of rune is enabled."
        },
        "SetRuneSpawnFilter": {
          "signature": "void SetRuneSpawnFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetStashPurchasingDisabled": {
          "signature": "void SetStashPurchasingDisabled(bool bDisabled)",
          "description": "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
        },
        "SetStickyItemDisabled": {
          "signature": "void SetStickyItemDisabled(bool bDisabled)",
          "description": "Hide the sticky item in the quickbuy."
        },
        "SetTopBarTeamValue": {
          "signature": "void SetTopBarTeamValue(int iTeam, int nValue)",
          "description": "Set the team values on the top game bar."
        },
        "SetTopBarTeamValuesOverride": {
          "signature": "void SetTopBarTeamValuesOverride(bool bOverride)",
          "description": "Override the values of the team values on the top game bar."
        },
        "SetTopBarTeamValuesVisible": {
          "signature": "void SetTopBarTeamValuesVisible(bool bVisible)",
          "description": "Turning on/off the team values on the top game bar."
        },
        "SetTowerBackdoorProtectionEnabled": {
          "signature": "void SetTowerBackdoorProtectionEnabled(bool bEnabled)",
          "description": "Enables/Disables tower backdoor protection"
        },
        "SetTrackingProjectileFilter": {
          "signature": "void SetTrackingProjectileFilter(handle hFunction, handle hContext)",
          "description": "Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)"
        },
        "SetUnseenFogOfWarEnabled": {
          "signature": "void SetUnseenFogOfWarEnabled(bool bEnabled)",
          "description": "Enable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war."
        },
        "SetUseCustomHeroLevels": {
          "signature": "void SetUseCustomHeroLevels(bool bEnabled)",
          "description": "Turn on custom-defined XP values for hero level ups. The table should be defined before switching this on."
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDotaQuest",
      "description": "A quest, as seen in the Tutorial and Frostivus. WARNING: Quest system is deprecated since 7.00 and will NOT work",
      "funcs": {
        "AddSubquest": {
          "signature": "void AddSubquest(handle hSubquest)",
          "description": "Add a subquest to this quest"
        },
        "CompleteQuest": {
          "signature": "void CompleteQuest()",
          "description": "Mark this quest complete"
        },
        "GetSubquest": {
          "signature": "handle GetSubquest(int nIndex)",
          "description": "Finds a subquest from this quest by index"
        },
        "GetSubquestByName": {
          "signature": "handle GetSubquestByName(string pszName)",
          "description": "Finds a subquest from this quest by name"
        },
        "RemoveSubquest": {
          "signature": "void RemoveSubquest(handle hSubquest)",
          "description": "Remove a subquest from this quest"
        },
        "SetTextReplaceString": {
          "signature": "void SetTextReplaceString(string pszString)",
          "description": "Set the text replace string for this quest"
        },
        "SetTextReplaceValue": {
          "signature": "void SetTextReplaceValue(int valueSlot, int value)",
          "description": "Set a quest value"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDotaSubquestBase",
      "description": "",
      "funcs": {
        "CompleteSubquest": {
          "signature": "void CompleteSubquest()",
          "description": "Mark this subquest complete"
        },
        "SetTextReplaceString": {
          "signature": "void SetTextReplaceString(string pszString)",
          "description": "Set the text replace string for this subquest"
        },
        "SetTextReplaceValue": {
          "signature": "void SetTextReplaceValue(int valueSlot, int value)",
          "description": "Set a subquest value"
        }
      },
      "extends": "CDotaQuest",
      "accessor": ""
    },
    {
      "title": "CPhysicsComponent",
      "description": "",
      "funcs": {
        "ExpensiveInstantRayCast": {
          "signature": "bool ExpensiveInstantRayCast(Vector Vector_1, Vector Vector_2, handle handle_3)",
          "description": "Do an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Don't plan to use this for real!"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CPointTemplate",
      "description": "",
      "funcs": {
        "DeleteCreatedSpawnGroups": {
          "signature": "void DeleteCreatedSpawnGroups()",
          "description": "DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
        },
        "ForceSpawn": {
          "signature": "void ForceSpawn()",
          "description": "ForceSpawn() : Spawns all of the entities the point_template is pointing at."
        },
        "GetSpawnedEntities": {
          "signature": "handle GetSpawnedEntities()",
          "description": "GetSpawnedEntities() : Get the list of the most recent spawned entities"
        },
        "SetSpawnCallback": {
          "signature": "void SetSpawnCallback(handle hCallbackFunc, handle hCallbackScope)",
          "description": "SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array."
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CBodyComponent",
      "description": "",
      "funcs": {
        "AddImpulseAtPosition": {
          "signature": "void AddImpulseAtPosition(Vector Vector_1, Vector Vector_2)",
          "description": "Apply an impulse at a worldspace position to the physics"
        },
        "AddVelocity": {
          "signature": "void AddVelocity(Vector Vector_1, Vector Vector_2)",
          "description": "Add linear and angular velocity to the physics object"
        },
        "DetachFromParent": {
          "signature": "void DetachFromParent()",
          "description": "Detach from its parent"
        },
        "GetSequence": {
          "signature": "<unknown> GetSequence()",
          "description": "Returns the active sequence"
        },
        "IsAttachedToParent": {
          "signature": "bool IsAttachedToParent()",
          "description": "Is attached to parent"
        },
        "LookupSequence": {
          "signature": "<unknown> LookupSequence(string string_1)",
          "description": "Returns a sequence id given a name"
        },
        "SequenceDuration": {
          "signature": "float SequenceDuration(string string_1)",
          "description": "Returns the duration in seconds of the specified sequence"
        },
        "SetAngularVelocity": {
          "signature": "void SetAngularVelocity(Vector Vector_1)",
          "description": "No Description Set"
        },
        "SetAnimation": {
          "signature": "void SetAnimation(string string_1)",
          "description": "Pass string for the animation to play on this model"
        },
        "SetBodyGroup": {
          "signature": "void SetBodyGroup(string string_1)",
          "description": "No Description Set"
        },
        "SetMaterialGroup": {
          "signature": "void SetMaterialGroup(utlstringtoken utlstringtoken_1)",
          "description": "No Description Set"
        },
        "SetVelocity": {
          "signature": "void SetVelocity(Vector velocity)",
          "description": "No Description Set"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CBaseAnimating",
      "description": "A class containing functions involved in animations",
      "funcs": {
        "GetAttachmentAngles": {
          "signature": "Vector GetAttachmentAngles(int iAttachment)",
          "description": "Get the attachement id's angles as a p,y,r vector"
        },
        "GetAttachmentOrigin": {
          "signature": "Vector GetAttachmentOrigin(int iAttachment)",
          "description": "Get the attachement id's origin vector"
        },
        "GetModelScale": {
          "signature": "float GetModelScale()",
          "description": "Get scale of entity's model."
        },
        "IsSequenceFinished": {
          "signature": "bool IsSequenceFinished()",
          "description": "Ask whether the main sequence is done playing"
        },
        "ScriptLookupAttachment": {
          "signature": "int ScriptLookupAttachment(string pAttachmentName)",
          "description": "Get the named attachment id"
        },
        "SetBodygroup": {
          "signature": "void SetBodygroup(int iGroup, int iValue)",
          "description": "Sets a bodygroup"
        },
        "SetModelScale": {
          "signature": "void SetModelScale(float scale)",
          "description": "Sets the model's scale to scale, so if a unit had its model scale at 1, and you use SetModelScale(10.0), it would set the scale to 10.0."
        },
        "SetPoseParameter": {
          "signature": "float SetPoseParameter(string szName, float fValue)",
          "description": "Set the specified pose parameter to the specified value"
        },
        "SetSkin": {
          "signature": "void SetSkin(int iSkin)",
          "description": "No Description Set"
        },
        "StopAnimation": {
          "signature": "void StopAnimation()",
          "description": "Stop the current animation by setting playback rate to 0.0."
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CBaseCombatCharacter",
      "description": "",
      "funcs": {
        "GetEquippedWeapons": {
          "signature": "table GetEquippedWeapons()",
          "description": "GetEquippedWeapons() : Returns an array of all the equipped weapons"
        },
        "GetWeaponCount": {
          "signature": "int GetWeaponCount()",
          "description": "GetWeaponCount() : Gets the number of weapons currently equipped"
        },
        "ShootPosition": {
          "signature": "Vector ShootPosition(int nHand)",
          "description": "Returns the shoot position eyes (or hand in VR)."
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "ProjectileManager",
      "description": "The projectile manager, it manages projectiles.",
      "funcs": {
        "ChangeTrackingProjectileSpeed": {
          "signature": "void ChangeTrackingProjectileSpeed(handle hAbility, int Speed)",
          "description": "Update speed"
        },
        "CreateLinearProjectile": {
          "signature": "int CreateLinearProjectile(table infoTable)",
          "description": "Creates a linear projectile and returns the projectile ID"
        },
        "CreateTrackingProjectile": {
          "signature": "void CreateTrackingProjectile(handle handle_1)",
          "description": "Creates a tracking projectile"
        },
        "DestroyLinearProjectile": {
          "signature": "void DestroyLinearProjectile(int int_1)",
          "description": "Destroys the linear projectile matching the argument ID"
        },
        "GetLinearProjectileVelocity": {
          "signature": "Vector GetLinearProjectileVelocity(int int_1)",
          "description": "Returns a vector representing the current velocity of the projectile."
        },
        "ProjectileDodge": {
          "signature": "void ProjectileDodge(handle handle_1)",
          "description": "Makes the specified unit dodge projectiles"
        }
      },
      "extends": "",
      "accessor": "ProjectileManager"
    },
    {
      "title": "CBaseTrigger",
      "description": "",
      "funcs": {
        "Disable": {
          "signature": "void Disable()",
          "description": "Disable the trigger"
        },
        "Enable": {
          "signature": "void Enable()",
          "description": "Enable the trigger"
        },
        "IsTouching": {
          "signature": "bool IsTouching(handle hEnt)",
          "description": "Checks whether the passed entity is touching the trigger."
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CEnvEntityMaker",
      "description": "",
      "funcs": {
        "SpawnEntity": {
          "signature": "void SpawnEntity()",
          "description": "Create an entity at the location of the maker"
        },
        "SpawnEntityAtEntityOrigin": {
          "signature": "void SpawnEntityAtEntityOrigin(handle hEntity)",
          "description": "Create an entity at the location of a specified entity instance"
        },
        "SpawnEntityAtLocation": {
          "signature": "void SpawnEntityAtLocation(Vector vecAlternateOrigin, Vector vecAlternateAngles)",
          "description": "Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
        },
        "SpawnEntityAtNamedEntityOrigin": {
          "signature": "void SpawnEntityAtNamedEntityOrigin(string pszName)",
          "description": "Create an entity at the location of a named entity"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDOTAVoteSystem",
      "description": "",
      "funcs": {
        "StartVote": {
          "signature": "void StartVote(handle handle_1)",
          "description": "Starts a vote, based upon a table of parameters"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CMarkupVolumeTagged",
      "description": "",
      "funcs": {
        "HasTag": {
          "signature": "bool HasTag(string pszTagName)",
          "description": "Does this volume have the given tag."
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CScriptPrecacheContext",
      "description": "",
      "funcs": {
        "AddResource": {
          "signature": "void AddResource(string string_1)",
          "description": "Precaches a specific resource"
        },
        "GetValue": {
          "signature": "table GetValue(string string_1)",
          "description": "Reads a spawn key"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CScriptKeyValues",
      "description": "",
      "funcs": {
        "GetValue": {
          "signature": "table GetValue(string string_1)",
          "description": "Reads a spawn key"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CScriptParticleManager",
      "description": "",
      "funcs": {
        "CreateParticle": {
          "signature": "int CreateParticle(string particleName, int particleAttach, handle owningEntity)",
          "description": "Creates a new particle effect"
        },
        "CreateParticleForPlayer": {
          "signature": "int CreateParticleForPlayer(string particleName, int particleAttach, handle owningEntity, handle owningPlayer)",
          "description": "Creates a new particle effect that only plays for the specified player"
        },
        "CreateParticleForTeam": {
          "signature": "int CreateParticleForTeam(string string_1, int int_2, handle handle_3, int int_4)",
          "description": "Creates a new particle effect that only plays for the specified team"
        },
        "DestroyParticle": {
          "signature": "void DestroyParticle(int particleID, bool immediately)",
          "description": "Destroys particle."
        },
        "GetParticleReplacement": {
          "signature": "string GetParticleReplacement(string string_1, handle handle_2)",
          "description": "No Description Set"
        },
        "ReleaseParticleIndex": {
          "signature": "void ReleaseParticleIndex(int particleId)",
          "description": "Frees the specified particle index"
        },
        "SetParticleAlwaysSimulate": {
          "signature": "void SetParticleAlwaysSimulate(int int_1)",
          "description": "No Description Set"
        },
        "SetParticleControl": {
          "signature": "void SetParticleControl(int particleId, int controlIndex, Vector controlData)",
          "description": "Set the control point data for a control on a particle effect"
        },
        "SetParticleControlEnt": {
          "signature": "void SetParticleControlEnt(int int_1, int int_2, handle handle_3, int int_4, string string_5, Vector Vector_6, bool bool_7)",
          "description": "No Description Set"
        },
        "SetParticleControlForward": {
          "signature": "void SetParticleControlForward(int int_1, int int_2, Vector Vector_3)",
          "description": "(int nFXIndex, int nPoint, vForward)"
        },
        "SetParticleControlOrientation": {
          "signature": "void SetParticleControlOrientation(int int_1, int int_2, Vector Vector_3, Vector Vector_4, Vector Vector_5)",
          "description": "(int nFXIndex, int nPoint, vForward, vRight, vUp)"
        }
      },
      "extends": "",
      "accessor": "ParticleManager"
    },
    {
      "title": "CScriptHeroList",
      "description": "",
      "funcs": {
        "GetAllHeroes": {
          "signature": "table GetAllHeroes()",
          "description": "Returns all the heroes in the world"
        },
        "GetHero": {
          "signature": "handle GetHero(int heroId)",
          "description": "Get the Nth hero in the Hero List"
        },
        "GetHeroCount": {
          "signature": "int GetHeroCount()",
          "description": "Returns the number of heroes in the world"
        }
      },
      "extends": "",
      "accessor": "HeroList"
    },
    {
      "title": "CNativeOutputs",
      "description": "",
      "funcs": {
        "AddOutput": {
          "signature": "void AddOutput(string string_1, string string_2)",
          "description": "Add an output"
        },
        "Init": {
          "signature": "void Init(int int_1)",
          "description": "Initialize with number of outputs"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CEnvProjectedTexture",
      "description": "",
      "funcs": {
        "SetFarRange": {
          "signature": "void SetFarRange(float flRange)",
          "description": "Set light maximum range"
        },
        "SetLinearAttenuation": {
          "signature": "void SetLinearAttenuation(float flAtten)",
          "description": "Set light linear attenuation value"
        },
        "SetNearRange": {
          "signature": "void SetNearRange(float flRange)",
          "description": "Set light minimum range"
        },
        "SetQuadraticAttenuation": {
          "signature": "void SetQuadraticAttenuation(float flAtten)",
          "description": "Set light quadratic attenuation value"
        },
        "SetVolumetrics": {
          "signature": "void SetVolumetrics(bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset)",
          "description": "Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CInfoData",
      "description": "",
      "funcs": {
        "QueryColor": {
          "signature": "Vector QueryColor(utlstringtoken tok, Vector vDefault)",
          "description": "Query color data for this key"
        },
        "QueryFloat": {
          "signature": "float QueryFloat(utlstringtoken tok, float flDefault)",
          "description": "Query float data for this key"
        },
        "QueryInt": {
          "signature": "int QueryInt(utlstringtoken tok, int nDefault)",
          "description": "Query int data for this key"
        },
        "QueryNumber": {
          "signature": "float QueryNumber(utlstringtoken tok, float flDefault)",
          "description": "Query number data for this key"
        },
        "QueryString": {
          "signature": "string QueryString(utlstringtoken tok, string pDefault)",
          "description": "Query string data for this key"
        },
        "QueryVector": {
          "signature": "Vector QueryVector(utlstringtoken tok, Vector vDefault)",
          "description": "Query vector data for this key"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CPhysicsProp",
      "description": "",
      "funcs": {
        "DisableMotion": {
          "signature": "void DisableMotion()",
          "description": "Enable motion for the prop"
        },
        "EnableMotion": {
          "signature": "void EnableMotion()",
          "description": "Enable motion for the prop"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CDOTAGamerules",
      "description": "",
      "funcs": {
        "AddMinimapDebugPoint": {
          "signature": "void AddMinimapDebugPoint(int int_1, Vector Vector_2, int int_3, int int_4, int int_5, int int_6, float float_7)",
          "description": "Add a point on the minimap."
        },
        "AddMinimapDebugPointForTeam": {
          "signature": "void AddMinimapDebugPointForTeam(int int_1, Vector Vector_2, int int_3, int int_4, int int_5, int int_6, float float_7, int int_8)",
          "description": "Add a point on the minimap for a specific team."
        },
        "BeginNightstalkerNight": {
          "signature": "void BeginNightstalkerNight(float duration)",
          "description": "Begin a temporary Nightstalker night."
        },
        "BeginTemporaryNight": {
          "signature": "void BeginTemporaryNight(float duration)",
          "description": "Begin a temporary night."
        },
        "Defeated": {
          "signature": "void Defeated()",
          "description": "Kills the ancient, etc."
        },
        "DidMatchSignoutTimeOut": {
          "signature": "bool DidMatchSignoutTimeOut()",
          "description": "true when we have waited some time after end of the game and not received signout"
        },
        "EnableCustomGameSetupAutoLaunch": {
          "signature": "void EnableCustomGameSetupAutoLaunch(bool bool_1)",
          "description": "Enabled (true) or disable (false) auto launch for custom game setup."
        },
        "FinishCustomGameSetup": {
          "signature": "void FinishCustomGameSetup()",
          "description": "Indicate that the custom game setup phase is complete, and advance to the game."
        },
        "GetCustomGameDifficulty": {
          "signature": "int GetCustomGameDifficulty()",
          "description": "Returns the difficulty level of the custom game mode"
        },
        "GetCustomGameTeamMaxPlayers": {
          "signature": "int GetCustomGameTeamMaxPlayers(int int_1)",
          "description": "Get whether a team is selectable during game setup"
        },
        "GetDifficulty": {
          "signature": "int GetDifficulty()",
          "description": "Returns difficulty level of the custom game mode"
        },
        "GetDOTATime": {
          "signature": "float GetDOTATime(bool bool_1, bool bool_2)",
          "description": "(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time."
        },
        "GetDroppedItem": {
          "signature": "handle GetDroppedItem(int dropIndex)",
          "description": "Gets the Xth dropped item"
        },
        "GetGameModeEntity": {
          "signature": "handle GetGameModeEntity()",
          "description": "Get the game mode entity"
        },
        "GetGameSessionConfigValue": {
          "signature": "string GetGameSessionConfigValue(string string_1, string string_2)",
          "description": "Get a string value from the game session config (map options)"
        },
        "GetGameTime": {
          "signature": "float GetGameTime()",
          "description": "Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused"
        },
        "GetMatchSignoutComplete": {
          "signature": "bool GetMatchSignoutComplete()",
          "description": "Have we received the post match signout message that includes reward information"
        },
        "GetNianFightStartTime": {
          "signature": "float GetNianFightStartTime()",
          "description": "Gets the start time for the Nian fight"
        },
        "GetNianTotalDamageTaken": {
          "signature": "int GetNianTotalDamageTaken()",
          "description": "For New Bloom, get total damage taken by the Nian / Year Beast"
        },
        "GetPlayerCustomGameAccountRecord": {
          "signature": "table GetPlayerCustomGameAccountRecord(int int_1)",
          "description": "(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session"
        },
        "GetTimeOfDay": {
          "signature": "float GetTimeOfDay()",
          "description": "Get the time of day"
        },
        "IsDaytime": {
          "signature": "bool IsDaytime()",
          "description": "Is it day time."
        },
        "IsGamePaused": {
          "signature": "bool IsGamePaused()",
          "description": "Returns whether the game is paused."
        },
        "IsCheatMode": {
          "signature": "bool IsCheatMode()",
          "description": "which you can use to detect lobbies with cheats enabled or sv_cheats 1."
        },
        "IsNightstalkerNight": {
          "signature": "bool IsNightstalkerNight()",
          "description": "Is it Nightstalker night?"
        },
        "IsTemporaryNight": {
          "signature": "bool IsTemporaryNight()",
          "description": "Is it temporarily night?"
        },
        "LockCustomGameSetupTeamAssignment": {
          "signature": "void LockCustomGameSetupTeamAssignment(bool bool_1)",
          "description": "Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams."
        },
        "MakeTeamLose": {
          "signature": "void MakeTeamLose(int team)",
          "description": "Makes ths specified team lose"
        },
        "NumDroppedItems": {
          "signature": "int NumDroppedItems()",
          "description": "Returns the number of items currently dropped on the ground"
        },
        "PlayerHasCustomGameHostPrivileges": {
          "signature": "bool PlayerHasCustomGameHostPrivileges(handle handle_1)",
          "description": "Whether a player has custom game host privileges (shuffle teams, etc.)"
        },
        "Playtesting_UpdateAddOnKeyValues": {
          "signature": "void Playtesting_UpdateAddOnKeyValues()",
          "description": "Updates custom hero, unit and ability KeyValues in memory with the latest values from disk"
        },
        "ResetDefeated": {
          "signature": "void ResetDefeated()",
          "description": "Restart after killing the ancient, etc."
        },
        "ResetToHeroSelection": {
          "signature": "void ResetToHeroSelection()",
          "description": "Restart the game at hero selection"
        },
        "SendCustomMessage": {
          "signature": "void SendCustomMessage(string message, int teamID, int unknown(1?))",
          "description": "Displays a line of text in the left textbox (where usually deaths/denies/buysbacks are announced). This function takes restricted HTML as input! (<br>,<u>,<font>)"
        },
        "SendCustomMessageToTeam": {
          "signature": "void SendCustomMessageToTeam(string string_1, int int_2, int int_3, int int_4)",
          "description": "Sends a message on behalf of a player to the specified team."
        },
        "SetCreepMinimapIconScale": {
          "signature": "void SetCreepMinimapIconScale(float scale)",
          "description": "Scale the creep icons on the minimap."
        },
        "SetCustomGameAccountRecordSaveFunction": {
          "signature": "void SetCustomGameAccountRecordSaveFunction(handle handle_1, handle handle_2)",
          "description": "(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table)"
        },
        "SetCustomGameDifficulty": {
          "signature": "void SetCustomGameDifficulty(int int_1)",
          "description": "Set the difficulty level of the custom game mode"
        },
        "SetCustomGameEndDelay": {
          "signature": "void SetCustomGameEndDelay(float delay)",
          "description": "Sets the delay time until the game ends"
        },
        "SetCustomGameSetupAutoLaunchDelay": {
          "signature": "void SetCustomGameSetupAutoLaunchDelay(float float_1)",
          "description": "Set the amount of time to wait for auto launch."
        },
        "SetCustomGameSetupRemainingTime": {
          "signature": "void SetCustomGameSetupRemainingTime(float float_1)",
          "description": "Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever"
        },
        "SetCustomGameSetupTimeout": {
          "signature": "void SetCustomGameSetupTimeout(float float_1)",
          "description": "Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)"
        },
        "SetCustomGameTeamMaxPlayers": {
          "signature": "void SetCustomGameTeamMaxPlayers(int int_1, int int_2)",
          "description": "Set whether a team is selectable during game setup"
        },
        "SetCustomVictoryMessage": {
          "signature": "void SetCustomVictoryMessage(string string_1)",
          "description": "Sets the victory message."
        },
        "SetCustomVictoryMessageDuration": {
          "signature": "void SetCustomVictoryMessageDuration(float duration)",
          "description": "Sets how long the custom victory message should last"
        },
        "SetEventMetadataCustomTable": {
          "signature": "bool SetEventMetadataCustomTable(handle handle_1)",
          "description": "Event-only ( table hMetadataTable )."
        },
        "SetFirstBloodActive": {
          "signature": "void SetFirstBloodActive(bool bool_1)",
          "description": "Sets whether First Blood has been triggered."
        },
        "SetGameWinner": {
          "signature": "void SetGameWinner(int team)",
          "description": "Makes ths specified team win"
        },
        "SetGoldPerTick": {
          "signature": "void SetGoldPerTick(int int_1)",
          "description": "Set the auto gold increase per timed interval."
        },
        "SetGoldTickTime": {
          "signature": "void SetGoldTickTime(float float_1)",
          "description": "Set the time interval between auto gold increases."
        },
        "SetHeroMinimapIconScale": {
          "signature": "void SetHeroMinimapIconScale(int iconSize)",
          "description": "(nMinimapHeroIconSize) - Set the hero minimap icon size."
        },
        "SetHeroRespawnEnabled": {
          "signature": "void SetHeroRespawnEnabled(bool canRespawn)",
          "description": "Control if the normal DOTA hero respawn rules apply."
        },
        "SetHeroSelectionTime": {
          "signature": "void SetHeroSelectionTime(float time)",
          "description": "Sets the amount of time players have to pick their hero."
        },
        "SetHideKillMessageHeaders": {
          "signature": "void SetHideKillMessageHeaders(bool hide)",
          "description": "Sets whether or not the kill banners should be hidden"
        },
        "SetNianFightStartTime": {
          "signature": "void SetNianFightStartTime(float float_1)",
          "description": "Sets the start time for the Nian fight"
        },
        "SetOverlayHealthBarUnit": {
          "signature": "void SetOverlayHealthBarUnit(handle unit, int style)",
          "description": "Show this unit's health on the overlay health bar"
        },
        "SetPostGameTime": {
          "signature": "void SetPostGameTime(float time)",
          "description": "Sets the amount of time players have between the game ending and the server disconnecting them."
        },
        "SetPreGameTime": {
          "signature": "void SetPreGameTime(float time)",
          "description": "Sets the amount of time players have between picking their hero and game start."
        },
        "SetRuneMinimapIconScale": {
          "signature": "void SetRuneMinimapIconScale(float scale)",
          "description": "Scale the rune icons on the minimap."
        },
        "SetRuneSpawnTime": {
          "signature": "void SetRuneSpawnTime(float time)",
          "description": "Sets the amount of time between rune spawns."
        },
        "SetSafeToLeave": {
          "signature": "void SetSafeToLeave(bool safeToLeave)",
          "description": "Mark this game as safe to leave."
        },
        "SetSameHeroSelectionEnabled": {
          "signature": "void SetSameHeroSelectionEnabled(bool enabled)",
          "description": "When true, players can repeatedly pick the same hero."
        },
        "SetShowcaseTime": {
          "signature": "void SetShowcaseTime(float time)",
          "description": "Set the duration of the 'radiant versus dire' showcase screen."
        },
        "SetStartingGold": {
          "signature": "void SetStartingGold(int int_1)",
          "description": "Set the starting gold amount."
        },
        "SetStrategyTime": {
          "signature": "void SetStrategyTime(float time)",
          "description": "Set the duration of the strategy phase."
        },
        "SetTimeOfDay": {
          "signature": "void SetTimeOfDay(float time)",
          "description": "Set the time of day."
        },
        "SetTreeRegrowTime": {
          "signature": "void SetTreeRegrowTime(float time)",
          "description": "Sets the tree regrow time in seconds."
        },
        "SetUseBaseGoldBountyOnHeroes": {
          "signature": "void SetUseBaseGoldBountyOnHeroes(bool bool_1)",
          "description": "Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas."
        },
        "SetUseCustomHeroXPValues": {
          "signature": "void SetUseCustomHeroXPValues(bool bool_1)",
          "description": "Allows heroes in the map to give a specific amount of XP (this value must be set)."
        },
        "SetUseUniversalShopMode": {
          "signature": "void SetUseUniversalShopMode(bool enabled)",
          "description": "When true, all items are available at as long as any shop is in range, including Secret Shop items"
        },
        "State_Get": {
          "signature": "int State_Get()",
          "description": "Get the current Gamerules state"
        }
      },
      "extends": "",
      "accessor": "GameRules"
    },
    {
      "title": "CToneMapControllerComponent",
      "description": "",
      "funcs": {
        "GetBloomScale": {
          "signature": "float GetBloomScale()",
          "description": "Gets bloomscale for this tonemap controller"
        },
        "GetMaxExposure": {
          "signature": "float GetMaxExposure()",
          "description": "Gets max exposure for this tonemap controller"
        },
        "GetMinExposure": {
          "signature": "float GetMinExposure()",
          "description": "Gets min exposure for this tonemap controller"
        },
        "SetBloomScale": {
          "signature": "void SetBloomScale(float float_1)",
          "description": "Sets bloom scale for this tonemap controller"
        },
        "SetMaxExposure": {
          "signature": "void SetMaxExposure(float float_1)",
          "description": "Sets max exposure for this tonemap controller"
        },
        "SetMinExposure": {
          "signature": "void SetMinExposure(float float_1)",
          "description": "Sets min exposure for this tonemap controller"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CDebugOverlayScriptHelper",
      "description": "",
      "funcs": {
        "Axis": {
          "signature": "void Axis(Vector Vector_1, Quaternion Quaternion_2, float float_3, bool bool_4, float float_5)",
          "description": "Draws an axis. Specify origin + orientation in world space."
        },
        "Box": {
          "signature": "void Box(Vector Vector_1, Vector Vector_2, int int_3, int int_4, int int_5, int int_6, bool bool_7, float float_8)",
          "description": "Draws a world-space axis-aligned box. Specify bounds in world space."
        },
        "BoxAngles": {
          "signature": "void BoxAngles(Vector Vector_1, Vector Vector_2, Vector Vector_3, Quaternion Quaternion_4, int int_5, int int_6, int int_7, int int_8, bool bool_9, float float_10)",
          "description": "Draws an oriented box at the origin. Specify bounds in local space."
        },
        "Capsule": {
          "signature": "void Capsule(Vector Vector_1, Quaternion Quaternion_2, float float_3, float float_4, int int_5, int int_6, int int_7, int int_8, bool bool_9, float float_10)",
          "description": "Draws a capsule. Specify base in world space."
        },
        "Circle": {
          "signature": "void Circle(Vector Vector_1, Quaternion Quaternion_2, float float_3, int int_4, int int_5, int int_6, int int_7, bool bool_8, float float_9)",
          "description": "Draws a circle. Specify center in world space."
        },
        "CircleScreenOriented": {
          "signature": "void CircleScreenOriented(Vector Vector_1, float float_2, int int_3, int int_4, int int_5, int int_6, bool bool_7, float float_8)",
          "description": "Draws a circle oriented to the screen. Specify center in world space."
        },
        "Cone": {
          "signature": "void Cone(Vector Vector_1, Vector Vector_2, float float_3, float float_4, int int_5, int int_6, int int_7, int int_8, bool bool_9, float float_10)",
          "description": "Draws a wireframe cone. Specify endpoint and direction in world space."
        },
        "Cross": {
          "signature": "void Cross(Vector Vector_1, float float_2, int int_3, int int_4, int int_5, int int_6, bool bool_7, float float_8)",
          "description": "Draws a screen-aligned cross. Specify origin in world space."
        },
        "Cross3D": {
          "signature": "void Cross3D(Vector Vector_1, float float_2, int int_3, int int_4, int int_5, int int_6, bool bool_7, float float_8)",
          "description": "Draws a world-aligned cross. Specify origin in world space."
        },
        "Cross3DOriented": {
          "signature": "void Cross3DOriented(Vector Vector_1, Quaternion Quaternion_2, float float_3, int int_4, int int_5, int int_6, int int_7, bool bool_8, float float_9)",
          "description": "Draws an oriented cross. Specify origin in world space."
        },
        "DrawTickMarkedLine": {
          "signature": "void DrawTickMarkedLine(Vector Vector_1, Vector Vector_2, float float_3, int int_4, int int_5, int int_6, int int_7, int int_8, bool bool_9, float float_10)",
          "description": "Draws a dashed line. Specify endpoint's in world space."
        },
        "EntityAttachments": {
          "signature": "void EntityAttachments(ehandle ehandle_1, float float_2, float float_3)",
          "description": "Draws the attachments of the entity"
        },
        "EntityAxis": {
          "signature": "void EntityAxis(ehandle ehandle_1, float float_2, bool bool_3, float float_4)",
          "description": "Draws the axis of the entity origin"
        },
        "EntityBounds": {
          "signature": "void EntityBounds(ehandle ehandle_1, int int_2, int int_3, int int_4, int int_5, bool bool_6, float float_7)",
          "description": "Draws bounds of an entity"
        },
        "EntitySkeleton": {
          "signature": "void EntitySkeleton(ehandle ehandle_1, float float_2)",
          "description": "Draws the skeleton of the entity"
        },
        "EntityText": {
          "signature": "void EntityText(ehandle ehandle_1, int int_2, string string_3, int int_4, int int_5, int int_6, int int_7, float float_8)",
          "description": "Draws text on an entity"
        },
        "FilledRect2D": {
          "signature": "void FilledRect2D(Vector2D Vector2D_1, Vector2D Vector2D_2, int int_3, int int_4, int int_5, int int_6, float float_7)",
          "description": "Draws a screen-space filled 2D rectangle. Coordinates are in pixels."
        },
        "HorzArrow": {
          "signature": "void HorzArrow(Vector Vector_1, Vector Vector_2, float float_3, int int_4, int int_5, int int_6, int int_7, bool bool_8, float float_9)",
          "description": "Draws a horizontal arrow. Specify endpoint's in world space."
        },
        "Line": {
          "signature": "void Line(Vector Vector_1, Vector Vector_2, int int_3, int int_4, int int_5, int int_6, bool bool_7, float float_8)",
          "description": "Draws a line between two point's"
        },
        "Line2D": {
          "signature": "void Line2D(Vector2D Vector2D_1, Vector2D Vector2D_2, int int_3, int int_4, int int_5, int int_6, float float_7)",
          "description": "Draws a line between two point's in screenspace"
        },
        "PopDebugOverlayScope": {
          "signature": "void PopDebugOverlayScope()",
          "description": "Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
        },
        "PushAndClearDebugOverlayScope": {
          "signature": "void PushAndClearDebugOverlayScope(utlstringtoken utlstringtoken_1)",
          "description": "Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id."
        },
        "PushDebugOverlayScope": {
          "signature": "void PushDebugOverlayScope(utlstringtoken utlstringtoken_1)",
          "description": "Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch."
        },
        "RemoveAllInScope": {
          "signature": "void RemoveAllInScope(utlstringtoken utlstringtoken_1)",
          "description": "Removes all overlays marked with a specific identifier, regardless of their lifetime."
        },
        "SolidCone": {
          "signature": "void SolidCone(Vector Vector_1, Vector Vector_2, float float_3, float float_4, int int_5, int int_6, int int_7, int int_8, bool bool_9, float float_10)",
          "description": "Draws a solid cone. Specify endpoint and direction in world space."
        },
        "Sphere": {
          "signature": "void Sphere(Vector Vector_1, float float_2, int int_3, int int_4, int int_5, int int_6, bool bool_7, float float_8)",
          "description": "Draws a wireframe sphere. Specify center in world space."
        },
        "SweptBox": {
          "signature": "void SweptBox(Vector Vector_1, Vector Vector_2, Vector Vector_3, Vector Vector_4, Quaternion Quaternion_5, int int_6, int int_7, int int_8, int int_9, float float_10)",
          "description": "Draws a swept box. Specify endpoint's in world space and the bounds in local space."
        },
        "Text": {
          "signature": "void Text(Vector Vector_1, int int_2, string string_3, float float_4, int int_5, int int_6, int int_7, int int_8, float float_9)",
          "description": "Draws 2D text. Specify origin in world space."
        },
        "Texture": {
          "signature": "void Texture(string string_1, Vector2D Vector2D_2, Vector2D Vector2D_3, int int_4, int int_5, int int_6, int int_7, Vector2D Vector2D_8, Vector2D Vector2D_9, float float_10)",
          "description": "Draws a screen-space texture. Coordinates are in pixels."
        },
        "Triangle": {
          "signature": "void Triangle(Vector Vector_1, Vector Vector_2, Vector Vector_3, int int_4, int int_5, int int_6, int int_7, bool bool_8, float float_9)",
          "description": "Draws a filled triangle. Specify vertices in world space."
        },
        "UnitTestCycleOverlayRenderType": {
          "signature": "void UnitTestCycleOverlayRenderType()",
          "description": "Toggles the overlay render type, for unit tests"
        },
        "VectorText3D": {
          "signature": "void VectorText3D(Vector Vector_1, Quaternion Quaternion_2, string string_3, int int_4, int int_5, int int_6, int int_7, bool bool_8, float float_9)",
          "description": "Draws 3D text. Specify origin + orientation in world space."
        },
        "VertArrow": {
          "signature": "void VertArrow(Vector Vector_1, Vector Vector_2, float float_3, int int_4, int int_5, int int_6, int int_7, bool bool_8, float float_9)",
          "description": "Draws a vertical arrow. Specify endpoint's in world space."
        },
        "YawArrow": {
          "signature": "void YawArrow(Vector Vector_1, float float_2, float float_3, float float_4, int int_5, int int_6, int int_7, int int_8, bool bool_9, float float_10)",
          "description": "Draws a arrow associated with a specific yaw. Specify endpoint's in world space."
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "CBaseFlex",
      "description": "Animated characters who have vertex flex capability (Hi hex6)",
      "funcs": {
        "GetCurrentScene": {
          "signature": "handle GetCurrentScene()",
          "description": "Returns the instance of the oldest active scene entity (if any)."
        },
        "GetSceneByIndex": {
          "signature": "handle GetSceneByIndex(int index)",
          "description": "Returns the instance of the scene entity at the specified index."
        }
      },
      "extends": "CBaseAnimating",
      "accessor": ""
    },
    {
      "title": "CSceneEntity",
      "description": "Choreographed scene which controls animation and/or dialog on one or more actors.",
      "funcs": {
        "AddBroadcastTeamTarget": {
          "signature": "void AddBroadcastTeamTarget(int int_1)",
          "description": "Adds a team (by index) to the broadcast list"
        },
        "Cancel": {
          "signature": "void Cancel()",
          "description": "Cancel scene playback"
        },
        "EstimateLength": {
          "signature": "float EstimateLength()",
          "description": "Returns length of this scene in seconds."
        },
        "FindCamera": {
          "signature": "handle FindCamera()",
          "description": "Get the camera"
        },
        "FindNamedEntity": {
          "signature": "handle FindNamedEntity(string string_1)",
          "description": "given an entity reference, such as !target, get actual entity from scene object"
        },
        "IsPaused": {
          "signature": "bool IsPaused()",
          "description": "If this scene is currently paused."
        },
        "IsPlayingBack": {
          "signature": "bool IsPlayingBack()",
          "description": "If this scene is currently playing."
        },
        "LoadSceneFromString": {
          "signature": "bool LoadSceneFromString(string string_1, string string_2)",
          "description": "given a dummy scene name and a vcd string, load the scene"
        },
        "RemoveBroadcastTeamTarget": {
          "signature": "void RemoveBroadcastTeamTarget(int int_1)",
          "description": "Removes a team (by index) from the broadcast list"
        },
        "Start": {
          "signature": "void Start(handle handle_1)",
          "description": "Start scene playback, takes activatorEntity as param"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "GridNav",
      "description": "A class that can communicate with the gridnav, useful for seeing if stuff should be able to move",
      "funcs": {
        "CanFindPath": {
          "signature": "bool CanFindPath(Vector Vector_1, Vector Vector_2)",
          "description": "Determine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd)"
        },
        "DestroyTreesAroundPoint": {
          "signature": "void DestroyTreesAroundPoint(Vector Vector_1, float float_2, bool bool_3)",
          "description": "Destroy all trees in the area(vPosition, flRadius, bFullCollision"
        },
        "FindPathLength": {
          "signature": "float FindPathLength(Vector Vector_1, Vector Vector_2)",
          "description": "Find a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd )"
        },
        "GetAllTreesAroundPoint": {
          "signature": "table GetAllTreesAroundPoint(Vector Vector_1, float float_2, bool bool_3)",
          "description": "Returns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)."
        },
        "GridPosToWorldCenterX": {
          "signature": "float GridPosToWorldCenterX(int int_1)",
          "description": "Get the X position of the center of a given X index"
        },
        "GridPosToWorldCenterY": {
          "signature": "float GridPosToWorldCenterY(int int_1)",
          "description": "Get the Y position of the center of a given Y index"
        },
        "IsBlocked": {
          "signature": "bool IsBlocked(Vector Vector_1)",
          "description": "Checks whether the given position is blocked"
        },
        "IsNearbyTree": {
          "signature": "bool IsNearbyTree(Vector position, float radius, bool bool_3)",
          "description": ""
        },
        "IsTraversable": {
          "signature": "bool IsTraversable(Vector Vector_1)",
          "description": "Checks whether the given position is traversable"
        },
        "RegrowAllTrees": {
          "signature": "void RegrowAllTrees()",
          "description": ""
        },
        "WorldToGridPosX": {
          "signature": "int WorldToGridPosX(float float_1)",
          "description": "Get the X index of a given world X position"
        },
        "WorldToGridPosY": {
          "signature": "int WorldToGridPosY(float float_1)",
          "description": "Get the Y index of a given world Y position"
        }
      },
      "extends": "",
      "accessor": ""
    },
    {
      "title": "Convars",
      "description": "",
      "funcs": {
        "GetBool": {
          "signature": "table GetBool(string variableName)",
          "description": "GetBool(name) : returns the convar as a boolean flag."
        },
        "GetCommandClient": {
          "signature": "handle GetCommandClient()",
          "description": "GetCommandClient() : returns the player who issued this console command."
        },
        "GetDOTACommandClient": {
          "signature": "handle GetDOTACommandClient()",
          "description": "GetDOTACommandClient() : returns the DOTA player who issued this console command."
        },
        "GetFloat": {
          "signature": "table GetFloat(string name)",
          "description": "GetFloat(name) : returns the convar as a float. May return nil if no such convar."
        },
        "GetInt": {
          "signature": "table GetInt(string string_1)",
          "description": "GetInt(name) : returns the convar as an int. May return nil if no such convar."
        },
        "GetStr": {
          "signature": "table GetStr(string variableName)",
          "description": "GetStr(name) : returns the convar as a string. May return nil if no such convar."
        },
        "RegisterCommand": {
          "signature": "void RegisterCommand(string variableName, handle function, string helpText, int flags)",
          "description": "RegisterCommand(name, fn, helpString, flags) : register a console command."
        },
        "RegisterConvar": {
          "signature": "void RegisterConvar(string name, string defaultValue, string helpText, int flags)",
          "description": "RegisterConvar(name, defaultValue, helpString, flags): register a new console variable."
        },
        "SetBool": {
          "signature": "void SetBool(string variableName, bool value)",
          "description": "SetBool(name, val) : sets the value of the convar to the bool."
        },
        "SetFloat": {
          "signature": "void SetFloat(string variableName, float value)",
          "description": "SetFloat(name, val) : sets the value of the convar to the float."
        },
        "SetInt": {
          "signature": "void SetInt(string string_1, int int_2)",
          "description": "SetInt(name, val) : sets the value of the convar to the int."
        },
        "SetStr": {
          "signature": "void SetStr(string string_1, string string_2)",
          "description": "SetStr(name, val) : sets the value of the convar to the string."
        }
      },
      "extends": "",
      "accessor": "ConVars"
    },
    {
      "title": "Vector",
      "description": "",
      "funcs": {
        "__add": {
          "signature": "Vector __add(Vector a, Vector b)",
          "description": "Overloaded +.  Adds vectors together"
        },
        "__div": {
          "signature": "Vector __div(Vector a, Vector b)",
          "description": "Overloaded /.  Divides vectors"
        },
        "__eq": {
          "signature": "bool __eq(Vector a, Vector b)",
          "description": "Overloaded ==.  Tests for Equality"
        },
        "__len": {
          "signature": "float __len()",
          "description": "Overloaded # returns the length of the vector"
        },
        "__mul": {
          "signature": "Vector __mul(Vector a, Vector b)",
          "description": "Overloaded * returns the vectors multiplied together"
        },
        "__sub": {
          "signature": "Vector __sub(Vector a, Vector b)",
          "description": "Overloaded -.  Subtracts vectors"
        },
        "__tostring": {
          "signature": "string __tostring()",
          "description": "Overloaded .. Converts vectors to strings"
        },
        "__unm": {
          "signature": "Vector __unm()",
          "description": "Overloaded - operator"
        },
        "Cross": {
          "signature": "Vector Cross(Vector a, Vector b)",
          "description": "Cross product of two vectors"
        },
        "Dot": {
          "signature": "float Dot(Vector a, Vector b)",
          "description": "Dot product of two vectors"
        },
        "Length": {
          "signature": "float Length()",
          "description": "Length of the Vector"
        },
        "Length2D": {
          "signature": "float Length2D()",
          "description": "Length of the Vector in the XY plane"
        },
        "Normalized": {
          "signature": "Vector Normalized()",
          "description": "Returns the vector normalized"
        }
      },
      "extends": "",
      "accessor": "Vector(x,y,z)"
    },
    {
      "title": "CDOTA_MapTree",
      "description": "A tree on the map",
      "funcs": {
        "CutDown": {
          "signature": "void CutDown(int TeamNumberKnownTo )",
          "description": "Cuts down this tree."
        },
        "CutDownRegrowAfter": {
          "signature": "void CutDownRegrowAfter(float RegrowAfter, int TeamNumberKnownTo )",
          "description": "Cuts down this tree.  Regrow it after some time"
        },
        "GrowBack": {
          "signature": "void GrowBack()",
          "description": "Grows back the tree if it was cut down."
        },
        "IsStanding": {
          "signature": "bool IsStanding()",
          "description": "Returns true if the tree is standing, false if it has been cut down"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDOTA_SimpleObstruction",
      "description": "An obstruction on the map that effects the gridnav",
      "funcs": {
        "IsEnabled": {
          "signature": "bool IsEnabled()",
          "description": "Returns whether the obstruction is currently active"
        },
        "SetEnabled": {
          "signature": "void SetEnabled(bool enabled, bool bForce)",
          "description": "Enable or disable the obstruction"
        }
      },
      "extends": "CBaseEntity",
      "accessor": ""
    },
    {
      "title": "CDOTA_Unit_Courier",
      "description": "Class for Couriers",
      "funcs": {
        "UpgradeToFlyingCourier": {
          "signature": "bool UpgradeToFlyingCourier()",
          "description": "Upgrade to a flying courier"
        }
      },
      "extends": "CDOTA_BaseNPC",
      "accessor": ""
    },
    {
      "title": "CDOTA_Ability_DataDriven",
      "description": "",
      "funcs": {
        "ApplyDataDrivenModifier": {
          "signature": "handle ApplyDataDrivenModifier(handle hCaster, handle hTarget, string pszModifierName, handle hModifierTable)",
          "description": "Gets the Attack Capabilities of the unit"
        },
        "ApplyDataDrivenThinker": {
          "signature": "handle ApplyDataDrivenThinker(handle hCaster, Vector vLocation, string pszModifierName, handle hModifierTable)",
          "description": "Applies a data driven thinker at the location"
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CBaseModelEntity",
      "description": "",
      "funcs": {
        "SetLightGroup": {
          "signature": "void SetLightGroup(string pLightGroup)",
          "description": "SetLightGroup( string ): Sets the light group of the entity."
        },
        "SetModel": {
          "signature": "void SetModel(string pModelName)",
          "description": ""
        },
        "SetRenderColor": {
          "signature": "void SetRenderColor(int r, int g, int b)",
          "description": "SetRenderColor( r, g, b ): Sets the render color of the entity."
        },
        "SetRenderMode": {
          "signature": "void SetRenderMode(int nMode)",
          "description": "SetRenderMode( int ): Sets the render mode of the entity."
        },
        "SetSize": {
          "signature": "void SetSize(Vector mins, Vector maxs)",
          "description": ""
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CCustomGameEventManager",
      "description": "",
      "funcs": {
        "RegisterListener": {
          "signature": "int RegisterListener(string string_1, handle handle_2)",
          "description": "( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later."
        },
        "Send_ServerToAllClients": {
          "signature": "void Send_ServerToAllClients(string string_1, handle handle_2)",
          "description": "( string EventName, table EventData )"
        },
        "Send_ServerToPlayer": {
          "signature": "void Send_ServerToPlayer(handle handle_1, string string_2, handle handle_3)",
          "description": "( Entity Player, string EventName, table EventData )"
        },
        "Send_ServerToTeam": {
          "signature": "void Send_ServerToTeam(int int_1, string string_2, handle handle_3)",
          "description": "( int TeamNumber, string EventName, table EventData )"
        },
        "UnregisterListener": {
          "signature": "void UnregisterListener(int int_1)",
          "description": "( int ListnerID ) - Unregister a specific listener"
        }
      },
      "extends": "",
      "accessor": "CustomGameEventManager"
    },
    {
      "title": "CCustomNetTableManager",
      "description": "",
      "funcs": {
        "GetTableValue": {
          "signature": "handle GetTableValue(string string_1, string string_2)",
          "description": "( string TableName, string KeyName )"
        },
        "SetTableValue": {
          "signature": "bool SetTableValue(string string_1, string string_2, handle handle_3)",
          "description": "( string TableName, string KeyName, script_table Value )"
        }
      },
      "extends": "",
      "accessor": "CustomNetTables"
    },
    {
      "title": "CDOTATutorial",
      "description": "",
      "funcs": {
        "AddBot": {
          "signature": "bool AddBot(string string_1, string string_2, string string_3, bool bool_4)",
          "description": "Add a computer controlled bot."
        },
        "AddQuest": {
          "signature": "void AddQuest(string string_1, int int_2, string string_3, string string_4)",
          "description": "Add a quest to the quest log"
        },
        "AddShopWhitelistItem": {
          "signature": "void AddShopWhitelistItem(string string_1)",
          "description": "Add an item to the shop whitelist."
        },
        "CompleteQuest": {
          "signature": "void CompleteQuest(string string_1)",
          "description": "Complete a quest,"
        },
        "CreateLocationTask": {
          "signature": "void CreateLocationTask(Vector Vector_1)",
          "description": "Add a task to move to a specific location"
        },
        "EnableCreepAggroViz": {
          "signature": "void EnableCreepAggroViz(bool bool_1)",
          "description": "Alert the player when a creep becomes agro to their hero."
        },
        "EnablePlayerOffscreenTip": {
          "signature": "void EnablePlayerOffscreenTip(bool bool_1)",
          "description": "Enable the tip to alert players how to find their hero."
        },
        "EnableTowerAggroViz": {
          "signature": "void EnableTowerAggroViz(bool bool_1)",
          "description": "Alert the player when a tower becomes agro to their hero."
        },
        "FinishTutorial": {
          "signature": "void FinishTutorial()",
          "description": "End the tutorial."
        },
        "ForceGameStart": {
          "signature": "void ForceGameStart()",
          "description": "Force the start of the game."
        },
        "GetTimeFrozen": {
          "signature": "bool GetTimeFrozen()",
          "description": "Is our time frozen?"
        },
        "IsItemInWhiteList": {
          "signature": "bool IsItemInWhiteList(string string_1)",
          "description": "Is this item currently in the white list."
        },
        "RemoveShopWhitelistItem": {
          "signature": "void RemoveShopWhitelistItem(string string_1)",
          "description": "Remove an item from the shop whitelist."
        },
        "SelectHero": {
          "signature": "void SelectHero(string string_1)",
          "description": "Select a hero for the local player"
        },
        "SelectPlayerTeam": {
          "signature": "void SelectPlayerTeam(string string_1)",
          "description": "Select the team for the local player"
        },
        "SetItemGuide": {
          "signature": "void SetItemGuide(string string_1)",
          "description": "Set the current item guide."
        },
        "SetOrModifyPlayerGold": {
          "signature": "void SetOrModifyPlayerGold(int int_1, bool bool_2)",
          "description": "Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify"
        },
        "SetQuickBuy": {
          "signature": "void SetQuickBuy(string string_1)",
          "description": "Set players quick buy item."
        },
        "SetShopOpen": {
          "signature": "void SetShopOpen(bool bool_1)",
          "description": "Set the shop open or closed."
        },
        "SetTimeFrozen": {
          "signature": "void SetTimeFrozen(bool bool_1)",
          "description": "Set if we should freeze time or not."
        },
        "SetTutorialConvar": {
          "signature": "void SetTutorialConvar(string string_1, string string_2)",
          "description": "Set a tutorial convar"
        },
        "SetTutorialUI": {
          "signature": "void SetTutorialUI(int int_1)",
          "description": "Set the UI to use a reduced version to focus attention to specific elements."
        },
        "SetWhiteListEnabled": {
          "signature": "void SetWhiteListEnabled(bool bool_1)",
          "description": "Set if we should whitelist shop items."
        },
        "StartTutorialMode": {
          "signature": "void StartTutorialMode()",
          "description": "Initialize Tutorial Mode"
        },
        "UpgradePlayerAbility": {
          "signature": "void UpgradePlayerAbility(string string_1)",
          "description": "Upgrade a specific ability for the local hero"
        }
      },
      "extends": "",
      "accessor": "Tutorial"
    },
    {
      "title": "CDOTA_Ability_Lua",
      "description": "",
      "funcs": {
        "CastFilterResult": {
          "signature": "int CastFilterResult()",
          "description": "Determine whether an issued command with no target is valid."
        },
        "CastFilterResultLocation": {
          "signature": "int CastFilterResultLocation(Vector vLocation)",
          "description": "(Vector vLocation) Determine whether an issued command on a location is valid."
        },
        "CastFilterResultTarget": {
          "signature": "int CastFilterResultTarget(handle hTarget)",
          "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
        },
        "GetAssociatedPrimaryAbilities": {
          "signature": "string GetAssociatedPrimaryAbilities()",
          "description": "Returns abilities that are stolen simultaneously, or otherwise related in functionality."
        },
        "GetAssociatedSecondaryAbilities": {
          "signature": "string GetAssociatedSecondaryAbilities()",
          "description": "Returns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities."
        },
        "GetBehavior": {
          "signature": "int GetBehavior()",
          "description": "Return cast behavior type of this ability."
        },
        "GetCastAnimation": {
          "signature": "int GetCastAnimation()",
          "description": "Return casting animation of this ability."
        },
        "GetCastRange": {
          "signature": "int GetCastRange(Vector vLocation, handle hTarget)",
          "description": "Return cast range of this ability."
        },
        "GetChannelAnimation": {
          "signature": "int GetChannelAnimation()",
          "description": "Return channel animation of this ability."
        },
        "GetChannelledManaCostPerSecond": {
          "signature": "int GetChannelledManaCostPerSecond(int iLevel)",
          "description": "Return mana cost at the given level per second while channeling (-1 is current)."
        },
        "GetChannelTime": {
          "signature": "float GetChannelTime()",
          "description": "Return the channel time of this ability."
        },
        "GetConceptRecipientType": {
          "signature": "int GetConceptRecipientType()",
          "description": "Return who hears speech when this spell is cast."
        },
        "GetCooldown": {
          "signature": "float GetCooldown(int iLevel)",
          "description": "Return cooldown of this ability."
        },
        "GetCustomCastError": {
          "signature": "string GetCustomCastError()",
          "description": "Return the error string of a failed command with no target."
        },
        "GetCustomCastErrorLocation": {
          "signature": "string GetCustomCastErrorLocation(Vector vLocation)",
          "description": "(Vector vLocation) Return the error string of a failed command on a location."
        },
        "GetCustomCastErrorTarget": {
          "signature": "string GetCustomCastErrorTarget(handle hTarget)",
          "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target."
        },
        "GetGoldCost": {
          "signature": "int GetGoldCost(int iLevel)",
          "description": "Return gold cost at the given level (-1 is current)."
        },
        "GetIntrinsicModifierName": {
          "signature": "string GetIntrinsicModifierName()",
          "description": "Returns the name of the modifier applied passively by this ability."
        },
        "GetManaCost": {
          "signature": "int GetManaCost(int iLevel)",
          "description": "Return mana cost at the given level (-1 is current)."
        },
        "GetPlaybackRateOverride": {
          "signature": "float GetPlaybackRateOverride()",
          "description": "Return the animation rate of the cast animation."
        },
        "IsHiddenAbilityCastable": {
          "signature": "bool IsHiddenAbilityCastable()",
          "description": "Returns true if this ability can be used when not on the action panel."
        },
        "IsHiddenWhenStolen": {
          "signature": "bool IsHiddenWhenStolen()",
          "description": "Returns true if this ability is hidden when stolen by Spell Steal."
        },
        "IsRefreshable": {
          "signature": "bool IsRefreshable()",
          "description": "Returns true if this ability is refreshed by Refresher Orb."
        },
        "IsStealable": {
          "signature": "bool IsStealable()",
          "description": "Returns true if this ability can be stolen by Spell Steal."
        },
        "OnAbilityPhaseInterrupted": {
          "signature": "void OnAbilityPhaseInterrupted()",
          "description": "Cast time did not complete successfully."
        },
        "OnAbilityPhaseStart": {
          "signature": "bool OnAbilityPhaseStart()",
          "description": "Cast time begins (return true for successful cast)."
        },
        "OnChannelFinish": {
          "signature": "void OnChannelFinish(bool bInterrupted)",
          "description": "(bool bInterrupted) Channel finished."
        },
        "OnChannelThink": {
          "signature": "void OnChannelThink(float flInterval)",
          "description": "(float flInterval) Channeling is taking place."
        },
        "OnHeroCalculateStatBonus": {
          "signature": "void OnHeroCalculateStatBonus()",
          "description": "Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
        },
        "OnHeroDiedNearby": {
          "signature": "void OnHeroDiedNearby(handle unit, handle attacker, handle table)",
          "description": "A hero has died in the vicinity (ie Urn), takes table of params."
        },
        "OnHeroLevelUp": {
          "signature": "void OnHeroLevelUp()",
          "description": "Caster gained a level."
        },
        "OnInventoryContentsChanged": {
          "signature": "void OnInventoryContentsChanged()",
          "description": "Caster inventory changed."
        },
        "OnItemEquipped": {
          "signature": "void OnItemEquipped(handle hItem)",
          "description": "( HSCRIPT hItem ) Caster equipped item."
        },
        "OnOwnerDied": {
          "signature": "void OnOwnerDied()",
          "description": "Caster died."
        },
        "OnOwnerSpawned": {
          "signature": "void OnOwnerSpawned()",
          "description": "Caster respawned or spawned for the first time."
        },
        "OnProjectileHit": {
          "signature": "bool OnProjectileHit(handle hTarget, Vector vLocation)",
          "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
        },
        "OnProjectileHit_ExtraData": {
          "signature": "bool OnProjectileHit_ExtraData(handle hTarget, Vector vLocation, handle table)",
          "description": "(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)."
        },
        "OnProjectileThink": {
          "signature": "void OnProjectileThink(Vector vLocation)",
          "description": "(Vector vLocation) Projectile is actively moving."
        },
        "OnProjectileThink_ExtraData": {
          "signature": "void OnProjectileThink_ExtraData(Vector vLocation, handle table)",
          "description": "(Vector vLocation, table kv ) Projectile is actively moving."
        },
        "OnSpellStart": {
          "signature": "void OnSpellStart()",
          "description": "Cast time finished, spell effects begin."
        },
        "OnStolen": {
          "signature": "void OnStolen(handle hSourceAbility)",
          "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
        },
        "OnToggle": {
          "signature": "void OnToggle()",
          "description": "Ability is toggled on/off."
        },
        "OnUnStolen": {
          "signature": "void OnUnStolen()",
          "description": "Special behavior when lost by Spell Steal."
        },
        "OnUpgrade": {
          "signature": "void OnUpgrade()",
          "description": "Ability gained a level."
        },
        "ProcsMagicStick": {
          "signature": "bool ProcsMagicStick()",
          "description": "Returns true if this ability will generate magic stick charges for nearby enemies."
        },
        "SpeakTrigger": {
          "signature": "int SpeakTrigger()",
          "description": "Return the type of speech used."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_CustomUIManager",
      "description": "",
      "funcs": {
        "DynamicHud_Create": {
          "signature": "void DynamicHud_Create(int int_1, string string_2, string string_3, handle handle_4)",
          "description": "Create a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ )"
        },
        "DynamicHud_Destroy": {
          "signature": "void DynamicHud_Destroy(int int_1, string string_2)",
          "description": "Destroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID )"
        },
        "DynamicHud_SetDialogVariables": {
          "signature": "void DynamicHud_SetDialogVariables(int int_1, string string_2, handle handle_3)",
          "description": "Add or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables )"
        },
        "DynamicHud_SetVisible": {
          "signature": "void DynamicHud_SetVisible(int int_1, string string_2, bool bool_3)",
          "description": "Toggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible )"
        }
      },
      "extends": "",
      "accessor": "CustomUI"
    },
    {
      "title": "CPropHMDAvatar",
      "description": "",
      "funcs": {
        "GetVRHand": {
          "signature": "handle GetVRHand(int nHandID)",
          "description": "Get VR hand by ID"
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CPropVRHand",
      "description": "",
      "funcs": {
        "GetAttachment": {
          "signature": "handle GetAttachment()",
          "description": "Get the attachment on this hand"
        },
        "SetAttachment": {
          "signature": "void SetAttachment(handle hAttachment)",
          "description": "Set the attachment for this hand"
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_Buff",
      "description": "",
      "funcs": {
        "AddParticle": {
          "signature": "void AddParticle(int i, bool bDestroyImmediately, bool bStatusEffect, int iPriority, bool bHeroEffect, bool bOverheadEffect)",
          "description": "Assigns a particle index to a modifier using the booleans on the function. The particle disappears when the modifier is removed."
        },
        "DecrementStackCount": {
          "signature": "void DecrementStackCount()",
          "description": "Decrease this modifier's stack count by 1."
        },
        "Destroy": {
          "signature": "void Destroy()",
          "description": "Run all associated destroy functions, then remove the modifier."
        },
        "ForceRefresh": {
          "signature": "void ForceRefresh()",
          "description": "Run all associated refresh functions on this modifier as if it was re-applied."
        },
        "GetAbility": {
          "signature": "handle GetAbility()",
          "description": "Get the ability that generated the modifier."
        },
        "GetCaster": {
          "signature": "handle GetCaster()",
          "description": "Get the owner of the ability responsible for the modifier."
        },
        "GetClass": {
          "signature": "string GetClass()",
          "description": ""
        },
        "GetCreationTime": {
          "signature": "float GetCreationTime()",
          "description": "Get the Dota game time that the modifier was created in."
        },
        "GetDieTime": {
          "signature": "float GetDieTime()",
          "description": "Get the Dota game time that the modifier was expires in."
        },
        "GetDuration": {
          "signature": "float GetDuration()",
          "description": "Get the initial duration of the modifier, usually set via AddModifier() by using {duration = x} as a passed table value, or by using SetDuration(). Returns -1 if no duration is set."
        },
        "GetElapsedTime": {
          "signature": "float GetElapsedTime()",
          "description": "Get how many game time seconds have elapsed since the creation of the modifier."
        },
        "GetName": {
          "signature": "string GetName()",
          "description": ""
        },
        "GetParent": {
          "signature": "handle GetParent()",
          "description": "Get the unit the modifier is parented to."
        },
        "GetRemainingTime": {
          "signature": "float GetRemainingTime()",
          "description": "Get how many seconds are remaining until the modifier is going to be expired. Returns -1 if no duration is set."
        },
        "GetStackCount": {
          "signature": "int GetStackCount()",
          "description": "Get the amount of stacks in the modifier."
        },
        "IncrementStackCount": {
          "signature": "void IncrementStackCount()",
          "description": "Increase this modifier's stack count by 1."
        },
        "SetDuration": {
          "signature": "void SetDuration(float flDuration, bool bInformClient)",
          "description": "Set the duration of the modifier. Causes the animation circle to reset when the duration changes."
        },
        "SetStackCount": {
          "signature": "void SetStackCount(int iCount)",
          "description": "Sets the amount of stacks this modifier has."
        },
        "StartIntervalThink": {
          "signature": "void StartIntervalThink(float flInterval)",
          "description": "Start this modifier's think function (OnIntervalThink) with the given interval (float). To stop, call with -1."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_Modifier_Lua",
      "description": "",
      "funcs": {
        "AllowIllusionDuplicate": {
          "signature": "bool AllowIllusionDuplicate()",
          "description": "True/false if this modifier is active on illusions."
        },
        "DestroyOnExpire": {
          "signature": "bool DestroyOnExpire()",
          "description": "True/false if this buff is removed when the duration expires."
        },
        "GetAttributes": {
          "signature": "int GetAttributes()",
          "description": "Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t"
        },
        "GetAuraEntityReject": {
          "signature": "bool GetAuraEntityReject(handle hEntity)",
          "description": "Return true/false if this entity should receive the aura under specific conditions"
        },
        "GetAuraRadius": {
          "signature": "int GetAuraRadius()",
          "description": "Return the range around the parent this aura tries to apply its buff."
        },
        "GetAuraSearchFlags": {
          "signature": "int GetAuraSearchFlags()",
          "description": "Return the unit flags this aura respects when placing buffs."
        },
        "GetAuraSearchTeam": {
          "signature": "int GetAuraSearchTeam()",
          "description": "Return the teams this aura applies its buff to."
        },
        "GetAuraSearchType": {
          "signature": "int GetAuraSearchType()",
          "description": "Return the unit classifications this aura applies its buff to."
        },
        "GetEffectAttachType": {
          "signature": "int GetEffectAttachType()",
          "description": "Return the attach type of the particle system from GetEffectName."
        },
        "GetEffectName": {
          "signature": "string GetEffectName()",
          "description": "Return the name of the particle system that is created while this modifier is active."
        },
        "GetHeroEffectName": {
          "signature": "string GetHeroEffectName()",
          "description": "Return the name of the hero effect particle system that is created while this modifier is active."
        },
        "GetModifierAura": {
          "signature": "string GetModifierAura()",
          "description": "The name of the secondary modifier that will be applied by this modifier (if it is an aura)."
        },
        "GetPriority": {
          "signature": "int GetPriority()",
          "description": "Return the priority of the modifier, see MODIFIER_PRIORITY_*."
        },
        "GetStatusEffectName": {
          "signature": "string GetStatusEffectName()",
          "description": "Return the name of the status effect particle system that is created while this modifier is active."
        },
        "GetTexture": {
          "signature": "string GetTexture()",
          "description": "Return the name of the buff icon to be shown for this modifier."
        },
        "HeroEffectPriority": {
          "signature": "int HeroEffectPriority()",
          "description": "Relationship of this hero effect with those from other buffs (higher is more likely to be shown)."
        },
        "IsAura": {
          "signature": "bool IsAura()",
          "description": "True/false if this modifier is an aura."
        },
        "IsAuraActiveOnDeath": {
          "signature": "bool IsAuraActiveOnDeath()",
          "description": "True/false if this aura provides buffs when the parent is dead."
        },
        "IsDebuff": {
          "signature": "bool IsDebuff()",
          "description": "True/false if this modifier should be displayed as a debuff."
        },
        "IsHidden": {
          "signature": "bool IsHidden()",
          "description": "True/false if this modifier should be displayed on the buff bar."
        },
        "IsPermanent": {
          "signature": "bool IsPermanent()",
          "description": "True/false if this modifier is permanent."
        },
        "IsPurgable": {
          "signature": "bool IsPurgable()",
          "description": "True/false if this modifier can be purged."
        },
        "IsPurgeException": {
          "signature": "bool IsPurgeException()",
          "description": "True/false if this modifier can be purged by strong dispels."
        },
        "IsStunDebuff": {
          "signature": "bool IsStunDebuff()",
          "description": "True/false if this modifier is considered a stun for purge reasons."
        },
        "OnCreated": {
          "signature": "void OnCreated(handle table)",
          "description": "Runs when the modifier is created."
        },
        "OnDestroy": {
          "signature": "void OnDestroy()",
          "description": "Runs when the modifier is destroyed."
        },
        "OnIntervalThink": {
          "signature": "void OnIntervalThink()",
          "description": "Runs when the think interval occurs."
        },
        "OnRefresh": {
          "signature": "void OnRefresh(handle table)",
          "description": "Runs when the modifier is refreshed."
        },
        "OnRemoved": {
          "signature": "void OnRemoved()",
          "description": "Runs when the modifier is removed, before it is actually removed from the unit (OnDestroy runs after)."
        },
        "OnStackCountChanged": {
          "signature": "void OnStackCountChanged(int iStackCount)",
          "description": "Runs when the modifier stack count changed."
        },
        "RemoveOnDeath": {
          "signature": "bool RemoveOnDeath()",
          "description": "True/false if this modifier is removed when the parent dies."
        },
        "StatusEffectPriority": {
          "signature": "int StatusEffectPriority()",
          "description": "Relationship of this status effect with those from other buffs (higher is more likely to be shown)."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_Modifier_Lua_Horizontal_Motion",
      "description": "",
      "funcs": {
        "ApplyHorizontalMotionController": {
          "signature": "bool ApplyHorizontalMotionController()",
          "description": "Starts the horizontal motion controller effects for this buff.  Returns true if successful."
        },
        "GetPriority": {
          "signature": "int GetPriority()",
          "description": "Get the priority"
        },
        "OnHorizontalMotionInterrupted": {
          "signature": "void OnHorizontalMotionInterrupted()",
          "description": "Called when the motion gets interrupted."
        },
        "SetPriority": {
          "signature": "void SetPriority(int nMotionPriority)",
          "description": "Set the priority"
        },
        "UpdateHorizontalMotion": {
          "signature": "void UpdateHorizontalMotion(handle me, float dt)",
          "description": "Perform any motion from the given interval on the NPC."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_Modifier_Lua_Motion_Both",
      "description": "",
      "funcs": {
        "ApplyHorizontalMotionController": {
          "signature": "bool ApplyHorizontalMotionController()",
          "description": "Starts the horizontal motion controller effects for this buff.  Returns true if successful."
        },
        "ApplyVerticalMotionController": {
          "signature": "bool ApplyVerticalMotionController()",
          "description": "Starts the vertical motion controller effects for this buff.  Returns true if successful."
        },
        "GetPriority": {
          "signature": "int GetPriority()",
          "description": "Get the priority"
        },
        "OnHorizontalMotionInterrupted": {
          "signature": "void OnHorizontalMotionInterrupted()",
          "description": "Called when the motion gets interrupted."
        },
        "OnVerticalMotionInterrupted": {
          "signature": "void OnVerticalMotionInterrupted()",
          "description": "Called when the motion gets interrupted."
        },
        "SetPriority": {
          "signature": "void SetPriority(int nMotionPriority)",
          "description": "Set the priority"
        },
        "UpdateHorizontalMotion": {
          "signature": "void UpdateHorizontalMotion(handle me, float dt)",
          "description": "Perform any motion from the given interval on the NPC."
        },
        "UpdateVerticalMotion": {
          "signature": "void UpdateVerticalMotion(handle me, float dt)",
          "description": "Perform any motion from the given interval on the NPC."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_Modifier_Lua_Vertical_Motion",
      "description": "",
      "funcs": {
        "ApplyVerticalMotionController": {
          "signature": "bool ApplyVerticalMotionController()",
          "description": "Starts the vertical motion controller effects for this buff.  Returns true if successful."
        },
        "GetMotionPriority": {
          "signature": "int GetMotionPriority()",
          "description": "Get the priority"
        },
        "OnVerticalMotionInterrupted": {
          "signature": "void OnVerticalMotionInterrupted()",
          "description": "Called when the motion gets interrupted."
        },
        "SetMotionPriority": {
          "signature": "void SetMotionPriority(int nMotionPriority)",
          "description": "Set the priority"
        },
        "UpdateVerticalMotion": {
          "signature": "void UpdateVerticalMotion(handle me, float dt)",
          "description": "Perform any motion from the given interval on the NPC."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    },
    {
      "title": "CDOTA_Item_Lua",
      "description": "",
      "funcs": {
        "CastFilterResult": {
          "signature": "int CastFilterResult()",
          "description": "Determine whether an issued command with no target is valid."
        },
        "CastFilterResultLocation": {
          "signature": "int CastFilterResultLocation(Vector vLocation)",
          "description": "(Vector vLocation) Determine whether an issued command on a location is valid."
        },
        "CastFilterResultTarget": {
          "signature": "int CastFilterResultTarget(handle hTarget)",
          "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid."
        },
        "GetAssociatedPrimaryAbilities": {
          "signature": "string GetAssociatedPrimaryAbilities()",
          "description": "Returns abilities that are stolen simultaneously by Rubick's Spell Steal, or otherwise related in functionality."
        },
        "GetAssociatedSecondaryAbilities": {
          "signature": "string GetAssociatedSecondaryAbilities()",
          "description": "Returns other abilities that are stolen simultaneously by Rubick's Spell Steal, or otherwise related in functionality.  Generally hidden abilities."
        },
        "GetBehavior": {
          "signature": "int GetBehavior()",
          "description": "Return cast behavior type of this ability."
        },
        "GetCastRange": {
          "signature": "int GetCastRange(Vector vLocation, handle hTarget)",
          "description": "Return cast range of this ability."
        },
        "GetChannelledManaCostPerSecond": {
          "signature": "int GetChannelledManaCostPerSecond(int iLevel)",
          "description": "Return mana cost at the given level per second while channeling (-1 is current)."
        },
        "GetChannelTime": {
          "signature": "float GetChannelTime()",
          "description": "Return the channel time of this ability."
        },
        "GetConceptRecipientType": {
          "signature": "int GetConceptRecipientType()",
          "description": "Return who hears speech when this spell is cast."
        },
        "GetCooldown": {
          "signature": "float GetCooldown(int iLevel)",
          "description": "Return cooldown of this ability."
        },
        "GetCustomCastError": {
          "signature": "string GetCustomCastError()",
          "description": "Return the error string of a failed command with no target."
        },
        "GetCustomCastErrorLocation": {
          "signature": "string GetCustomCastErrorLocation(Vector vLocation)",
          "description": "(Vector vLocation) Return the error string of a failed command on a location."
        },
        "GetCustomCastErrorTarget": {
          "signature": "string GetCustomCastErrorTarget(handle hTarget)",
          "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target."
        },
        "GetGoldCost": {
          "signature": "int GetGoldCost(int iLevel)",
          "description": "Return gold cost at the given level (-1 is current)."
        },
        "GetIntrinsicModifierName": {
          "signature": "string GetIntrinsicModifierName()",
          "description": "Returns the name of the modifier applied passively by this ability."
        },
        "GetManaCost": {
          "signature": "int GetManaCost(int iLevel)",
          "description": "Return mana cost at the given level (-1 is current)."
        },
        "GetPlaybackRateOverride": {
          "signature": "float GetPlaybackRateOverride()",
          "description": "Return the animation rate of the cast animation."
        },
        "IsHiddenAbilityCastable": {
          "signature": "bool IsHiddenAbilityCastable()",
          "description": "Returns true if this ability can be used when not on the action panel."
        },
        "IsHiddenWhenStolen": {
          "signature": "bool IsHiddenWhenStolen()",
          "description": "Returns true if this ability is hidden when stolen by Spell Steal."
        },
        "IsRefreshable": {
          "signature": "bool IsRefreshable()",
          "description": "Returns true if this ability is refreshed by Refresher Orb."
        },
        "IsStealable": {
          "signature": "bool IsStealable()",
          "description": "Returns true if this ability can be stolen by Spell Steal."
        },
        "OnAbilityPhaseInterrupted": {
          "signature": "void OnAbilityPhaseInterrupted()",
          "description": "Cast time did not complete successfully."
        },
        "OnAbilityPhaseStart": {
          "signature": "bool OnAbilityPhaseStart()",
          "description": "Cast time begins (return true for successful cast)."
        },
        "OnChannelFinish": {
          "signature": "void OnChannelFinish(bool bInterrupted)",
          "description": "(bool bInterrupted) Channel finished."
        },
        "OnChannelThink": {
          "signature": "void OnChannelThink(float flInterval)",
          "description": "(float flInterval) Channeling is taking place."
        },
        "OnHeroCalculateStatBonus": {
          "signature": "void OnHeroCalculateStatBonus()",
          "description": "Caster (hero only) gained a level, skilled an ability, or received a new stat bonus."
        },
        "OnHeroDiedNearby": {
          "signature": "void OnHeroDiedNearby(handle unit, handle attacker, handle table)",
          "description": "A hero has died in the vicinity (ie Urn), takes table of params."
        },
        "OnHeroLevelUp": {
          "signature": "void OnHeroLevelUp()",
          "description": "Caster gained a level."
        },
        "OnInventoryContentsChanged": {
          "signature": "void OnInventoryContentsChanged()",
          "description": "Caster inventory changed."
        },
        "OnItemEquipped": {
          "signature": "void OnItemEquipped(handle hItem)",
          "description": "( HSCRIPT hItem ) Caster equipped item."
        },
        "OnOwnerDied": {
          "signature": "void OnOwnerDied()",
          "description": "Caster died."
        },
        "OnOwnerSpawned": {
          "signature": "void OnOwnerSpawned()",
          "description": "Caster respawned or spawned for the first time."
        },
        "OnProjectileHit": {
          "signature": "bool OnProjectileHit(handle hTarget, Vector vLocation)",
          "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)."
        },
        "OnProjectileThink": {
          "signature": "void OnProjectileThink(Vector vLocation)",
          "description": "(Vector vLocation) Projectile is actively moving."
        },
        "OnSpellStart": {
          "signature": "void OnSpellStart()",
          "description": "Cast time finished, spell effects begin."
        },
        "OnStolen": {
          "signature": "void OnStolen(handle hSourceAbility)",
          "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal."
        },
        "OnToggle": {
          "signature": "void OnToggle()",
          "description": "Ability is toggled on/off."
        },
        "OnUnStolen": {
          "signature": "void OnUnStolen()",
          "description": "Special behavior when lost by Spell Steal."
        },
        "OnUpgrade": {
          "signature": "void OnUpgrade()",
          "description": "Ability gained a level."
        },
        "ProcsMagicStick": {
          "signature": "bool ProcsMagicStick()",
          "description": "Returns true if this ability will generate magic stick charges for nearby enemies."
        },
        "SpeakTrigger": {
          "signature": "int SpeakTrigger()",
          "description": "Return the type of speech used."
        }
      },
      "extends": "",
      "accessor": "Unknown"
    }
  ],
  "constants": [
    {
      "title": "AbilityLearnResult_t",
      "prefix": "ABILITY_",
      "values": [
        {
          "name": "ABILITY_CAN_BE_UPGRADED",
          "value": "0",
          "description": ""
        },
        {
          "name": "ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE",
          "value": "1",
          "description": ""
        },
        {
          "name": "ABILITY_CANNOT_BE_UPGRADED_AT_MAX",
          "value": "2",
          "description": ""
        },
        {
          "name": "ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL",
          "value": "3",
          "description": ""
        },
        {
          "name": "ABILITY_NOT_LEARNABLE",
          "value": "4",
          "description": ""
        }
      ]
    },
    {
      "title": "Attributes",
      "prefix": "DOTA_ATTRIBUTE_",
      "values": [
        {
          "name": "DOTA_ATTRIBUTE_INVALID",
          "value": "-1",
          "description": ""
        },
        {
          "name": "DOTA_ATTRIBUTE_STRENGTH",
          "value": "0",
          "description": "Strength attribute."
        },
        {
          "name": "DOTA_ATTRIBUTE_AGILITY",
          "value": "1",
          "description": "Agility attribute."
        },
        {
          "name": "DOTA_ATTRIBUTE_INTELLECT",
          "value": "2",
          "description": "Intelligence attribute."
        },
        {
          "name": "DOTA_ATTRIBUTE_MAX",
          "value": "3",
          "description": ""
        }
      ]
    },
    {
      "title": "DAMAGE_TYPES",
      "prefix": "DAMAGE_TYPE_",
      "values": [
        {
          "name": "DAMAGE_TYPE_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DAMAGE_TYPE_PHYSICAL",
          "value": "1",
          "description": "Physical, reduced by armor."
        },
        {
          "name": "DAMAGE_TYPE_MAGICAL",
          "value": "2",
          "description": "Magical, reduced by magic resistance."
        },
        {
          "name": "DAMAGE_TYPE_PURE",
          "value": "4",
          "description": "Pure, not reduced by anything."
        },
        {
          "name": "DAMAGE_TYPE_ALL",
          "value": "7",
          "description": ""
        },
        {
          "name": "DAMAGE_TYPE_HP_REMOVAL",
          "value": "8",
          "description": "Deprecated."
        }
      ]
    },
    {
      "title": "DOTAAbilitySpeakTrigger_t",
      "prefix": "DOTA_ABILITY_SPEAK_",
      "values": [
        {
          "name": "DOTA_ABILITY_SPEAK_START_ACTION_PHASE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_SPEAK_CAST",
          "value": "1",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTADamageFlag_t",
      "prefix": "DOTA_DAMAGE_FLAG_",
      "values": [
        {
          "name": "DOTA_DAMAGE_FLAG_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_BYPASSES_BLOCK",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_REFLECTION",
          "value": "16",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_HPLOSS",
          "value": "32",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT",
          "value": "64",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_NON_LETHAL",
          "value": "128",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY",
          "value": "256",
          "description": ""
        },
        {
          "name": "DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS",
          "value": "512",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTAHUDVisibility_t",
      "prefix": "DOTA_HUD_VISIBILITY_",
      "values": [
        {
          "name": "DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_TOP_HEROES",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_TOP_SCOREBOARD",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_ACTION_PANEL",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_ACTION_MINIMAP",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_PANEL",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_SHOP",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_ITEMS",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_COURIER",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_PROTECT",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_INVENTORY_GOLD",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS",
          "value": "12",
          "description": ""
        },
        {
          "name": "DOTA_HUD_VISIBILITY_COUNT",
          "value": "13",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTAInventoryFlags_t",
      "prefix": "DOTA_INVENTORY_",
      "values": [
        {
          "name": "DOTA_INVENTORY_ALLOW_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_INVENTORY_ALLOW_MAIN",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_INVENTORY_ALLOW_STASH",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_INVENTORY_ALL_ACCESS",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_INVENTORY_ALLOW_DROP_ON_GROUND",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_INVENTORY_LIMIT_DROP_ON_GROUND",
          "value": "16",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTAMinimapEvent_t",
      "prefix": "DOTA_MINIMAP_EVENT_",
      "values": [
        {
          "name": "DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_BASE_GLYPHED",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK",
          "value": "16",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING",
          "value": "32",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_TEAMMATE_DIED",
          "value": "64",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE",
          "value": "128",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED",
          "value": "256",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_HINT_LOCATION",
          "value": "512",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING",
          "value": "1024",
          "description": ""
        },
        {
          "name": "DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING",
          "value": "2048",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTAModifierAttribute_t",
      "prefix": "MODIFIER_ATTRIBUTE_",
      "values": [
        {
          "name": "MODIFIER_ATTRIBUTE_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODIFIER_ATTRIBUTE_PERMANENT",
          "value": "1",
          "description": "Modifier passively remains until strictly removed."
        },
        {
          "name": "MODIFIER_ATTRIBUTE_MULTIPLE",
          "value": "2",
          "description": "Allows modifier to stack with itself."
        },
        {
          "name": "MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE",
          "value": "4",
          "description": "Allows modifier to be assigned to invulnerable entities."
        }
      ]
    },
    {
      "title": "DOTAMusicStatus_t",
      "prefix": "DOTA_MUSIC_STATUS_",
      "values": [
        {
          "name": "DOTA_MUSIC_STATUS_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_MUSIC_STATUS_EXPLORATION",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_MUSIC_STATUS_BATTLE",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_MUSIC_STATUS_DEAD",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_MUSIC_STATUS_LAST",
          "value": "5",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTASlotType_t",
      "prefix": "DOTA_LOADOUT_TYPE_",
      "values": [
        {
          "name": "DOTA_LOADOUT_TYPE_INVALID",
          "value": "-1",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_WEAPON",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_WEAPON2",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_HEAD",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_SHOULDER",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ARMS",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ARMOR",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_BELT",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_NECK",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_BACK",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_LEGS",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_GLOVES",
          "value": "12",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_TAIL",
          "value": "13",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_MISC",
          "value": "14",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_BODY_HEAD",
          "value": "15",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_MOUNT",
          "value": "16",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_SUMMON",
          "value": "17",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_SHAPESHIFT",
          "value": "18",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_TAUNT",
          "value": "19",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS",
          "value": "20",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ABILITY_ATTACK",
          "value": "21",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ABILITY1",
          "value": "22",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ABILITY2",
          "value": "23",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ABILITY3",
          "value": "24",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ABILITY4",
          "value": "25",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE",
          "value": "26",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_VOICE",
          "value": "27",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ACTION_ITEM",
          "value": "28",
          "description": ""
        },
        {
          "name": "DOTA_PLAYER_LOADOUT_START",
          "value": "28",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_COURIER",
          "value": "29",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_ANNOUNCER",
          "value": "30",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_MEGA_KILLS",
          "value": "31",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_MUSIC",
          "value": "32",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_WARD",
          "value": "33",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_HUD_SKIN",
          "value": "34",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_LOADING_SCREEN",
          "value": "35",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_WEATHER",
          "value": "36",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_HEROIC_STATUE",
          "value": "37",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_MULTIKILL_BANNER",
          "value": "38",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_CURSOR_PACK",
          "value": "39",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_TELEPORT_EFFECT",
          "value": "40",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_BLINK_EFFECT",
          "value": "41",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_TEAM_SHOWCASE",
          "value": "42",
          "description": ""
        },
        {
          "name": "DOTA_PLAYER_LOADOUT_END",
          "value": "42",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_NONE",
          "value": "43",
          "description": ""
        },
        {
          "name": "DOTA_LOADOUT_TYPE_COUNT",
          "value": "44",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTASpeechType_t",
      "prefix": "DOTA_SPEECH_USER_",
      "values": [
        {
          "name": "DOTA_SPEECH_USER_INVALID",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_USER_SINGLE",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_USER_TEAM",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_USER_TEAM_NEARBY",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_USER_NEARBY",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_USER_ALL",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_GOOD_TEAM",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_BAD_TEAM",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_SPECTATOR",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_SPEECH_RECIPIENT_TYPE_MAX",
          "value": "9",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTATeam_t",
      "prefix": "DOTA_TEAM_",
      "values": [
        {
          "name": "DOTA_TEAM_FIRST",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_GOODGUYS",
          "value": "2",
          "description": "Radiant team."
        },
        {
          "name": "DOTA_TEAM_BADGUYS",
          "value": "3",
          "description": "Dire team."
        },
        {
          "name": "DOTA_TEAM_NEUTRALS",
          "value": "4",
          "description": "Neutral."
        },
        {
          "name": "DOTA_TEAM_NOTEAM",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_1",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_MIN",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_2",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_3",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_COUNT",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_4",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_5",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_6",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_7",
          "value": "12",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_8",
          "value": "13",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_CUSTOM_MAX",
          "value": "13",
          "description": ""
        },
        {
          "name": "DOTA_TEAM_COUNT",
          "value": "14",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTAUnitAttackCapability_t",
      "prefix": "DOTA_UNIT_CAP_",
      "values": [
        {
          "name": "DOTA_UNIT_CAP_NO_ATTACK",
          "value": "0",
          "description": "Unit is unable to attack in any way."
        },
        {
          "name": "DOTA_UNIT_CAP_MELEE_ATTACK",
          "value": "1",
          "description": "Unit attacks are classified as melee (no uphill miss chance, attacks on enemies that are 350 over the attack range automatically miss)."
        },
        {
          "name": "DOTA_UNIT_CAP_RANGED_ATTACK",
          "value": "2",
          "description": "Unit attacks are classified as ranged (can miss on uphill, disjointable, has projectile)."
        }
      ]
    },
    {
      "title": "DOTAUnitMoveCapability_t",
      "prefix": "DOTA_UNIT_CAP_MOVE_",
      "values": [
        {
          "name": "DOTA_UNIT_CAP_MOVE_NONE",
          "value": "0",
          "description": "Unit cannot move in any way."
        },
        {
          "name": "DOTA_UNIT_CAP_MOVE_GROUND",
          "value": "1",
          "description": "Unit move while being obstructed by the terrain."
        },
        {
          "name": "DOTA_UNIT_CAP_MOVE_FLY",
          "value": "2",
          "description": "Unit ignores terrain."
        }
      ]
    },
    {
      "title": "DOTA_UNIT_ORDERS",
      "prefix": "DOTA_UNIT_ORDER_",
      "values": [
        {
          "name": "DOTA_UNIT_ORDER_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_MOVE_TO_POSITION",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_MOVE_TO_TARGET",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_ATTACK_MOVE",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_ATTACK_TARGET",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_POSITION",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_TARGET",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_TARGET_TREE",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_NO_TARGET",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_TOGGLE",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_HOLD_POSITION",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_TRAIN_ABILITY",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_DROP_ITEM",
          "value": "12",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_GIVE_ITEM",
          "value": "13",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_PICKUP_ITEM",
          "value": "14",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_PICKUP_RUNE",
          "value": "15",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_PURCHASE_ITEM",
          "value": "16",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_SELL_ITEM",
          "value": "17",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
          "value": "18",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_MOVE_ITEM",
          "value": "19",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
          "value": "20",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_STOP",
          "value": "21",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_TAUNT",
          "value": "22",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_BUYBACK",
          "value": "23",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_GLYPH",
          "value": "24",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
          "value": "25",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_ORDER_CAST_RUNE",
          "value": "26",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_ABILITY_BEHAVIOR",
      "prefix": "DOTA_ABILITY_BEHAVIOR_",
      "values": [
        {
          "name": "DOTA_ABILITY_BEHAVIOR_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_HIDDEN",
          "value": "1",
          "description": "Ability doesn't appear on the HUD."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_PASSIVE",
          "value": "2",
          "description": "Ability is classified as passive, and cannot be pressed."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_NO_TARGET",
          "value": "4",
          "description": "Ability fires immediately when pressed."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET",
          "value": "8",
          "description": "Ability needs a unit target to be cast."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_POINT",
          "value": "16",
          "description": "Ability needs a target point to be cast."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_AOE",
          "value": "32",
          "description": "Ability is considered an AoE ability, respecting \"AOERadius\" KV when drawing the AoE overlay."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE",
          "value": "64",
          "description": "Ability cannot be skilled."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_CHANNELLED",
          "value": "128",
          "description": "Ability is considered a channeling ability."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_ITEM",
          "value": "256",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_TOGGLE",
          "value": "512",
          "description": "Ability can be toggled on and off."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_DIRECTIONAL",
          "value": "1024",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_IMMEDIATE",
          "value": "2048",
          "description": "Ability ignores cast points and is fired as soon as the skill is pressed."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_AUTOCAST",
          "value": "4096",
          "description": "Ability can be set to auto cast."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET",
          "value": "8192",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT",
          "value": "16384",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET",
          "value": "32768",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_AURA",
          "value": "65536",
          "description": "Ability is considered an aura."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_ATTACK",
          "value": "131072",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT",
          "value": "262144",
          "description": "After casting that ability, the caster won't resume its last order."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES",
          "value": "524288",
          "description": "Ability cannot be cast while rooted."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_UNRESTRICTED",
          "value": "1048576",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE",
          "value": "2097152",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL",
          "value": "4194304",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT",
          "value": "8388608",
          "description": "Ability doesn't stop the caster to be used."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET",
          "value": "16777216",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK",
          "value": "33554432",
          "description": "After using ability, caster won't proceed to attack the nearby enemy (even if set otherwise in options)"
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN",
          "value": "67108864",
          "description": ""
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING",
          "value": "134217728",
          "description": "Ability ignores backswing animation."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_RUNE_TARGET",
          "value": "268435456",
          "description": "Ability can target runes."
        },
        {
          "name": "DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL",
          "value": "536870912",
          "description": "Ability can be used without cancelling the current channel."
        },
        {
          "name": "DOTA_ABILITY_LAST_BEHAVIOR",
          "value": "536870912",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_HeroPickState",
      "prefix": "DOTA_HEROPICK_STATE",
      "values": [
        {
          "name": "DOTA_HEROPICK_STATE_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_AP_SELECT",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_SD_SELECT",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_INTRO_SELECT",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_RD_SELECT",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_INTRO",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_CAPTAINPICK",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN1",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN2",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN3",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN4",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN5",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN6",
          "value": "12",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN7",
          "value": "13",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN8",
          "value": "14",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN9",
          "value": "15",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_BAN10",
          "value": "16",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT1",
          "value": "17",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT2",
          "value": "18",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT3",
          "value": "19",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT4",
          "value": "20",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT5",
          "value": "21",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT6",
          "value": "22",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT7",
          "value": "23",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT8",
          "value": "24",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT9",
          "value": "25",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_SELECT10",
          "value": "26",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CM_PICK",
          "value": "27",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_AR_SELECT",
          "value": "28",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_MO_SELECT",
          "value": "29",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_FH_SELECT",
          "value": "30",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_INTRO",
          "value": "31",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_CAPTAINPICK",
          "value": "32",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_BAN1",
          "value": "33",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_BAN2",
          "value": "34",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_BAN3",
          "value": "35",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_BAN4",
          "value": "36",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_BAN5",
          "value": "37",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_BAN6",
          "value": "38",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT1",
          "value": "39",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT2",
          "value": "40",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT3",
          "value": "41",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT4",
          "value": "42",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT5",
          "value": "43",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT6",
          "value": "44",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT7",
          "value": "45",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT8",
          "value": "46",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT9",
          "value": "47",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_SELECT10",
          "value": "48",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_CD_PICK",
          "value": "49",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_BD_SELECT",
          "value": "50",
          "description": ""
        },
        {
          "name": "DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT",
          "value": "51",
          "description": ""
        },
        {
          "name": "DOTA_HERO_PICK_STATE_ARDM_SELECT",
          "value": "52",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT",
          "value": "53",
          "description": ""
        },
        {
          "name": "DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT",
          "value": "54",
          "description": ""
        },
        {
          "name": "DOTA_HEROPICK_STATE_COUNT",
          "value": "55",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_MOTION_CONTROLLER_PRIORITY",
      "prefix": "DOTA_MOTION_CONTROLLER_",
      "values": [
        {
          "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_MOTION_CONTROLLER_PRIORITY_LOW",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGH",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST",
          "value": "4",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_RUNES",
      "prefix": "DOTA_RUNE_",
      "values": [
        {
          "name": "DOTA_RUNE_INVALID",
          "value": "-1",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_DOUBLEDAMAGE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_HASTE",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_ILLUSION",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_INVISIBILITY",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_REGENERATION",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_BOUNTY",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_COUNT",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_HAUNTED",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_SPOOKY",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_RAPIER",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_TURBO",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_RUNE_MYSTERY",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_HALLOWEEN_RUNE_COUNT",
          "value": "12",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_UNIT_TARGET_FLAGS",
      "prefix": "DOTA_UNIT_TARGET_FLAG_",
      "values": [
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NONE",
          "value": "0",
          "description": "No special flag rules."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_RANGED_ONLY",
          "value": "2",
          "description": "Targets only ranged units and heroes."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_MELEE_ONLY",
          "value": "4",
          "description": "Targets only melee units and heroes."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_DEAD",
          "value": "8",
          "description": "Targets dead units and heroes as well."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES",
          "value": "16",
          "description": "Targets magic immune enemies as well."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES",
          "value": "32",
          "description": "Targets non-magic immune allies as well."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_INVULNERABLE",
          "value": "64",
          "description": "Targets invulnerable units/heroes as well."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE",
          "value": "128",
          "description": "Targets only those that are visible through the fog of war."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NO_INVIS",
          "value": "256",
          "description": "Targets only those that are not invisible."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS",
          "value": "512",
          "description": "Targets only those that are not considered ancients."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED",
          "value": "1024",
          "description": "Targets player controlled units (ignores the rest of basic units)."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED",
          "value": "2048",
          "description": "Targets only those that are not being dominated."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED",
          "value": "4096",
          "description": "Targets only those that are not summoned creatures."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS",
          "value": "8192",
          "description": "Targets only those that are not illusions."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE",
          "value": "16384",
          "description": "Targets only those that are not immune to attacks."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_MANA_ONLY",
          "value": "32768",
          "description": "Targets only those that has a mana bar."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP",
          "value": "65536",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO",
          "value": "131072",
          "description": "Targets only those that are not considered creep heroes."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD",
          "value": "262144",
          "description": "Targets units/heroes that are hidden as well."
        },
        {
          "name": "DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED",
          "value": "524288",
          "description": "Targets only those that are not nightmared."
        }
      ]
    },
    {
      "title": "DOTA_UNIT_TARGET_TEAM",
      "prefix" : "DOTA_UNIT_TARGET_TEAM_",
      "values": [
        {
          "name": "DOTA_UNIT_TARGET_TEAM_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_TARGET_TEAM_FRIENDLY",
          "value": "1",
          "description": "Targets all those that are in the same team as the team that was declared the source."
        },
        {
          "name": "DOTA_UNIT_TARGET_TEAM_ENEMY",
          "value": "2",
          "description": "Targets all those that are not in the same team as the team that was declared the source."
        },
        {
          "name": "DOTA_UNIT_TARGET_TEAM_BOTH",
          "value": "3",
          "description": "Targets all entities from every team."
        },
        {
          "name": "DOTA_UNIT_TARGET_TEAM_CUSTOM",
          "value": "4",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_UNIT_TARGET_TYPE",
      "prefix" : "DOTA_UNIT_TARGET_",
      "values": [
        {
          "name": "DOTA_UNIT_TARGET_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_TARGET_HERO",
          "value": "1",
          "description": "Targets heroes."
        },
        {
          "name": "DOTA_UNIT_TARGET_CREEP",
          "value": "2",
          "description": "Targets creeps."
        },
        {
          "name": "DOTA_UNIT_TARGET_BUILDING",
          "value": "4",
          "description": "Targets buildings."
        },
        {
          "name": "DOTA_UNIT_TARGET_MECHANICAL",
          "value": "8",
          "description": "Deprecated."
        },
        {
          "name": "DOTA_UNIT_TARGET_COURIER",
          "value": "16",
          "description": "Targets couriers."
        },
        {
          "name": "DOTA_UNIT_TARGET_BASIC",
          "value": "18",
          "description": "Targets units. (not necessarily creeps)"
        },
        {
          "name": "DOTA_UNIT_TARGET_OTHER",
          "value": "32",
          "description": ""
        },
        {
          "name": "DOTA_UNIT_TARGET_ALL",
          "value": "63",
          "description": "Targets everything (including buildings, couriers, Shrines etc)"
        },
        {
          "name": "DOTA_UNIT_TARGET_TREE",
          "value": "64",
          "description": "Targets trees."
        },
        {
          "name": "DOTA_UNIT_TARGET_CUSTOM",
          "value": "128",
          "description": ""
        }
      ]
    },
    {
      "title": "EDOTA_ModifyGold_Reason",
      "prefix": "DOTA_ModifyGold_",
      "values": [
        {
          "name": "DOTA_ModifyGold_Unspecified",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_Death",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_Buyback",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_PurchaseConsumable",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_PurchaseItem",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_AbandonedRedistribute",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_SellItem",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_AbilityCost",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_CheatCommand",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_SelectionPenalty",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_GameTick",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_Building",
          "value": "11",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_HeroKill",
          "value": "12",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_CreepKill",
          "value": "13",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_RoshanKill",
          "value": "14",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_CourierKill",
          "value": "15",
          "description": ""
        },
        {
          "name": "DOTA_ModifyGold_SharedGold",
          "value": "16",
          "description": ""
        }
      ]
    },
    {
      "title": "EDOTA_ModifyXP_Reason",
      "prefix": "DOTA_ModifyXP_",
      "values": [
        {
          "name": "DOTA_ModifyXP_Unspecified",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_ModifyXP_HeroKill",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_ModifyXP_CreepKill",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_ModifyXP_RoshanKill",
          "value": "3",
          "description": ""
        }
      ]
    },
    {
      "title": "EShareAbility",
      "prefix": "ITEM_",
      "values": [
        {
          "name": "ITEM_FULLY_SHAREABLE",
          "value": "0",
          "description": ""
        },
        {
          "name": "ITEM_PARTIALLY_SHAREABLE",
          "value": "1",
          "description": ""
        },
        {
          "name": "ITEM_NOT_SHAREABLE",
          "value": "2",
          "description": ""
        }
      ]
    },
    {
      "title": "LuaModifierType",
      "prefix": "LUA_MODIFIER_MOTION_",
      "values": [
        {
          "name": "LUA_MODIFIER_MOTION_NONE",
          "value": "0",
          "description": ""
        },
        {
          "name": "LUA_MODIFIER_MOTION_HORIZONTAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "LUA_MODIFIER_MOTION_VERTICAL",
          "value": "2",
          "description": ""
        },
        {
          "name": "LUA_MODIFIER_MOTION_BOTH",
          "value": "3",
          "description": ""
        },
        {
          "name": "LUA_MODIFIER_INVALID",
          "value": "4",
          "description": ""
        }
      ]
    },
    {
      "title": "ModifierPriority",
      "prefix": "MODIFIER_PRIORITY_",
      "values": [
        {
          "name": "MODIFIER_PRIORITY_LOW",
          "value": "0",
          "description": ""
        },
        {
          "name": "MODIFIER_PRIORITY_NORMAL",
          "value": "1",
          "description": ""
        },
        {
          "name": "MODIFIER_PRIORITY_HIGH",
          "value": "2",
          "description": ""
        },
        {
          "name": "MODIFIER_PRIORITY_ULTRA",
          "value": "3",
          "description": ""
        },
        {
          "name": "MODIFIER_PRIORITY_SUPER_ULTRA",
          "value": "4",
          "description": ""
        }
      ]
    },
    {
      "title": "ParticleAttachment_t",
      "prefix": "PATTACH_",
      "values": [
        {
          "name": "PATTACH_INVALID",
          "value": "-1",
          "description": ""
        },
        {
          "name": "PATTACH_ABSORIGIN",
          "value": "0",
          "description": "Attaches the particle to the an origin."
        },
        {
          "name": "PATTACH_ABSORIGIN_FOLLOW",
          "value": "1",
          "description": "Attaches the particle to an origin, and causes it to follow the unit that is considered the source of the particle."
        },
        {
          "name": "PATTACH_CUSTOMORIGIN",
          "value": "2",
          "description": "Attaches the particle to a custom origin. (Requires passing a vector to the Control points)"
        },
        {
          "name": "PATTACH_CUSTOMORIGIN_FOLLOW",
          "value": "3",
          "description": ""
        },
        {
          "name": "PATTACH_POINT",
          "value": "4",
          "description": ""
        },
        {
          "name": "PATTACH_POINT_FOLLOW",
          "value": "5",
          "description": ""
        },
        {
          "name": "PATTACH_EYES_FOLLOW",
          "value": "6",
          "description": "Attaches the particle to the \"eyes\" of the entity."
        },
        {
          "name": "PATTACH_OVERHEAD_FOLLOW",
          "value": "7",
          "description": "Attaches the particle to be set above the head of the entity."
        },
        {
          "name": "PATTACH_WORLDORIGIN",
          "value": "8",
          "description": "Attaches the particle to the ground."
        },
        {
          "name": "PATTACH_ROOTBONE_FOLLOW",
          "value": "9",
          "description": ""
        },
        {
          "name": "PATTACH_RENDERORIGIN_FOLLOW",
          "value": "10",
          "description": ""
        },
        {
          "name": "PATTACH_MAIN_VIEW",
          "value": "11",
          "description": ""
        },
        {
          "name": "PATTACH_WATERWAKE",
          "value": "12",
          "description": ""
        },
        {
          "name": "MAX_PATTACH_TYPES",
          "value": "13",
          "description": ""
        }
      ]
    },
    {
      "title": "UnitFilterResult",
      "prefix": "UF_",
      "values": [
        {
          "name": "UF_SUCCESS",
          "value": "0",
          "description": ""
        },
        {
          "name": "UF_FAIL_FRIENDLY",
          "value": "1",
          "description": ""
        },
        {
          "name": "UF_FAIL_ENEMY",
          "value": "2",
          "description": ""
        },
        {
          "name": "UF_FAIL_HERO",
          "value": "3",
          "description": ""
        },
        {
          "name": "UF_FAIL_CONSIDERED_HERO",
          "value": "4",
          "description": ""
        },
        {
          "name": "UF_FAIL_CREEP",
          "value": "5",
          "description": ""
        },
        {
          "name": "UF_FAIL_BUILDING",
          "value": "6",
          "description": ""
        },
        {
          "name": "UF_FAIL_MECHANICAL",
          "value": "7",
          "description": ""
        },
        {
          "name": "UF_FAIL_COURIER",
          "value": "8",
          "description": ""
        },
        {
          "name": "UF_FAIL_OTHER",
          "value": "9",
          "description": ""
        },
        {
          "name": "UF_FAIL_ANCIENT",
          "value": "10",
          "description": ""
        },
        {
          "name": "UF_FAIL_ILLUSION",
          "value": "11",
          "description": ""
        },
        {
          "name": "UF_FAIL_SUMMONED",
          "value": "12",
          "description": ""
        },
        {
          "name": "UF_FAIL_DOMINATED",
          "value": "13",
          "description": ""
        },
        {
          "name": "UF_FAIL_MELEE",
          "value": "14",
          "description": ""
        },
        {
          "name": "UF_FAIL_RANGED",
          "value": "15",
          "description": ""
        },
        {
          "name": "UF_FAIL_DEAD",
          "value": "16",
          "description": ""
        },
        {
          "name": "UF_FAIL_MAGIC_IMMUNE_ALLY",
          "value": "17",
          "description": ""
        },
        {
          "name": "UF_FAIL_MAGIC_IMMUNE_ENEMY",
          "value": "18",
          "description": ""
        },
        {
          "name": "UF_FAIL_INVULNERABLE",
          "value": "19",
          "description": ""
        },
        {
          "name": "UF_FAIL_IN_FOW",
          "value": "20",
          "description": ""
        },
        {
          "name": "UF_FAIL_INVISIBLE",
          "value": "21",
          "description": ""
        },
        {
          "name": "UF_FAIL_NOT_PLAYER_CONTROLLED",
          "value": "22",
          "description": ""
        },
        {
          "name": "UF_FAIL_ATTACK_IMMUNE",
          "value": "23",
          "description": ""
        },
        {
          "name": "UF_FAIL_CUSTOM",
          "value": "24",
          "description": ""
        },
        {
          "name": "UF_FAIL_INVALID_LOCATION",
          "value": "25",
          "description": ""
        },
        {
          "name": "UF_FAIL_DISABLE_HELP",
          "value": "26",
          "description": ""
        },
        {
          "name": "UF_FAIL_OUT_OF_WORLD",
          "value": "27",
          "description": ""
        },
        {
          "name": "UF_FAIL_NIGHTMARED",
          "value": "28",
          "description": ""
        }
      ]
    },
    {
      "title": "modifierstate",
      "prefix": "MODIFIER_STATE_",
      "values": [
        {
          "name": "MODIFIER_STATE_ROOTED",
          "value": "0",
          "description": "Set to true to cause the parent to become rooted."
        },
        {
          "name": "MODIFIER_STATE_DISARMED",
          "value": "1",
          "description": "Set to true to cause the parent to become disarmed."
        },
        {
          "name": "MODIFIER_STATE_ATTACK_IMMUNE",
          "value": "2",
          "description": "Set to true to cause the parent to become attack immune."
        },
        {
          "name": "MODIFIER_STATE_SILENCED",
          "value": "3",
          "description": "Set to true to cause the parent to become silenced."
        },
        {
          "name": "MODIFIER_STATE_MUTED",
          "value": "4",
          "description": "Set to true to cause the parent to become muted."
        },
        {
          "name": "MODIFIER_STATE_STUNNED",
          "value": "5",
          "description": "Set to true to cause the parent to become stunned."
        },
        {
          "name": "MODIFIER_STATE_HEXED",
          "value": "6",
          "description": "Set to true to cause the parent to become hexed."
        },
        {
          "name": "MODIFIER_STATE_INVISIBLE",
          "value": "7",
          "description": "Set to true to cause the parent to become invisible."
        },
        {
          "name": "MODIFIER_STATE_INVULNERABLE",
          "value": "8",
          "description": "Set to true to cause the parent to become invulnerable."
        },
        {
          "name": "MODIFIER_STATE_MAGIC_IMMUNE",
          "value": "9",
          "description": "Set to true to cause the parent to become immune to magic."
        },
        {
          "name": "MODIFIER_STATE_PROVIDES_VISION",
          "value": "10",
          "description": "Set to true to cause the parent to share its vision with the source of the modifier."
        },
        {
          "name": "MODIFIER_STATE_NIGHTMARED",
          "value": "11",
          "description": "Set to true to cause the parent to become nightmared."
        },
        {
          "name": "MODIFIER_STATE_BLOCK_DISABLED",
          "value": "12",
          "description": "Set to true to cause the parent to become unable to block attacks."
        },
        {
          "name": "MODIFIER_STATE_EVADE_DISABLED",
          "value": "13",
          "description": "Set to true to cause the parent to become unable to evade attacks."
        },
        {
          "name": "MODIFIER_STATE_UNSELECTABLE",
          "value": "14",
          "description": "Set to true to cause the parent to make it unselectable."
        },
        {
          "name": "MODIFIER_STATE_CANNOT_MISS",
          "value": "15",
          "description": "Set to true to cause the parent to always hit its target."
        },
        {
          "name": "MODIFIER_STATE_SPECIALLY_DENIABLE",
          "value": "16",
          "description": "Set to true to cause allies to be able to deny the parent."
        },
        {
          "name": "MODIFIER_STATE_FROZEN",
          "value": "17",
          "description": "Set to true to cause the parent to become frozen."
        },
        {
          "name": "MODIFIER_STATE_COMMAND_RESTRICTED",
          "value": "18",
          "description": "Set to true to cause the parent to become unable to issue orders."
        },
        {
          "name": "MODIFIER_STATE_NOT_ON_MINIMAP",
          "value": "19",
          "description": "Set to true to cause the parent to become invisible on the minimap."
        },
        {
          "name": "MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES",
          "value": "20",
          "description": "Set to true to cause the parent to become invisible on the minimap for enemies."
        },
        {
          "name": "MODIFIER_STATE_LOW_ATTACK_PRIORITY",
          "value": "21",
          "description": "Set to true to cause the parent to become low attack priority, causing it to be the last to be hit when attack moving."
        },
        {
          "name": "MODIFIER_STATE_NO_HEALTH_BAR",
          "value": "22",
          "description": "Set to true to cause the parent to have its health bar disabled (invisible)."
        },
        {
          "name": "MODIFIER_STATE_FLYING",
          "value": "23",
          "description": "Set to true to cause the parent to fly, ignoring terrains and increasing its offset from the ground."
        },
        {
          "name": "MODIFIER_STATE_NO_UNIT_COLLISION",
          "value": "24",
          "description": "Set to true to cause the parent to become phased."
        },
        {
          "name": "MODIFIER_STATE_NO_TEAM_MOVE_TO",
          "value": "25",
          "description": ""
        },
        {
          "name": "MODIFIER_STATE_NO_TEAM_SELECT",
          "value": "26",
          "description": ""
        },
        {
          "name": "MODIFIER_STATE_PASSIVES_DISABLED",
          "value": "27",
          "description": "Set to true to cause the parent to have its passives disabled."
        },
        {
          "name": "MODIFIER_STATE_DOMINATED",
          "value": "28",
          "description": "Set to true to cause the parent to become dominated."
        },
        {
          "name": "MODIFIER_STATE_BLIND",
          "value": "29",
          "description": "Set to true to cause the parent to become blind."
        },
        {
          "name": "MODIFIER_STATE_OUT_OF_GAME",
          "value": "30",
          "description": ""
        },
        {
          "name": "MODIFIER_STATE_FAKE_ALLY",
          "value": "31",
          "description": ""
        },
        {
          "name": "MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY",
          "value": "32",
          "description": "Set to true to cause the parent to stay on the ground, but be considered flying when moving."
        },
        {
          "name": "MODIFIER_STATE_TRUESIGHT_IMMUNE",
          "value": "33",
          "description": "Set to true to cause the parent to become immune to truesight."
        },
        {
          "name": "MODIFIER_STATE_LAST",
          "value": "34",
          "description": ""
        }
      ]
    },
    {
      "title": "quest_text_replace_values_t",
      "prefix": "QUEST_TEXT_REPLACE_VALUE_",
      "values": [
        {
          "name": "QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
          "value": "0",
          "description": ""
        },
        {
          "name": "QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
          "value": "1",
          "description": ""
        },
        {
          "name": "QUEST_TEXT_REPLACE_VALUE_ROUND",
          "value": "2",
          "description": ""
        },
        {
          "name": "QUEST_TEXT_REPLACE_VALUE_REWARD",
          "value": "3",
          "description": ""
        },
        {
          "name": "QUEST_NUM_TEXT_REPLACE_VALUES",
          "value": "4",
          "description": ""
        }
      ]
    },
    {
      "title": "Find Types",
      "prefix": "FIND_UNITS_",
      "values": [
        {
          "name": "FIND_UNITS_EVERYWHERE",
          "value": "-1",
          "description": "Find units in the whole map."
        },
        {
          "name": "FIND_ANY_ORDER",
          "value": "0",
          "description": "Random the order units are found."
        },
        {
          "name": "FIND_CLOSEST",
          "value": "1",
          "description": "Find units from the closest to the source to the farthest."
        },
        {
          "name": "FIND_FARTHEST",
          "value": "2",
          "description": "Find units from the farthest to the source to the farthest."
        }
      ]
    },
    {
      "title": "subquest_text_replace_values_t",
      "prefix": "SUBQUEST_TEXT_REPLACE_VALUE_",
      "values": [
        {
          "name": "SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE",
          "value": "0",
          "description": ""
        },
        {
          "name": "SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE",
          "value": "1",
          "description": ""
        },
        {
          "name": "SUBQUEST_NUM_TEXT_REPLACE_VALUES",
          "value": "2",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTAScriptInventorySlot_t",
      "prefix": "DOTA_ITEM_SLOT_",
      "values": [
        {
          "name": "DOTA_ITEM_SLOT_1",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_ITEM_SLOT_2",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_ITEM_SLOT_3",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_ITEM_SLOT_4",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_ITEM_SLOT_5",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_ITEM_SLOT_6",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_STASH_SLOT_1",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_STASH_SLOT_2",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_STASH_SLOT_3",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_STASH_SLOT_4",
          "value": "9",
          "description": ""
        },
        {
          "name": "DOTA_STASH_SLOT_5",
          "value": "10",
          "description": ""
        },
        {
          "name": "DOTA_STASH_SLOT_6",
          "value": "11",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_GameState",
      "prefix": "DOTA_GAMERULES_STATE_",
      "values": [
        {
          "name": "DOTA_GAMERULES_STATE_INIT",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_HERO_SELECTION",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_STRATEGY_TIME",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_PRE_GAME",
          "value": "6",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
          "value": "7",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_POST_GAME",
          "value": "8",
          "description": ""
        },
        {
          "name": "DOTA_GAMERULES_STATE_DISCONNECT",
          "value": "9",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTALimits_t",
      "prefix": "DOTA_MAX_",
      "values": [
        {
          "name": "DOTA_DEFAULT_MAX_TEAM",
          "value": "5",
          "description": "Default number of players per team."
        },
        {
          "name": "DOTA_DEFAULT_MAX_TEAM_PLAYERS",
          "value": "10",
          "description": "Default number of non-spectator players supported."
        },
        {
          "name": "DOTA_MAX_PLAYER_TEAMS",
          "value": "10",
          "description": "Max number of player teams supported."
        },
        {
          "name": "DOTA_MAX_TEAM",
          "value": "24",
          "description": "Max number of players per team."
        },
        {
          "name": "DOTA_MAX_TEAM_PLAYERS",
          "value": "24",
          "description": "Max number of non-spectator players supported."
        },
        {
          "name": "DOTA_MAX_SPECTATOR_TEAM_SIZE",
          "value": "40",
          "description": "How many spectators can watch."
        },
        {
          "name": "DOTA_MAX_PLAYERS",
          "value": "64",
          "description": "Max number of players connected to the server including spectators."
        }
      ]
    },
    {
      "title": "GameActivity_t",
      "prefix": "ACT_DOTA_",
      "values": [
        {
          "name": "ACT_DOTA_IDLE",
          "value": "1500",
          "description": ""
        },
        {
          "name": "ACT_DOTA_IDLE_RARE",
          "value": "1501",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RUN",
          "value": "1502",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ATTACK",
          "value": "1503",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ATTACK2",
          "value": "1504",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ATTACK_EVENT",
          "value": "1505",
          "description": ""
        },
        {
          "name": "ACT_DOTA_DIE",
          "value": "1506",
          "description": ""
        },
        {
          "name": "ACT_DOTA_FLINCH",
          "value": "1507",
          "description": ""
        },
        {
          "name": "ACT_DOTA_FLAIL",
          "value": "1508",
          "description": ""
        },
        {
          "name": "ACT_DOTA_DISABLED",
          "value": "1509",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_1",
          "value": "1510",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_2",
          "value": "1511",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_3",
          "value": "1512",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_4",
          "value": "1513",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_5",
          "value": "1514",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_6",
          "value": "1515",
          "description": ""
        },
        {
          "name": "ACT_DOTA_OVERRIDE_ABILITY_1",
          "value": "1516",
          "description": ""
        },
        {
          "name": "ACT_DOTA_OVERRIDE_ABILITY_2",
          "value": "1517",
          "description": ""
        },
        {
          "name": "ACT_DOTA_OVERRIDE_ABILITY_3",
          "value": "1518",
          "description": ""
        },
        {
          "name": "ACT_DOTA_OVERRIDE_ABILITY_4",
          "value": "1519",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_1",
          "value": "1520",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_2",
          "value": "1521",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_3",
          "value": "1522",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_4",
          "value": "1523",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_5",
          "value": "1524",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_6",
          "value": "1525",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_END_ABILITY_1",
          "value": "1526",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_END_ABILITY_2",
          "value": "1527",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_END_ABILITY_3",
          "value": "1528",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_END_ABILITY_4",
          "value": "1529",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_END_ABILITY_5",
          "value": "1530",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_END_ABILITY_6",
          "value": "1531",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CONSTANT_LAYER",
          "value": "1532",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAPTURE",
          "value": "1533",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SPAWN",
          "value": "1534",
          "description": ""
        },
        {
          "name": "ACT_DOTA_KILLTAUNT",
          "value": "1535",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TAUNT",
          "value": "1536",
          "description": ""
        },
        {
          "name": "ACT_DOTA_THIRST",
          "value": "1537",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_DRAGONBREATH",
          "value": "1538",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ECHO_SLAM",
          "value": "1539",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_1_END",
          "value": "1540",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_2_END",
          "value": "1541",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_3_END",
          "value": "1542",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_4_END",
          "value": "1543",
          "description": ""
        },
        {
          "name": "ACT_MIRANA_LEAP_END",
          "value": "1544",
          "description": ""
        },
        {
          "name": "ACT_WAVEFORM_START",
          "value": "1545",
          "description": ""
        },
        {
          "name": "ACT_WAVEFORM_END",
          "value": "1546",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_ROT",
          "value": "1547",
          "description": ""
        },
        {
          "name": "ACT_DOTA_DIE_SPECIAL",
          "value": "1548",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RATTLETRAP_BATTERYASSAULT",
          "value": "1549",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RATTLETRAP_POWERCOGS",
          "value": "1550",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_START",
          "value": "1551",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP",
          "value": "1552",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RATTLETRAP_HOOKSHOT_END",
          "value": "1553",
          "description": ""
        },
        {
          "name": "ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE",
          "value": "1554",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TINKER_REARM1",
          "value": "1555",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TINKER_REARM2",
          "value": "1556",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TINKER_REARM3",
          "value": "1557",
          "description": ""
        },
        {
          "name": "ACT_TINY_AVALANCHE",
          "value": "1558",
          "description": ""
        },
        {
          "name": "ACT_TINY_TOSS",
          "value": "1559",
          "description": ""
        },
        {
          "name": "ACT_TINY_GROWL",
          "value": "1560",
          "description": ""
        },
        {
          "name": "ACT_DOTA_WEAVERBUG_ATTACH",
          "value": "1561",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_WILD_AXES_END",
          "value": "1562",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_LIFE_BREAK_START",
          "value": "1563",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_LIFE_BREAK_END",
          "value": "1564",
          "description": ""
        },
        {
          "name": "ACT_DOTA_NIGHTSTALKER_TRANSITION",
          "value": "1565",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LIFESTEALER_RAGE",
          "value": "1566",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LIFESTEALER_OPEN_WOUNDS",
          "value": "1567",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SAND_KING_BURROW_IN",
          "value": "1568",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SAND_KING_BURROW_OUT",
          "value": "1569",
          "description": ""
        },
        {
          "name": "ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK",
          "value": "1570",
          "description": ""
        },
        {
          "name": "ACT_DOTA_WHEEL_LAYER",
          "value": "1571",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START",
          "value": "1572",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ALCHEMIST_CONCOCTION",
          "value": "1573",
          "description": ""
        },
        {
          "name": "ACT_DOTA_JAKIRO_LIQUIDFIRE_START",
          "value": "1574",
          "description": ""
        },
        {
          "name": "ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP",
          "value": "1575",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LIFESTEALER_INFEST",
          "value": "1576",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LIFESTEALER_INFEST_END",
          "value": "1577",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LASSO_LOOP",
          "value": "1578",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ALCHEMIST_CONCOCTION_THROW",
          "value": "1579",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END",
          "value": "1580",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_COLD_SNAP",
          "value": "1581",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_GHOST_WALK",
          "value": "1582",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_TORNADO",
          "value": "1583",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_EMP",
          "value": "1584",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ALACRITY",
          "value": "1585",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_CHAOS_METEOR",
          "value": "1586",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_SUN_STRIKE",
          "value": "1587",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_FORGE_SPIRIT",
          "value": "1588",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ICE_WALL",
          "value": "1589",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_DEAFENING_BLAST",
          "value": "1590",
          "description": ""
        },
        {
          "name": "ACT_DOTA_VICTORY",
          "value": "1591",
          "description": ""
        },
        {
          "name": "ACT_DOTA_DEFEAT",
          "value": "1592",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE",
          "value": "1593",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SPIRIT_BREAKER_CHARGE_END",
          "value": "1594",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT",
          "value": "1595",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_END",
          "value": "1596",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_REFRACTION",
          "value": "1597",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_7",
          "value": "1598",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CANCEL_SIREN_SONG",
          "value": "1599",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHANNEL_ABILITY_7",
          "value": "1600",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LOADOUT",
          "value": "1601",
          "description": ""
        },
        {
          "name": "ACT_DOTA_FORCESTAFF_END",
          "value": "1602",
          "description": ""
        },
        {
          "name": "ACT_DOTA_POOF_END",
          "value": "1603",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SLARK_POUNCE",
          "value": "1604",
          "description": ""
        },
        {
          "name": "ACT_DOTA_MAGNUS_SKEWER_START",
          "value": "1605",
          "description": ""
        },
        {
          "name": "ACT_DOTA_MAGNUS_SKEWER_END",
          "value": "1606",
          "description": ""
        },
        {
          "name": "ACT_DOTA_MEDUSA_STONE_GAZE",
          "value": "1607",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RELAX_START",
          "value": "1608",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RELAX_LOOP",
          "value": "1609",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RELAX_END",
          "value": "1610",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CENTAUR_STAMPEDE",
          "value": "1611",
          "description": ""
        },
        {
          "name": "ACT_DOTA_BELLYACHE_START",
          "value": "1612",
          "description": ""
        },
        {
          "name": "ACT_DOTA_BELLYACHE_LOOP",
          "value": "1613",
          "description": ""
        },
        {
          "name": "ACT_DOTA_BELLYACHE_END",
          "value": "1614",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ROQUELAIRE_LAND",
          "value": "1615",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ROQUELAIRE_LAND_IDLE",
          "value": "1616",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GREEVIL_CAST",
          "value": "1617",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GREEVIL_OVERRIDE_ABILITY",
          "value": "1618",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GREEVIL_HOOK_START",
          "value": "1619",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GREEVIL_HOOK_END",
          "value": "1620",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GREEVIL_BLINK_BONE",
          "value": "1621",
          "description": ""
        },
        {
          "name": "ACT_DOTA_IDLE_SLEEPING",
          "value": "1622",
          "description": ""
        },
        {
          "name": "ACT_DOTA_INTRO",
          "value": "1623",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GESTURE_POINT",
          "value": "1624",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GESTURE_ACCENT",
          "value": "1625",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SLEEPING_END",
          "value": "1626",
          "description": ""
        },
        {
          "name": "ACT_DOTA_AMBUSH",
          "value": "1627",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ITEM_LOOK",
          "value": "1628",
          "description": ""
        },
        {
          "name": "ACT_DOTA_STARTLE",
          "value": "1629",
          "description": ""
        },
        {
          "name": "ACT_DOTA_FRUSTRATION",
          "value": "1630",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_REACT",
          "value": "1631",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_END_REACT",
          "value": "1632",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SHRUG",
          "value": "1633",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RELAX_LOOP_END",
          "value": "1634",
          "description": ""
        },
        {
          "name": "ACT_DOTA_PRESENT_ITEM",
          "value": "1635",
          "description": ""
        },
        {
          "name": "ACT_DOTA_IDLE_IMPATIENT",
          "value": "1636",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SHARPEN_WEAPON",
          "value": "1637",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SHARPEN_WEAPON_OUT",
          "value": "1638",
          "description": ""
        },
        {
          "name": "ACT_DOTA_IDLE_SLEEPING_END",
          "value": "1639",
          "description": ""
        },
        {
          "name": "ACT_DOTA_BRIDGE_DESTROY",
          "value": "1640",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TAUNT_SNIPER",
          "value": "1641",
          "description": ""
        },
        {
          "name": "ACT_DOTA_DEATH_BY_SNIPER",
          "value": "1642",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LOOK_AROUND",
          "value": "1643",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAGED_CREEP_RAGE",
          "value": "1644",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAGED_CREEP_RAGE_OUT",
          "value": "1645",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAGED_CREEP_SMASH",
          "value": "1646",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAGED_CREEP_SMASH_OUT",
          "value": "1647",
          "description": ""
        },
        {
          "name": "ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP",
          "value": "1648",
          "description": ""
        },
        {
          "name": "ACT_DOTA_INTRO_LOOP",
          "value": "1649",
          "description": ""
        },
        {
          "name": "ACT_DOTA_BRIDGE_THREAT",
          "value": "1650",
          "description": ""
        },
        {
          "name": "ACT_DOTA_DAGON",
          "value": "1651",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START",
          "value": "1652",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL",
          "value": "1653",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END",
          "value": "1654",
          "description": ""
        },
        {
          "name": "ACT_DOTA_NIAN_PIN_START",
          "value": "1655",
          "description": ""
        },
        {
          "name": "ACT_DOTA_NIAN_PIN_LOOP",
          "value": "1656",
          "description": ""
        },
        {
          "name": "ACT_DOTA_NIAN_PIN_END",
          "value": "1657",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LEAP_STUN",
          "value": "1658",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LEAP_SWIPE",
          "value": "1659",
          "description": ""
        },
        {
          "name": "ACT_DOTA_NIAN_INTRO_LEAP",
          "value": "1660",
          "description": ""
        },
        {
          "name": "ACT_DOTA_AREA_DENY",
          "value": "1661",
          "description": ""
        },
        {
          "name": "ACT_DOTA_NIAN_PIN_TO_STUN",
          "value": "1662",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RAZE_1",
          "value": "1663",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RAZE_2",
          "value": "1664",
          "description": ""
        },
        {
          "name": "ACT_DOTA_RAZE_3",
          "value": "1665",
          "description": ""
        },
        {
          "name": "ACT_DOTA_UNDYING_DECAY",
          "value": "1666",
          "description": ""
        },
        {
          "name": "ACT_DOTA_UNDYING_SOUL_RIP",
          "value": "1667",
          "description": ""
        },
        {
          "name": "ACT_DOTA_UNDYING_TOMBSTONE",
          "value": "1668",
          "description": ""
        },
        {
          "name": "ACT_DOTA_WHIRLING_AXES_RANGED",
          "value": "1669",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SHALLOW_GRAVE",
          "value": "1670",
          "description": ""
        },
        {
          "name": "ACT_DOTA_COLD_FEET",
          "value": "1671",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ICE_VORTEX",
          "value": "1672",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CHILLING_TOUCH",
          "value": "1673",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ENFEEBLE",
          "value": "1674",
          "description": ""
        },
        {
          "name": "ACT_DOTA_FATAL_BONDS",
          "value": "1675",
          "description": ""
        },
        {
          "name": "ACT_DOTA_MIDNIGHT_PULSE",
          "value": "1676",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ANCESTRAL_SPIRIT",
          "value": "1677",
          "description": ""
        },
        {
          "name": "ACT_DOTA_THUNDER_STRIKE",
          "value": "1678",
          "description": ""
        },
        {
          "name": "ACT_DOTA_KINETIC_FIELD",
          "value": "1679",
          "description": ""
        },
        {
          "name": "ACT_DOTA_STATIC_STORM",
          "value": "1680",
          "description": ""
        },
        {
          "name": "ACT_DOTA_MINI_TAUNT",
          "value": "1681",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ARCTIC_BURN_END",
          "value": "1682",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LOADOUT_RARE",
          "value": "1683",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SWIM",
          "value": "1684",
          "description": ""
        },
        {
          "name": "ACT_DOTA_FLEE",
          "value": "1685",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TROT",
          "value": "1686",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SHAKE",
          "value": "1687",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SWIM_IDLE",
          "value": "1688",
          "description": ""
        },
        {
          "name": "ACT_DOTA_WAIT_IDLE",
          "value": "1689",
          "description": ""
        },
        {
          "name": "ACT_DOTA_GREET",
          "value": "1690",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_COOP_START",
          "value": "1691",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_COOP_WAIT",
          "value": "1692",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_COOP_END",
          "value": "1693",
          "description": ""
        },
        {
          "name": "ACT_DOTA_TELEPORT_COOP_EXIT",
          "value": "1694",
          "description": ""
        },
        {
          "name": "ACT_DOTA_SHOPKEEPER_PET_INTERACT",
          "value": "1695",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ITEM_PICKUP",
          "value": "1696",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ITEM_DROP",
          "value": "1697",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAPTURE_PET",
          "value": "1698",
          "description": ""
        },
        {
          "name": "ACT_DOTA_PET_WARD_OBSERVER",
          "value": "1699",
          "description": ""
        },
        {
          "name": "ACT_DOTA_PET_WARD_SENTRY",
          "value": "1700",
          "description": ""
        },
        {
          "name": "ACT_DOTA_PET_LEVEL",
          "value": "1701",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_BURROW_END",
          "value": "1702",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LIFESTEALER_ASSIMILATE",
          "value": "1703",
          "description": ""
        },
        {
          "name": "ACT_DOTA_LIFESTEALER_EJECT",
          "value": "1704",
          "description": ""
        },
        {
          "name": "ACT_DOTA_ATTACK_EVENT_BASH",
          "value": "1705",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAPTURE_RARE",
          "value": "1706",
          "description": ""
        },
        {
          "name": "ACT_DOTA_AW_MAGNETIC_FIELD",
          "value": "1707",
          "description": ""
        },
        {
          "name": "ACT_DOTA_CAST_GHOST_SHIP",
          "value": "1708",
          "description": ""
        }
      ]
    },
    {
      "title": "modifierfunction",
      "prefix": "MODIFIER_PROPERTY_",
      "values": [
        {
          "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE",
          "value": "0",
          "description": "GetModifierPreAttack_BonusDamage"
        },
        {
          "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_PROC",
          "value": "1",
          "description": "GetModifierPreAttack_BonusDamage_Proc"
        },
        {
          "name": "MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT",
          "value": "2",
          "description": "GetModifierPreAttack_BonusDamagePostCrit"
        },
        {
          "name": "MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE",
          "value": "3",
          "description": "GetModifierBaseAttack_BonusDamage"
        },
        {
          "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL",
          "value": "4",
          "description": "GetModifierProcAttack_BonusDamage_Physical"
        },
        {
          "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL",
          "value": "5",
          "description": "GetModifierProcAttack_BonusDamage_Magical"
        },
        {
          "name": "MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE",
          "value": "6",
          "description": "GetModifierProcAttack_BonusDamage_Pure"
        },
        {
          "name": "MODIFIER_PROPERTY_PROCATTACK_FEEDBACK",
          "value": "7",
          "description": "GetModifierProcAttack_Feedback"
        },
        {
          "name": "MODIFIER_PROPERTY_PRE_ATTACK",
          "value": "8",
          "description": "GetModifierPreAttack"
        },
        {
          "name": "MODIFIER_PROPERTY_INVISIBILITY_LEVEL",
          "value": "9",
          "description": "GetModifierInvisibilityLevel",
          "funcdesc": "Generates a level of opacity on the parent."
        },
        {
          "name": "MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY",
          "value": "10",
          "description": "GetModifierPersistentInvisibility"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT",
          "value": "11",
          "description": "GetModifierMoveSpeedBonus_Constant",
          "funcdesc": "Increases the move speed of the parent by a constant returned to it. Can get negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE",
          "value": "12",
          "description": "GetModifierMoveSpeedOverride",
          "funcdesc": "changes the base move speed of the parent by a value returned to it. Minimum of 100 move speed"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE",
          "value": "13",
          "description": "GetModifierMoveSpeedBonus_Percentage",
          "funcdesc": "Increases the move speed of the parent by a percentage returned to it. Can get negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE",
          "value": "14",
          "description": "GetModifierMoveSpeedBonus_Percentage_Unique"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2",
          "value": "15",
          "description": "GetModifierMoveSpeedBonus_Percentage_Unique_2"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE",
          "value": "16",
          "description": "GetModifierMoveSpeedBonus_Special_Boots"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2",
          "value": "17",
          "description": "GetModifierMoveSpeedBonus_Special_Boots_2"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE",
          "value": "18",
          "description": "GetModifierMoveSpeed_Absolute",
          "funcdesc": "Sets the move speed of the parent to a value. Nothing can increase or decrease move speed"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN",
          "value": "19",
          "description": "GetModifierMoveSpeed_AbsoluteMin",
          "funcdesc": "Sets the move speed of the parent to a minimum value. Nothing can decrease move speed below the chosen value"
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_LIMIT",
          "value": "20",
          "description": "GetModifierMoveSpeed_Limit",
          "funcdesc": "Sets the move speed limit of the parent."
        },
        {
          "name": "MODIFIER_PROPERTY_MOVESPEED_MAX",
          "value": "21",
          "description": "GetModifierMoveSpeed_Max"
        },
        {
          "name": "MODIFIER_PROPERTY_ATTACKSPEED_BASE_OVERRIDE",
          "value": "22",
          "description": "GetModifierAttackSpeedBaseOverride"
        },
        {
          "name": "MODIFIER_PROPERTY_FIXED_ATTACK_RATE",
          "value": "23",
          "description": "GetModifierAttackSpeedBaseOverride"
        },
        {
          "name": "MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT",
          "value": "24",
          "description": "GetModifierAttackSpeedBonus_Constant",
          "funcdesc": "Increases the attack speed of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT",
          "value": "25",
          "description": "GetModifierCooldownReduction_Constant",
          "funcdesc": "Reduces the cooldown of all skills and items of the parent by a constant returned to it. Can get negative values to increase cooldowns instead"
        },
        {
          "name": "MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT",
          "value": "26",
          "description": "GetModifierBaseAttackTimeConstant",
          "funcdesc": "Decreases the base attack time of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT",
          "value": "27",
          "description": "GetModifierAttackPointConstant"
        },
        {
          "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE",
          "value": "28",
          "description": "GetModifierDamageOutgoing_Percentage",
          "funcdesc": "Increases the raw damage that the parent deals by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION",
          "value": "29",
          "description": "GetModifierDamageOutgoing_Percentage_Illusion"
        },
        {
          "name": "MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE",
          "value": "30",
          "description": "GetModifierTotalDamageOutgoing_Percentage",
          "funcdesc": "Increases the damage of all sources that the parent deals by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE",
          "value": "31",
          "description": "GetModifierSpellAmplify_Percentage"
        },
        {
          "name": "MODIFIER_PROPERTY_HP_REGEN_AMPLIFY_PERCENTAGE",
          "value": "32",
          "description": "GetModifierHPRegenAmplify_Percentage",
          "funcdesc": "Increases health regen and heal gained by parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE",
          "value": "33",
          "description": "GetModifierMagicDamageOutgoing_Percentage",
          "funcdesc": "Increases the magic damage that the parent deals by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE",
          "value": "34",
          "description": "GetModifierBaseDamageOutgoing_Percentage",
          "funcdesc": "Increases the base damage of that the parent deals by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE",
          "value": "35",
          "description": "GetModifierBaseDamageOutgoing_PercentageUnique"
        },
        {
          "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE",
          "value": "36",
          "description": "GetModifierIncomingDamage_Percentage",
          "funcdesc": "Increases the damage of all sources that the parent takes by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE",
          "value": "37",
          "description": "GetModifierIncomingPhysicalDamage_Percentage",
          "funcdesc": "Increases the damage of physical sources that the parent takes by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT",
          "value": "38",
          "description": "GetModifierIncomingPhysicalDamageConstant"
        },
        {
          "name": "MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT",
          "value": "39",
          "description": "GetModifierIncomingSpellDamageConstant",
          "funcdesc": "Increases the damage of magical sources that the parent takes by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_EVASION_CONSTANT",
          "value": "40",
          "description": "GetModifierEvasion_Constant",
          "funcdesc": "Increases the evasion of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT",
          "value": "41",
          "description": "GetModifierNegativeEvasion_Constant"
        },
        {
          "name": "MODIFIER_PROPERTY_AVOID_DAMAGE",
          "value": "42",
          "description": "GetModifierAvoidDamage"
        },
        {
          "name": "MODIFIER_PROPERTY_AVOID_SPELL",
          "value": "43",
          "description": "GetModifierAvoidSpell"
        },
        {
          "name": "MODIFIER_PROPERTY_MISS_PERCENTAGE",
          "value": "44",
          "description": "GetModifierMiss_Percentage",
          "funcdesc": "Increases the chance of the parent to miss by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS",
          "value": "45",
          "description": "GetModifierPhysicalArmorBonus",
          "funcdesc": "Increases the armor of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE",
          "value": "46",
          "description": "GetModifierPhysicalArmorBonusUnique"
        },
        {
          "name": "MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE",
          "value": "47",
          "description": "GetModifierPhysicalArmorBonusUniqueActive"
        },
        {
          "name": "MODIFIER_PROPERTY_IGNORE_PHYSICAL_ARMOR",
          "value": "48",
          "description": "GetModifierIgnorePhysicalArmor"
        },
        {
          "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DIRECT_MODIFICATION",
          "value": "49",
          "description": "GetModifierMagicalResistanceDirectModification"
        },
        {
          "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS",
          "value": "50",
          "description": "GetModifierMagicalResistanceBonus",
          "funcdesc": "Increases the magical resistance of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE",
          "value": "51",
          "description": "GetModifierMagicalResistanceDecrepifyUnique"
        },
        {
          "name": "MODIFIER_PROPERTY_BASE_MANA_REGEN",
          "value": "52",
          "description": "GetModifierBaseRegen",
          "funcdesc": "Increases the base mana regeneration of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT",
          "value": "53",
          "description": "GetModifierConstantManaRegen",
          "funcdesc": "Increases the mana regeneration of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE",
          "value": "54",
          "description": "GetModifierConstantManaRegenUnique"
        },
        {
          "name": "MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE",
          "value": "55",
          "description": "GetModifierPercentageManaRegen",
          "funcdesc": "Increases the mana regeneration of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE",
          "value": "56",
          "description": "GetModifierTotalPercentageManaRegen",
          "funcdesc": "Increases the total mana regeneration of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT",
          "value": "57",
          "description": "GetModifierConstantHealthRegen",
          "funcdesc": "Increases the health regeneration of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE",
          "value": "58",
          "description": "GetModifierHealthRegenPercentage",
          "funcdesc": "Increases the evasion of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_HEALTH_BONUS",
          "value": "59",
          "description": "GetModifierHealthBonus",
          "funcdesc": "Increases the maximum health of the parent by a constant returned to it. Can return negative values. Health is scaled to the same percentage as before the increase"
        },
        {
          "name": "MODIFIER_PROPERTY_MANA_BONUS",
          "value": "60",
          "description": "GetModifierManaBonus",
          "funcdesc": "Increases the maximum mana of the parent by a constant returned to it. Can return negative values. Mana is scaled to the same percentage as before the increase"
        },
        {
          "name": "MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS",
          "value": "61",
          "description": "GetModifierExtraStrengthBonus"
        },
        {
          "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS",
          "value": "62",
          "description": "GetModifierExtraHealthBonus",
          "funcdesc": "Increases the maximum health of the parent by a constant returned to it. Can return negative values. Ignores current health"
        },
        {
          "name": "MODIFIER_PROPERTY_EXTRA_MANA_BONUS",
          "value": "63",
          "description": "GetModifierExtraManaBonus",
          "funcdesc": "Increases the maximum mana of the parent by a constant returned to it. Can return negative values. Ignores current mana"
        },
        {
          "name": "MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE",
          "value": "64",
          "description": "GetModifierExtraHealthPercentage",
          "funcdesc": "Increases the maximum health of the parent by a percentage returned to it. Can return negative values. Ignores current health"
        },
        {
          "name": "MODIFIER_PROPERTY_STATS_STRENGTH_BONUS",
          "value": "65",
          "description": "GetModifierBonusStats_Strength",
          "funcdesc": "Increases the strength stat of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_STATS_AGILITY_BONUS",
          "value": "66",
          "description": "GetModifierBonusStats_Agility",
          "funcdesc": "Increases the agility stat of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_STATS_INTELLECT_BONUS",
          "value": "67",
          "description": "GetModifierBonusStats_Intellect",
          "funcdesc": "Increases the intelligence stat of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS",
          "value": "68",
          "description": "GetModifierCastRangeBonus",
          "funcdesc": "Increases the cast range of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_CAST_RANGE_BONUS_STACKING",
          "value": "69",
          "description": "GetModifierCastRangeBonusStacking"
        },
        {
          "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS",
          "value": "70",
          "description": "GetModifierAttackRangeBonus",
          "funcdesc": "Increases the attack range of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE",
          "value": "71",
          "description": "GetModifierAttackRangeBonusUnique"
        },
        {
          "name": "MODIFIER_PROPERTY_MAX_ATTACK_RANGE",
          "value": "72",
          "description": "GetModifierMaxAttackRange"
        },
        {
          "name": "MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS",
          "value": "73",
          "description": "GetModifierProjectileSpeedBonus",
          "funcdesc": "Increases the projectile speed of attacks sourced by the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_REINCARNATION",
          "value": "74",
          "description": "ReincarnateTime"
        },
        {
          "name": "MODIFIER_PROPERTY_RESPAWNTIME",
          "value": "75",
          "description": "GetModifierConstantRespawnTime",
          "funcdesc": "Increases the respawn time of the parent by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE",
          "value": "76",
          "description": "GetModifierPercentageRespawnTime",
          "funcdesc": "Increases the respawn time of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_RESPAWNTIME_STACKING",
          "value": "77",
          "description": "GetModifierStackingRespawnTime",
          "funcdesc": "Increases the respawn time of the parent by a constant returned to it. Can return negative values. Stacks with other modifiers"
        },
        {
          "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE",
          "value": "78",
          "description": "GetModifierPercentageCooldown",
          "funcdesc": "Increases the cooldown of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING",
          "value": "79",
          "description": "GetModifierPercentageCooldownStacking"
        },
        {
          "name": "MODIFIER_PROPERTY_CASTTIME_PERCENTAGE",
          "value": "80",
          "description": "GetModifierPercentageCasttime",
          "funcdesc": "Increases the cast time of the parent's abilities by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_MANACOST_PERCENTAGE",
          "value": "81",
          "description": "GetModifierPercentageManacost",
          "funcdesc": "Increases the mana cost of the parent's abilities by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_DEATHGOLDCOST",
          "value": "82",
          "description": "GetModifierConstantDeathGoldCost"
        },
        {
          "name": "MODIFIER_PROPERTY_EXP_RATE_BOOST",
          "value": "83",
          "description": "GetModifierPercentageExpRateBoost"
        },
        {
          "name": "MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE",
          "value": "84",
          "description": "GetModifierPreAttack_CriticalStrike",
          "funcdesc": "Procs a critical strike dealing the extra damage returned to it"
        },
        {
          "name": "MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE",
          "value": "85",
          "description": "GetModifierPreAttack_Target_CriticalStrike"
        },
        {
          "name": "MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK",
          "value": "86",
          "description": "GetModifierMagical_ConstantBlock"
        },
        {
          "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK",
          "value": "87",
          "description": "GetModifierPhysical_ConstantBlock",
          "funcdesc": "Blocks damage the parent takes by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL",
          "value": "88",
          "description": "GetModifierPhysical_ConstantBlockSpecial"
        },
        {
          "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR",
          "value": "89",
          "description": "GetModifierPhysical_ConstantBlockUnavoidablePreArmor"
        },
        {
          "name": "MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK",
          "value": "90",
          "description": "GetModifierTotal_ConstantBlock"
        },
        {
          "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION",
          "value": "91",
          "description": "GetOverrideAnimation",
          "funcdesc": "Forces the parent to play a specific animation."
        },
        {
          "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT",
          "value": "92",
          "description": "GetOverrideAnimationWeight"
        },
        {
          "name": "MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE",
          "value": "93",
          "description": "GetOverrideAnimationRate"
        },
        {
          "name": "MODIFIER_PROPERTY_ABSORB_SPELL",
          "value": "94",
          "description": "GetAbsorbSpell",
          "funcdesc": "Allows the parent to ignore targeted abilities. (Similar to linken's sphere)"
        },
        {
          "name": "MODIFIER_PROPERTY_REFLECT_SPELL",
          "value": "95",
          "description": "GetReflectSpell",
          "funcdesc": "Allows the parent to reflect targeted abilities. (Similar to Lotus Orb)"
        },
        {
          "name": "MODIFIER_PROPERTY_DISABLE_AUTOATTACK",
          "value": "96",
          "description": "GetDisableAutoAttack"
        },
        {
          "name": "MODIFIER_PROPERTY_BONUS_DAY_VISION",
          "value": "97",
          "description": "GetBonusDayVision",
          "funcdesc": "Increases the vision of the parent during the day by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION",
          "value": "98",
          "description": "GetBonusNightVision",
          "funcdesc": "Increases the vision of the parent during the night by a constant returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE",
          "value": "99",
          "description": "GetBonusNightVisionUnique"
        },
        {
          "name": "MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE",
          "value": "100",
          "description": "GetBonusVisionPercentage",
          "funcdesc": "Increases the vision of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_FIXED_DAY_VISION",
          "value": "101",
          "description": "GetFixedDayVision",
          "funcdesc": "Sets the vision of the parent during the day to a fixed value returned to it. Cannot be changed by any means"
        },
        {
          "name": "MODIFIER_PROPERTY_FIXED_NIGHT_VISION",
          "value": "102",
          "description": "GetFixedNightVision",
          "funcdesc": "Sets the vision of the parent during the night to a fixed value returned to it. Cannot be changed by any means"
        },
        {
          "name": "MODIFIER_PROPERTY_MIN_HEALTH",
          "value": "103",
          "description": "GetMinHealth"
        },
        {
          "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL",
          "value": "104",
          "description": "GetAbsoluteNoDamagePhysical"
        },
        {
          "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL",
          "value": "105",
          "description": "GetAbsoluteNoDamageMagical"
        },
        {
          "name": "MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE",
          "value": "106",
          "description": "GetAbsoluteNoDamagePure"
        },
        {
          "name": "MODIFIER_PROPERTY_IS_ILLUSION",
          "value": "107",
          "description": "GetIsIllusion"
        },
        {
          "name": "MODIFIER_PROPERTY_ILLUSION_LABEL",
          "value": "108",
          "description": "GetModifierIllusionLabel"
        },
        {
          "name": "MODIFIER_PROPERTY_SUPER_ILLUSION",
          "value": "109",
          "description": "GetModifierSuperIllusion"
        },
        {
          "name": "MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE",
          "value": "110",
          "description": "GetModifierSuperIllusionWithUltimate"
        },
        {
          "name": "MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE",
          "value": "111",
          "description": "GetModifierTurnRate_Percentage",
          "funcdesc": "Increases the turn rate of the parent by a percentage returned to it. Can return negative values"
        },
        {
          "name": "MODIFIER_PROPERTY_DISABLE_HEALING",
          "value": "112",
          "description": "GetDisableHealing",
          "funcdesc": "Negates healing applied to the parent."
        },
        {
          "name": "MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK",
          "value": "113",
          "description": "GetAlwaysAllowAttack"
        },
        {
          "name": "MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL",
          "value": "114",
          "description": "GetOverrideAttackMagical"
        },
        {
          "name": "MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH",
          "value": "115",
          "description": "GetModifierUnitStatsNeedsRefresh"
        },
        {
          "name": "MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER",
          "value": "116",
          "description": "GetModifierBountyCreepMultiplier"
        },
        {
          "name": "MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER",
          "value": "117",
          "description": "GetModifierBountyOtherMultiplier"
        },
        {
          "name": "MODIFIER_EVENT_ON_SPELL_TARGET_READY",
          "value": "118",
          "description": "OnSpellTargetReady"
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK_RECORD",
          "value": "119",
          "description": "OnAttackRecord"
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK_START",
          "value": "120",
          "description": "OnAttackStart",
          "funcdesc": "Event that fires when an attack starts."
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK",
          "value": "121",
          "description": "OnAttack",
          "funcdesc": "Event that fires when an attack was completed, regardless of the result of it"
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK_LANDED",
          "value": "122",
          "description": "OnAttackLanded",
          "funcdesc": "Event that fires when an attack landed on its target successfully"
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK_FAIL",
          "value": "123",
          "description": "OnAttackFail",
          "funcdesc": "Event that fires when an attack failed to land on its target"
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK_ALLIED",
          "value": "124",
          "description": "OnAttackAllied",
          "funcdesc": "Event that fires when attacking allies."
        },
        {
          "name": "MODIFIER_EVENT_ON_PROJECTILE_DODGE",
          "value": "125",
          "description": "OnProjectileDodge",
          "funcdesc": "Event that fires when dodging a projectile. (Disjointing it)"
        },
        {
          "name": "MODIFIER_EVENT_ON_ORDER",
          "value": "126",
          "description": "OnOrder",
          "funcdesc": "Event that fires when an order is given to the parent"
        },
        {
          "name": "MODIFIER_EVENT_ON_UNIT_MOVED",
          "value": "127",
          "description": "OnUnitMoved",
          "funcdesc": "Event that fires when a unit moved"
        },
        {
          "name": "MODIFIER_EVENT_ON_ABILITY_START",
          "value": "128",
          "description": "OnAbilityStart",
          "funcdesc": "Event that fires when starting to use an ability"
        },
        {
          "name": "MODIFIER_EVENT_ON_ABILITY_EXECUTED",
          "value": "129",
          "description": "OnAbilityExecuted",
          "funcdesc": "Event that fires when finishing the ability phase stage of the ability"
        },
        {
          "name": "MODIFIER_EVENT_ON_ABILITY_FULLY_CAST",
          "value": "130",
          "description": "OnAbilityFullyCast",
          "funcdesc": "Event that fires when the ability has completely activated"
        },
        {
          "name": "MODIFIER_EVENT_ON_BREAK_INVISIBILITY",
          "value": "131",
          "description": "OnBreakInvisibility",
          "funcdesc": "Event that fires when breaking invisibility"
        },
        {
          "name": "MODIFIER_EVENT_ON_ABILITY_END_CHANNEL",
          "value": "132",
          "description": "OnAbilityEndChannel",
          "funcdesc": "Event that fires when finishing a channel"
        },
        {
          "name": "MODIFIER_EVENT_ON_PROCESS_UPGRADE",
          "value": "133",
          "description": ""
        },
        {
          "name": "MODIFIER_EVENT_ON_REFRESH",
          "value": "134",
          "description": ""
        },
        {
          "name": "MODIFIER_EVENT_ON_TAKEDAMAGE",
          "value": "135",
          "description": "OnTakeDamage",
          "funcdesc": "Event that fires when taking damage"
        },
        {
          "name": "MODIFIER_EVENT_ON_STATE_CHANGED",
          "value": "136",
          "description": "OnStateChanged",
          "funcdesc": "Event that fires when a state is changed"
        },
        {
          "name": "MODIFIER_EVENT_ON_ORB_EFFECT",
          "value": "137",
          "description": ""
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACKED",
          "value": "138",
          "description": "OnAttacked",
          "funcdesc": "Event that fires when being attacked"
        },
        {
          "name": "MODIFIER_EVENT_ON_DEATH",
          "value": "139",
          "description": "OnDeath",
          "funcdesc": "Event that fires when dying"
        },
        {
          "name": "MODIFIER_EVENT_ON_RESPAWN",
          "value": "140",
          "description": "OnRespawn",
          "funcdesc": "Event that fires when respawning"
        },
        {
          "name": "MODIFIER_EVENT_ON_SPENT_MANA",
          "value": "141",
          "description": "OnSpentMana",
          "funcdesc": "Event that fires when spending mana on items or abilities"
        },
        {
          "name": "MODIFIER_EVENT_ON_TELEPORTING",
          "value": "142",
          "description": "OnTeleporting",
          "funcdesc": "Event that fires when starting to teleporting"
        },
        {
          "name": "MODIFIER_EVENT_ON_TELEPORTED",
          "value": "143",
          "description": "OnTeleported",
          "funcdesc": "Event that fires when completing a teleport"
        },
        {
          "name": "MODIFIER_EVENT_ON_SET_LOCATION",
          "value": "144",
          "description": "OnSetLocation"
        },
        {
          "name": "MODIFIER_EVENT_ON_HEALTH_GAINED",
          "value": "145",
          "description": "OnHealthGained"
        },
        {
          "name": "MODIFIER_EVENT_ON_MANA_GAINED",
          "value": "146",
          "description": "OnManaGained"
        },
        {
          "name": "MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT",
          "value": "147",
          "description": "OnTakeDamageKillCredit"
        },
        {
          "name": "MODIFIER_EVENT_ON_HERO_KILLED",
          "value": "148",
          "description": "OnHeroKilled",
          "funcdesc": "Event that fires when a hero is killed"
        },
        {
          "name": "MODIFIER_EVENT_ON_HEAL_RECEIVED",
          "value": "149",
          "description": "OnHealReceived",
          "funcdesc": "Event that fires when being healed"
        },
        {
          "name": "MODIFIER_EVENT_ON_BUILDING_KILLED",
          "value": "150",
          "description": "OnBuildingKilled",
          "funcdesc": "Event that fires when a building is destroyed"
        },
        {
          "name": "MODIFIER_EVENT_ON_MODEL_CHANGED",
          "value": "151",
          "description": "OnModelChanged",
          "funcdesc": "Event that fires when the model changes"
        },
        {
          "name": "MODIFIER_EVENT_ON_MODIFIER_ADDED",
          "value": "152",
          "description": "OnModifierAdded"
        },
        {
          "name": "MODIFIER_PROPERTY_TOOLTIP",
          "value": "153",
          "description": "OnTooltip"
        },
        {
          "name": "MODIFIER_PROPERTY_MODEL_CHANGE",
          "value": "154",
          "description": "GetModifierModelChange",
          "funcdesc": "Changes the parent's model"
        },
        {
          "name": "MODIFIER_PROPERTY_MODEL_SCALE",
          "value": "155",
          "description": "GetModifierModelScale",
          "funcdesc": "Changes the parent's model scale"
        },
        {
          "name": "MODIFIER_PROPERTY_IS_SCEPTER",
          "value": "156",
          "description": "GetModifierScepter"
        },
        {
          "name": "MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS",
          "value": "157",
          "description": "GetActivityTranslationModifiers"
        },
        {
          "name": "MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND",
          "value": "158",
          "description": "GetAttackSound"
        },
        {
          "name": "MODIFIER_PROPERTY_LIFETIME_FRACTION",
          "value": "159",
          "description": "GetUnitLifetimeFraction"
        },
        {
          "name": "MODIFIER_PROPERTY_PROVIDES_FOW_POSITION",
          "value": "160",
          "description": "GetModifierProvidesFOWVision",
          "funcdesc": "Return 1 if parent's model would show to his enemies"
        },
        {
          "name": "MODIFIER_PROPERTY_SPELLS_REQUIRE_HP",
          "value": "161",
          "description": "GetModifierSpellsRequireHP"
        },
        {
          "name": "MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP",
          "value": "162",
          "description": "GetForceDrawOnMinimap"
        },
        {
          "name": "MODIFIER_PROPERTY_DISABLE_TURNING",
          "value": "163",
          "description": "GetModifierDisableTurning"
        },
        {
          "name": "MODIFIER_PROPERTY_IGNORE_CAST_ANGLE",
          "value": "164",
          "description": "GetModifierIgnoreCastAngle"
        },
        {
          "name": "MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE",
          "value": "165",
          "description": "GetModifierChangeAbilityValue"
        },
        {
          "name": "MODIFIER_PROPERTY_ABILITY_LAYOUT",
          "value": "166",
          "description": "GetModifierAbilityLayout",
          "funcdesc": "Changes the ability layout"
        },
        {
          "name": "MODIFIER_EVENT_ON_DOMINATED",
          "value": "167",
          "description": "OnDominated",
          "funcdesc": "An event that fires when a unit is being dominated"
        },
        {
          "name": "MODIFIER_PROPERTY_TEMPEST_DOUBLE",
          "value": "168",
          "description": "GetModifierTempestDouble"
        },
        {
          "name": "MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE",
          "value": "169",
          "description": "PreserveParticlesOnModelChanged"
        },
        {
          "name": "MODIFIER_EVENT_ON_ATTACK_FINISHED",
          "value": "170",
          "description": "OnAttackFinished"
        },
        {
          "name": "MODIFIER_PROPERTY_IGNORE_COOLDOWN",
          "value": "171",
          "description": "GetModifierIgnoreCooldown"
        },
        {
          "name": "MODIFIER_PROPERTY_CAN_ATTACK_TREES",
          "value": "172",
          "description": "GetModifierCanAttackTrees"
        },
        {
          "name": "MODIFIER_PROPERTY_VISUAL_Z_DELTA",
          "value": "173",
          "description": "GetVisualZDelta"
        },
        {
          "name": "MODIFIER_PROPERTY_INCOMING_DAMAGE_ILLUSION",
          "value": "174",
          "description": ""
        },
        {
          "name": "MODIFIER_FUNCTION_LAST",
          "value": "175",
          "description": ""
        },
        {
          "name": "MODIFIER_FUNCTION_INVALID",
          "value": "255",
          "description": ""
        }
      ]
    },
    {
      "title": "DOTA_CONNECTION_STATE",
      "prefix": "DOTA_CONNECTION_STATE_",
      "values": [
        {
          "name": "DOTA_CONNECTION_STATE_UNKNOWN",
          "value": "0",
          "description": ""
        },
        {
          "name": "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
          "value": "1",
          "description": ""
        },
        {
          "name": "DOTA_CONNECTION_STATE_CONNECTED",
          "value": "2",
          "description": ""
        },
        {
          "name": "DOTA_CONNECTION_STATE_DISCONNECTED",
          "value": "3",
          "description": ""
        },
        {
          "name": "DOTA_CONNECTION_STATE_ABANDONED",
          "value": "4",
          "description": ""
        },
        {
          "name": "DOTA_CONNECTION_STATE_LOADING",
          "value": "5",
          "description": ""
        },
        {
          "name": "DOTA_CONNECTION_STATE_FAILED",
          "value": "6",
          "description": ""
        }
      ]
    }
  ]
}
